[
    {
        "problem_idx": 517,
        "task_name": "Super Washing Machines",
        "description": "\n\n<p>You have <code>n</code> super washing machines on a line. Initially, each washing machine has some dresses or is empty.</p>\n\n<p>For each move, you could choose any <code>m</code> (<code>1 &lt;= m &lt;= n</code>) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.</p>\n\n<p>Given an integer array <code>machines</code> representing the number of dresses in each washing machine from left to right on the line, return <em>the minimum number of moves to make all the washing machines have the same number of dresses</em>. If it is not possible to do it, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [1,0,5]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\n1st move:    1     0 &lt;-- 5    =&gt;    1     1     4\n2nd move:    1 &lt;-- 1 &lt;-- 4    =&gt;    2     1     3\n3rd move:    2     1 &lt;-- 3    =&gt;    2     2     2\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,3,0]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\n1st move:    0 &lt;-- 3     0    =&gt;    1     2     0\n2nd move:    1     2 --&gt; 0    =&gt;    1     1     1\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> machines = [0,2,0]\n<strong>Output:</strong> -1\n<strong>Explanation:</strong>\nIt&#39;s impossible to make all three washing machines have the same number of dresses.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == machines.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= machines[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou have `n` super washing machines on a line. Initially, each washing machine has some dresses or is empty.\n\n\nFor each move, you could choose any `m` (`1 <= m <= n`) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines at the same time.\n\n\nGiven an integer array `machines` representing the number of dresses in each washing machine from left to right on the line, return *the minimum number of moves to make all the washing machines have the same number of dresses*. If it is not possible to do it, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** machines = [1,0,5]\n**Output:** 3\n**Explanation:**\n1st move:    1     0 <-- 5    =>    1     1     4\n2nd move:    1 <-- 1 <-- 4    =>    2     1     3\n3rd move:    2     1 <-- 3    =>    2     2     2\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** machines = [0,3,0]\n**Output:** 2\n**Explanation:**\n1st move:    0 <-- 3     0    =>    1     2     0\n2nd move:    1     2 --> 0    =>    1     1     1\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** machines = [0,2,0]\n**Output:** -1\n**Explanation:**\nIt's impossible to make all three washing machines have the same number of dresses.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == machines.length`\n* `1 <= n <= 104`\n* `0 <= machines[i] <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        n = len(machines)\n        k, mod = divmod(sum(machines), n)\n        if mod:\n            return -1\n        ans = s = 0\n        for x in machines:\n            x -= k\n            s += x\n            ans = max(ans, abs(s), x)\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def findMinMoves(self, machines: List[int]) -> int:\n        n = len(machines)\n        k, mod = divmod(sum(machines), n)\n        if mod:\n            return -1\n        ans = s = 0\n        for x in machines:\n            x -= k\n            s += x\n            ans = max(ans, abs(s), x)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    machines = random.choices(range(0, 100001), k=random.randint(3,10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMinMoves(machines)\n\n    return machines, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        machines, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMinMoves(machines) == expected_result\n        print(f\"assert solution.findMinMoves({machines}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.findMinMoves({machines}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.findMinMoves([86085, 63081, 92523, 62834, 94292, 45356, 10810, 85316, 10785, 70039]) == -1\nassert solution.findMinMoves([1131, 2330, 16654, 4860, 88564, 73252, 87617, 21336]) == 122897\nassert solution.findMinMoves([51585, 67007, 12181, 51858, 94425]) == -1\nassert solution.findMinMoves([14872, 38940, 50810, 88324, 91726, 50737, 40132, 63562, 46254]) == -1\nassert solution.findMinMoves([51936, 70431, 12913, 41108, 59910, 48549, 53094]) == -1\nassert solution.findMinMoves([15011, 23871, 60567, 58940, 10900, 44605, 14305, 4638]) == -1\nassert solution.findMinMoves([50337, 77670, 95557, 59169, 50434, 57921, 14281, 29329]) == -1\nassert solution.findMinMoves([21637, 15224, 57846, 1013, 6829, 31747, 26374, 93414, 92426]) == -1\nassert solution.findMinMoves([70890, 33406, 77735, 30435, 95018, 21229, 39821, 19125, 40580]) == -1\nassert solution.findMinMoves([26611, 51845, 5719, 63725, 17182, 38334, 11025, 82617]) == -1\nassert solution.findMinMoves([91786, 17627, 3052, 17089, 55038, 74106, 62158, 23560, 38533]) == -1\nassert solution.findMinMoves([42508, 71463, 97080, 67029]) == 27560\nassert solution.findMinMoves([47401, 42974, 62462, 55147, 72991, 20810, 44019, 23038, 21285, 10056]) == -1\nassert solution.findMinMoves([26322, 91036, 66115, 34693, 48048, 78781, 70630]) == 33053\nassert solution.findMinMoves([93308, 18941, 54698, 76064, 31223]) == -1\nassert solution.findMinMoves([99930, 33630, 68292, 85135, 76286]) == -1\nassert solution.findMinMoves([59088, 95424, 63131, 45139, 27537, 60814, 35701]) == 51857\nassert solution.findMinMoves([3507, 57862, 12411, 96736, 65562, 59472, 33035, 65254]) == -1\nassert solution.findMinMoves([36536, 9952, 73702]) == -1\nassert solution.findMinMoves([25693, 12753, 25331, 60246, 28180, 21192, 46404, 33176, 69056, 3069]) == 36546\nassert solution.findMinMoves([3677, 39300, 71963, 65889, 11880]) == -1\nassert solution.findMinMoves([31180, 50562, 99045, 60284, 40885, 24546, 71790, 61608, 52887]) == -1\nassert solution.findMinMoves([40655, 25656, 87372]) == -1\nassert solution.findMinMoves([20365, 8972, 16940, 42486, 70385, 13814, 32089, 10598, 82753]) == -1\nassert solution.findMinMoves([30131, 87178, 68456, 46660, 16938, 82240, 33698]) == -1\nassert solution.findMinMoves([52081, 85335, 59269, 79800, 27334]) == -1\nassert solution.findMinMoves([7386, 17774, 83871, 31951, 28751, 92374, 1747, 69082]) == 58074\nassert solution.findMinMoves([77225, 16515, 38763]) == -1\nassert solution.findMinMoves([28280, 74168, 49966]) == -1\nassert solution.findMinMoves([3427, 46837, 546, 23290, 71542, 51368, 39480]) == -1\nassert solution.findMinMoves([80900, 61891, 97562, 48065, 75302, 90331, 60734, 35854, 94381]) == -1\nassert solution.findMinMoves([43647, 91669, 17723, 30154, 20874, 7793, 80330]) == -1\nassert solution.findMinMoves([53196, 41361, 24860, 94484, 27015, 54607, 14237, 78488, 58244]) == -1\nassert solution.findMinMoves([44074, 55455, 50471, 68138, 24851, 6628, 33202, 67506]) == -1\nassert solution.findMinMoves([45715, 94982, 27977, 2411, 24051, 90726, 32672]) == -1\nassert solution.findMinMoves([45950, 13336, 93940]) == -1\nassert solution.findMinMoves([31062, 55116, 32276]) == -1\nassert solution.findMinMoves([64258, 62951, 64531, 19952, 1972, 65306, 37259, 5411, 2355, 92132]) == -1\nassert solution.findMinMoves([19776, 82964, 65201, 66660, 45444, 3948, 91501, 95320]) == -1\nassert solution.findMinMoves([44646, 61216, 14256, 15407, 74402, 7490, 20316, 1284, 335]) == -1\nassert solution.findMinMoves([60714, 52919, 53650, 88500, 30668, 493, 43966, 12095, 38897, 20849]) == -1\nassert solution.findMinMoves([13185, 85410, 31746, 90514, 22123]) == -1\nassert solution.findMinMoves([52598, 6948, 46332, 46746, 40891]) == 17860\nassert solution.findMinMoves([54493, 58965, 40205, 94660, 98740]) == -1\nassert solution.findMinMoves([23037, 8405, 80060, 56499, 19555, 72120]) == -1\nassert solution.findMinMoves([61277, 62452, 39825, 73078, 27659, 68672, 36578, 94790, 17182]) == -1\nassert solution.findMinMoves([23814, 96198, 67052, 70387, 53584]) == 38393\nassert solution.findMinMoves([77609, 51136, 17394, 22373, 22454, 91653]) == -1\nassert solution.findMinMoves([23264, 46043, 86987, 92863, 22067, 20531, 64989, 37930, 83260, 56650]) == -1\nassert solution.findMinMoves([29006, 43323, 75165, 72270, 65655, 22619, 78764, 4269, 99960, 58747]) == -1\nassert solution.findMinMoves([93205, 53745, 84997, 18194, 12626]) == -1\nassert solution.findMinMoves([75325, 66023, 35711, 55507, 13719, 81857, 10432, 92435]) == -1\nassert solution.findMinMoves([53917, 36728, 5755, 90419, 22297, 92012, 42269, 20599]) == -1\nassert solution.findMinMoves([95894, 46508, 98999, 41977, 55762, 14831, 66839]) == -1\nassert solution.findMinMoves([97713, 63452, 41055, 42041, 80542, 61575, 22716]) == 44281\nassert solution.findMinMoves([2145, 76441, 43920, 59006, 15667]) == -1\nassert solution.findMinMoves([43768, 51389, 56193, 39069, 22429]) == -1\nassert solution.findMinMoves([47975, 95433, 67180, 47877]) == -1\nassert solution.findMinMoves([37145, 50103, 60003, 54268, 55464, 27100, 90827, 94470]) == -1\nassert solution.findMinMoves([507, 26254, 51594, 98829, 83895, 76629, 89041, 35069, 79815, 99334]) == -1\nassert solution.findMinMoves([45824, 36216, 85210, 47857, 15718, 5899, 42922, 38340]) == -1\nassert solution.findMinMoves([64376, 11017, 83755, 42257, 49016, 59823, 50097]) == -1\nassert solution.findMinMoves([92908, 47248, 4748, 80554]) == -1\nassert solution.findMinMoves([3857, 59179, 16179, 47424, 54647, 31169, 31844, 46575]) == -1\nassert solution.findMinMoves([66077, 75375, 39079, 32155, 23003, 48136, 33843, 38802, 49369]) == -1\nassert solution.findMinMoves([87493, 45841, 76617, 88511, 54743, 36164]) == -1\nassert solution.findMinMoves([73455, 12186, 57560, 29586, 28307]) == -1\nassert solution.findMinMoves([64543, 61653, 35789, 51695, 60506, 98396, 66571, 26481, 48481, 48932]) == -1\nassert solution.findMinMoves([35740, 41587, 84794, 33851, 77698, 41842, 47720]) == -1\nassert solution.findMinMoves([21035, 8731, 9617]) == -1\nassert solution.findMinMoves([81129, 14346, 42732, 79038, 61119, 75009]) == -1\nassert solution.findMinMoves([34523, 12607, 61609, 66059, 74036, 33386, 78255, 92564]) == -1\nassert solution.findMinMoves([50774, 39022, 20922]) == 15984\nassert solution.findMinMoves([6658, 10267, 19663, 12578, 32721, 74644, 73136, 46301, 83941]) == -1\nassert solution.findMinMoves([90573, 24004, 24599, 64261, 57424, 60718, 37663, 71001]) == -1\nassert solution.findMinMoves([45618, 11263, 99490, 69144, 44937, 33020, 76842]) == -1\nassert solution.findMinMoves([63167, 28797, 29677, 56409, 50027, 44195, 98731, 33562, 59461]) == -1\nassert solution.findMinMoves([31329, 51808, 20270, 54175, 51439, 21129, 14253, 38821, 91945, 11358]) == -1\nassert solution.findMinMoves([96229, 2922, 95943, 80090, 60397, 16523, 4780, 7286]) == -1\nassert solution.findMinMoves([15686, 26499, 84166, 37653, 42312]) == -1\nassert solution.findMinMoves([78942, 6912, 72570, 34552]) == 30698\nassert solution.findMinMoves([37304, 97578, 11543, 13276, 86858, 1500, 89109, 54789, 94093]) == -1\nassert solution.findMinMoves([82338, 67979, 21606, 78461, 86688, 20063, 11813, 77998, 44617]) == -1\nassert solution.findMinMoves([1888, 55241, 95165, 57962, 77240, 41624, 38795, 15977, 82006]) == -1\nassert solution.findMinMoves([44253, 69208, 14935]) == -1\nassert solution.findMinMoves([14143, 46637, 23719, 69966]) == -1\nassert solution.findMinMoves([72163, 28095, 31319, 55587, 73941, 4274, 28677, 35042, 21503]) == -1\nassert solution.findMinMoves([43445, 97255, 86607, 40572]) == -1\nassert solution.findMinMoves([8417, 32465, 87964, 7620]) == -1\nassert solution.findMinMoves([49037, 42628, 81294, 12540, 61158, 98199, 1997]) == -1\nassert solution.findMinMoves([68427, 28484, 83880, 50859, 28681, 11249, 7005, 57879, 37832, 92673]) == -1\nassert solution.findMinMoves([65734, 76277, 90713, 4988, 51960, 67893, 76689, 52545, 89353, 69058]) == 39161\nassert solution.findMinMoves([49320, 32703, 38965, 672]) == 29743\nassert solution.findMinMoves([38372, 25070, 62512, 17953, 73724]) == -1\nassert solution.findMinMoves([23490, 17985, 27590]) == -1\nassert solution.findMinMoves([91172, 81388, 48718, 49547, 20367, 45425]) == -1\nassert solution.findMinMoves([81218, 85442, 45383, 87801, 92104, 59928, 47496, 89839, 88528]) == -1\nassert solution.findMinMoves([87808, 86564, 13416, 75990, 18935, 16290, 35362, 6729, 77294]) == -1\nassert solution.findMinMoves([96806, 63685, 6916, 63039, 69058, 26272, 79554, 91198, 94685]) == -1\nassert solution.findMinMoves([64546, 23822, 49002, 46475, 85730, 63282, 31957, 30123, 64487, 67636]) == 33024",
        "small_test_cases": "\nsolution = Solution()\nassert solution.findMinMoves([1, 0, 5]) == 3\nassert solution.findMinMoves([0, 3, 0]) == 2\nassert solution.findMinMoves([0, 2, 0]) == -1\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 2141,
        "task_name": "Maximum Running Time of N Computers",
        "description": "\n\n<p>You have <code>n</code> computers. You are given the integer <code>n</code> and a <strong>0-indexed</strong> integer array <code>batteries</code> where the <code>i<sup>th</sup></code> battery can <strong>run</strong> a computer for <code>batteries[i]</code> minutes. You are interested in running <strong>all</strong> <code>n</code> computers <strong>simultaneously</strong> using the given batteries.</p>\n\n<p>Initially, you can insert <strong>at most one battery</strong> into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery <strong>any number of times</strong>. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.</p>\n\n<p>Note that the batteries cannot be recharged.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of minutes you can run all the </em><code>n</code><em> computers simultaneously.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example1-fit.png\" style=\"width: 762px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> n = 2, batteries = [3,3,3]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example2.png\" style=\"width: 629px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> n = 2, batteries = [1,1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= batteries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= batteries[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou have `n` computers. You are given the integer `n` and a **0-indexed** integer array `batteries` where the `ith` battery can **run** a computer for `batteries[i]` minutes. You are interested in running **all** `n` computers **simultaneously** using the given batteries.\n\n\nInitially, you can insert **at most one battery** into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery **any number of times**. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\n\n\nNote that the batteries cannot be recharged.\n\n\nReturn *the **maximum** number of minutes you can run all the* `n` *computers simultaneously.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example1-fit.png)\n\n```\n\n**Input:** n = 2, batteries = [3,3,3]\n**Output:** 4\n**Explanation:** \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example2.png)\n\n```\n\n**Input:** n = 2, batteries = [1,1,1,1]\n**Output:** 2\n**Explanation:** \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= batteries.length <= 105`\n* `1 <= batteries[i] <= 109`\n\n\n",
        "canonical_solution": "class Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        l, r = 0, sum(batteries)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(min(x, mid) for x in batteries) >= n * mid:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        l, r = 0, sum(batteries)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(min(x, mid) for x in batteries) >= n * mid:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number of computers\n    n = random.randint(1, 11)\n    \n    # Generate a random list of batteries with length n\n    batteries = random.sample(range(1, 101), n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxRunTime(n, batteries)\n\n    return n, batteries, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, batteries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxRunTime(n, batteries) == expected_result\n        print(f\"assert solution.maxRunTime({n}, {batteries}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxRunTime({n}, {batteries}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.maxRunTime(5, [39, 3, 24, 2, 1]) == 1\nassert solution.maxRunTime(4, [96, 36, 27, 100]) == 27\nassert solution.maxRunTime(3, [5, 77, 37]) == 5\nassert solution.maxRunTime(7, [34, 57, 77, 30, 62, 58, 26]) == 26\nassert solution.maxRunTime(1, [16]) == 16\nassert solution.maxRunTime(5, [31, 51, 100, 82, 36]) == 31\nassert solution.maxRunTime(3, [4, 41, 10]) == 4\nassert solution.maxRunTime(11, [58, 82, 6, 2, 14, 74, 100, 94, 73, 55, 95]) == 2\nassert solution.maxRunTime(11, [21, 83, 51, 72, 55, 64, 63, 41, 100, 12, 22]) == 12\nassert solution.maxRunTime(5, [21, 57, 43, 58, 24]) == 21\nassert solution.maxRunTime(9, [89, 65, 74, 11, 13, 90, 27, 99, 14]) == 11\nassert solution.maxRunTime(9, [46, 78, 58, 45, 95, 88, 12, 73, 29]) == 12\nassert solution.maxRunTime(5, [30, 91, 68, 97, 8]) == 8\nassert solution.maxRunTime(11, [23, 75, 5, 55, 60, 41, 4, 13, 84, 54, 67]) == 4\nassert solution.maxRunTime(9, [84, 76, 95, 67, 24, 64, 91, 14, 16]) == 14\nassert solution.maxRunTime(6, [70, 24, 2, 71, 84, 49]) == 2\nassert solution.maxRunTime(4, [63, 31, 86, 20]) == 20\nassert solution.maxRunTime(6, [39, 2, 20, 76, 99, 51]) == 2\nassert solution.maxRunTime(1, [39]) == 39\nassert solution.maxRunTime(1, [35]) == 35\nassert solution.maxRunTime(6, [78, 99, 83, 3, 80, 49]) == 3\nassert solution.maxRunTime(6, [82, 80, 85, 30, 40, 50]) == 30\nassert solution.maxRunTime(6, [58, 24, 25, 43, 99, 33]) == 24\nassert solution.maxRunTime(5, [29, 90, 100, 25, 51]) == 25\nassert solution.maxRunTime(7, [64, 92, 16, 22, 35, 69, 8]) == 8\nassert solution.maxRunTime(5, [97, 99, 50, 100, 46]) == 46\nassert solution.maxRunTime(10, [90, 73, 17, 13, 3, 77, 38, 98, 2, 93]) == 2\nassert solution.maxRunTime(11, [18, 86, 34, 88, 6, 77, 98, 12, 31, 24, 58]) == 6\nassert solution.maxRunTime(3, [37, 88, 75]) == 37\nassert solution.maxRunTime(5, [69, 82, 62, 88, 55]) == 55\nassert solution.maxRunTime(11, [84, 43, 71, 81, 21, 31, 90, 30, 7, 26, 37]) == 7\nassert solution.maxRunTime(7, [75, 10, 78, 81, 19, 45, 16]) == 10\nassert solution.maxRunTime(5, [16, 96, 30, 15, 6]) == 6\nassert solution.maxRunTime(6, [10, 43, 87, 39, 88, 19]) == 10\nassert solution.maxRunTime(8, [90, 79, 56, 4, 37, 97, 46, 21]) == 4\nassert solution.maxRunTime(9, [22, 20, 7, 93, 98, 30, 76, 27, 44]) == 7\nassert solution.maxRunTime(1, [11]) == 11\nassert solution.maxRunTime(3, [100, 10, 20]) == 10\nassert solution.maxRunTime(8, [60, 39, 57, 9, 41, 54, 72, 42]) == 9\nassert solution.maxRunTime(7, [5, 55, 86, 63, 68, 27, 79]) == 5\nassert solution.maxRunTime(8, [79, 45, 51, 36, 85, 42, 21, 69]) == 21\nassert solution.maxRunTime(10, [79, 29, 30, 64, 15, 35, 89, 19, 60, 92]) == 15\nassert solution.maxRunTime(7, [90, 95, 48, 3, 12, 9, 70]) == 3\nassert solution.maxRunTime(8, [82, 45, 44, 67, 73, 98, 1, 40]) == 1\nassert solution.maxRunTime(8, [35, 93, 78, 3, 92, 57, 13, 97]) == 3\nassert solution.maxRunTime(4, [47, 63, 2, 41]) == 2\nassert solution.maxRunTime(3, [28, 76, 13]) == 13\nassert solution.maxRunTime(11, [77, 61, 95, 42, 45, 17, 88, 70, 11, 87, 82]) == 11\nassert solution.maxRunTime(10, [7, 2, 11, 89, 20, 17, 58, 75, 14, 59]) == 2\nassert solution.maxRunTime(3, [24, 30, 87]) == 24\nassert solution.maxRunTime(5, [42, 38, 19, 43, 14]) == 14\nassert solution.maxRunTime(1, [52]) == 52\nassert solution.maxRunTime(9, [81, 46, 53, 58, 44, 3, 52, 37, 65]) == 3\nassert solution.maxRunTime(9, [72, 97, 50, 49, 23, 21, 10, 59, 60]) == 10\nassert solution.maxRunTime(5, [80, 90, 47, 77, 62]) == 47\nassert solution.maxRunTime(9, [19, 92, 95, 11, 29, 88, 74, 16, 15]) == 11\nassert solution.maxRunTime(6, [4, 84, 45, 19, 14, 79]) == 4\nassert solution.maxRunTime(11, [6, 22, 71, 94, 16, 91, 76, 34, 46, 53, 39]) == 6\nassert solution.maxRunTime(11, [69, 78, 59, 56, 86, 28, 88, 34, 13, 55, 1]) == 1\nassert solution.maxRunTime(8, [63, 21, 65, 42, 25, 40, 7, 56]) == 7\nassert solution.maxRunTime(1, [70]) == 70\nassert solution.maxRunTime(8, [15, 33, 78, 98, 71, 29, 22, 52]) == 15\nassert solution.maxRunTime(2, [13, 56]) == 13\nassert solution.maxRunTime(1, [6]) == 6\nassert solution.maxRunTime(7, [45, 86, 60, 39, 93, 9, 46]) == 9\nassert solution.maxRunTime(5, [31, 54, 9, 45, 63]) == 9\nassert solution.maxRunTime(11, [32, 20, 78, 13, 69, 15, 14, 52, 61, 39, 84]) == 13\nassert solution.maxRunTime(8, [8, 66, 15, 88, 23, 63, 40, 17]) == 8\nassert solution.maxRunTime(3, [22, 36, 41]) == 22\nassert solution.maxRunTime(5, [94, 84, 10, 32, 1]) == 1\nassert solution.maxRunTime(11, [66, 92, 28, 58, 63, 62, 95, 25, 7, 20, 77]) == 7\nassert solution.maxRunTime(2, [70, 97]) == 70\nassert solution.maxRunTime(1, [86]) == 86\nassert solution.maxRunTime(10, [72, 88, 71, 11, 38, 36, 57, 60, 45, 100]) == 11\nassert solution.maxRunTime(1, [80]) == 80\nassert solution.maxRunTime(8, [97, 84, 55, 62, 73, 80, 79, 51]) == 51\nassert solution.maxRunTime(8, [34, 98, 76, 96, 22, 23, 89, 79]) == 22\nassert solution.maxRunTime(7, [15, 49, 59, 69, 26, 2, 65]) == 2\nassert solution.maxRunTime(10, [44, 37, 96, 91, 98, 48, 1, 36, 9, 3]) == 1\nassert solution.maxRunTime(6, [10, 91, 54, 42, 87, 89]) == 10\nassert solution.maxRunTime(6, [90, 86, 7, 18, 73, 21]) == 7\nassert solution.maxRunTime(1, [55]) == 55\nassert solution.maxRunTime(1, [85]) == 85\nassert solution.maxRunTime(9, [21, 47, 99, 87, 39, 55, 68, 5, 4]) == 4\nassert solution.maxRunTime(4, [99, 83, 37, 92]) == 37\nassert solution.maxRunTime(5, [81, 19, 25, 93, 54]) == 19\nassert solution.maxRunTime(6, [17, 97, 60, 33, 72, 13]) == 13\nassert solution.maxRunTime(3, [64, 72, 60]) == 60\nassert solution.maxRunTime(6, [77, 54, 42, 95, 85, 75]) == 42\nassert solution.maxRunTime(8, [90, 23, 37, 42, 27, 61, 4, 99]) == 4\nassert solution.maxRunTime(3, [80, 3, 54]) == 3\nassert solution.maxRunTime(2, [57, 32]) == 32\nassert solution.maxRunTime(8, [7, 70, 96, 92, 20, 13, 2, 43]) == 2\nassert solution.maxRunTime(6, [86, 31, 12, 52, 43, 45]) == 12\nassert solution.maxRunTime(1, [83]) == 83\nassert solution.maxRunTime(8, [58, 63, 27, 76, 69, 34, 45, 25]) == 25\nassert solution.maxRunTime(8, [31, 78, 63, 59, 41, 3, 30, 55]) == 3\nassert solution.maxRunTime(8, [42, 61, 70, 66, 57, 17, 81, 22]) == 17\nassert solution.maxRunTime(5, [99, 6, 35, 50, 95]) == 6\nassert solution.maxRunTime(4, [25, 42, 87, 40]) == 25",
        "small_test_cases": "\nsolution = Solution()\nassert solution.maxRunTime(2, [3,3,3]) == 4\nassert solution.maxRunTime(2, [1,1,1,1]) == 2\n",
        "algorithms": [
            "greedy",
            "binary_search",
            "sorting"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 527,
        "task_name": "Word Abbreviation",
        "description": "\n\n<p>Given an array of <strong>distinct</strong> strings <code>words</code>, return <em>the minimal possible <strong>abbreviations</strong> for every word</em>.</p>\n\n<p>The following are the rules for a string abbreviation:</p>\n\n<ol>\n\t<li>The <strong>initial</strong> abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.</li>\n\t<li>If more than one word shares the <strong>same</strong> abbreviation, then perform the following operation:\n\t<ul>\n\t\t<li><strong>Increase</strong> the prefix (characters in the first part) of each of their abbreviations by <code>1</code>.\n\t\t<ul>\n\t\t\t<li>For example, say you start with the words <code>[&quot;abcdef&quot;,&quot;abndef&quot;]</code> both initially abbreviated as <code>&quot;a4f&quot;</code>. Then, a sequence of operations would be <code>[&quot;a4f&quot;,&quot;a4f&quot;]</code> -&gt; <code>[&quot;ab3f&quot;,&quot;ab3f&quot;]</code> -&gt; <code>[&quot;abc2f&quot;,&quot;abn2f&quot;]</code>.</li>\n\t\t</ul>\n\t\t</li>\n\t\t<li>This operation is repeated until every abbreviation is <strong>unique</strong>.</li>\n\t</ul>\n\t</li>\n\t<li>At the end, if an abbreviation did not make a word shorter, then keep it as the original word.</li>\n</ol>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\n<strong>Output:</strong> [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> words = [\"aa\",\"aaa\"]\n<strong>Output:</strong> [\"aa\",\"aaa\"]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= words.length &lt;= 400</code></li>\n\t<li><code>2 &lt;= words[i].length &lt;= 400</code></li>\n\t<li><code>words[i]</code> consists of lowercase English letters.</li>\n\t<li>All the strings of <code>words</code> are <strong>unique</strong>.</li>\n</ul>\n\n",
        "markdown_description": "\nGiven an array of **distinct** strings `words`, return *the minimal possible **abbreviations** for every word*.\n\n\nThe following are the rules for a string abbreviation:\n\n\n1. The **initial** abbreviation for each word is: the first character, then the number of characters in between, followed by the last character.\n2. If more than one word shares the **same** abbreviation, then perform the following operation:\n\t* **Increase** the prefix (characters in the first part) of each of their abbreviations by `1`.\n\t\t+ For example, say you start with the words `[\"abcdef\",\"abndef\"]` both initially abbreviated as `\"a4f\"`. Then, a sequence of operations would be `[\"a4f\",\"a4f\"]` -> `[\"ab3f\",\"ab3f\"]` -> `[\"abc2f\",\"abn2f\"]`.\n\t* This operation is repeated until every abbreviation is **unique**.\n3. At the end, if an abbreviation did not make a word shorter, then keep it as the original word.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n**Input:** words = [\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]\n**Output:** [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\n\n```\n**Example 2:**\n\n\n\n```\n**Input:** words = [\"aa\",\"aaa\"]\n**Output:** [\"aa\",\"aaa\"]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= words.length <= 400`\n* `2 <= words[i].length <= 400`\n* `words[i]` consists of lowercase English letters.\n* All the strings of `words` are **unique**.\n\n\n",
        "canonical_solution": "class Trie:\n    __slots__ = [\"children\", \"cnt\"]\n\n    def __init__(self):\n        self.children = [None] * 26\n        self.cnt = 0\n\n    def insert(self, w: str):\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if not node.children[idx]:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.cnt += 1\n\n    def search(self, w: str) -> int:\n        node = self\n        cnt = 0\n        for c in w:\n            cnt += 1\n            idx = ord(c) - ord(\"a\")\n            node = node.children[idx]\n            if node.cnt == 1:\n                return cnt\n        return len(w)\n\n\nclass Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        tries = {}\n        for w in words:\n            m = len(w)\n            if (m, w[-1]) not in tries:\n                tries[(m, w[-1])] = Trie()\n            tries[(m, w[-1])].insert(w)\n        ans = []\n        for w in words:\n            cnt = tries[(len(w), w[-1])].search(w)\n            ans.append(\n                w if cnt + 2 >= len(w) else w[:cnt] + str(len(w) - cnt - 1) + w[-1]\n            )\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Trie:\n    __slots__ = [\"children\", \"cnt\"]\n\n    def __init__(self):\n        self.children = [None] * 26\n        self.cnt = 0\n\n    def insert(self, w: str):\n        node = self\n        for c in w:\n            idx = ord(c) - ord(\"a\")\n            if not node.children[idx]:\n                node.children[idx] = Trie()\n            node = node.children[idx]\n            node.cnt += 1\n\n    def search(self, w: str) -> int:\n        node = self\n        cnt = 0\n        for c in w:\n            cnt += 1\n            idx = ord(c) - ord(\"a\")\n            node = node.children[idx]\n            if node.cnt == 1:\n                return cnt\n        return len(w)\n\n\nclass Solution:\n    def wordsAbbreviation(self, words: List[str]) -> List[str]:\n        tries = {}\n        for w in words:\n            m = len(w)\n            if (m, w[-1]) not in tries:\n                tries[(m, w[-1])] = Trie()\n            tries[(m, w[-1])].insert(w)\n        ans = []\n        for w in words:\n            cnt = tries[(len(w), w[-1])].search(w)\n            ans.append(\n                w if cnt + 2 >= len(w) else w[:cnt] + str(len(w) - cnt - 1) + w[-1]\n            )\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n    words = []\n    for _ in range(random.randint(1, 10)):\n        word = \"\"\n        for _ in range(random.randint(1, 10)):\n            word += chr(random.randint(ord(\"a\"), ord(\"z\")))\n        words.append(word)\n    expected_result = solution.wordsAbbreviation(words)\n    return words, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        words, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wordsAbbreviation(words) == expected_result\n        print(f'assert solution.wordsAbbreviation({words}) == {expected_result}')\n        test_case_generator_results.append(f'assert solution.wordsAbbreviation({words}) == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100 \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.wordsAbbreviation(['ggkgzjpf', 'xovkwx', 'olbn']) == ['g6f', 'x4x', 'o2n']\nassert solution.wordsAbbreviation(['el', 'dqh', 'laahe']) == ['el', 'dqh', 'l3e']\nassert solution.wordsAbbreviation(['jfckrtx', 'gbpugdalt', 'ehot', 'febj', 'by', 'ff', 'uyvucfcypo', 'srcrttymku']) == ['j5x', 'g7t', 'e2t', 'f2j', 'by', 'ff', 'u8o', 's8u']\nassert solution.wordsAbbreviation(['bboftpag', 'lzavexquoo', 'ocgzcjsw', 'usoxqccu', 'eybqbso', 'nlnrhm']) == ['b6g', 'l8o', 'o6w', 'u6u', 'e5o', 'n4m']\nassert solution.wordsAbbreviation(['yrnb', 'reszfvzwsm', 'mvzmydsttc', 'iejtazaek', 'psxaajcy', 'ubx', 'ardicpegz', 'ov', 'hsydbtn']) == ['y2b', 'r8m', 'm8c', 'i7k', 'p6y', 'ubx', 'a7z', 'ov', 'h5n']\nassert solution.wordsAbbreviation(['dyumohkw', 'eisqidxb', 'qjirmuq', 'aefs', 'pce', 'ophnshe', 'svnjpafmf', 'xkhi']) == ['d6w', 'e6b', 'q5q', 'a2s', 'pce', 'o5e', 's7f', 'x2i']\nassert solution.wordsAbbreviation(['brhwkgbjw', 'wfqk', 'krnc', 's', 'zaran']) == ['b7w', 'w2k', 'k2c', 's', 'z3n']\nassert solution.wordsAbbreviation(['thhjjqwl', 'rxd', 'vhvc', 'tc', 'bfp']) == ['t6l', 'rxd', 'v2c', 'tc', 'bfp']\nassert solution.wordsAbbreviation(['hhhhant', 'nkewfqslty', 'ftuohdrnbf', 'hvvl', 'soyjujiy']) == ['h5t', 'n8y', 'f8f', 'h2l', 's6y']\nassert solution.wordsAbbreviation(['ogkaqgsj', 'htswg', 'v', 'mgbredffy', 'jyokzsor', 'cl', 'gmrtldc', 'dbvcqlew']) == ['o6j', 'h3g', 'v', 'm7y', 'j6r', 'cl', 'g5c', 'd6w']\nassert solution.wordsAbbreviation(['angxlx', 'pfcpkamubh', 'gyhsjpz']) == ['a4x', 'p8h', 'g5z']\nassert solution.wordsAbbreviation(['csjref', 'sadlrsv', 'ycchhqoh', 'mencdaqbqd', 'jw', 'elc', 'uwcpjdxq', 'agimsu', 'xw', 'pethiffkj']) == ['c4f', 's5v', 'y6h', 'm8d', 'jw', 'elc', 'u6q', 'a4u', 'xw', 'p7j']\nassert solution.wordsAbbreviation(['fkgkg', 'wdswngruig', 'dhgwnh', 'jpiuhsikom', 'opbhcxylx']) == ['f3g', 'w8g', 'd4h', 'j8m', 'o7x']\nassert solution.wordsAbbreviation(['qcpo', 'qdztkh', 'ol', 'zpvycps', 'a', 'th', 'yezp', 'lbvnaxks', 'z']) == ['q2o', 'q4h', 'ol', 'z5s', 'a', 'th', 'y2p', 'l6s', 'z']\nassert solution.wordsAbbreviation(['a', 'dlkga', 'qoyfgnruo', 'mzabw']) == ['a', 'd3a', 'q7o', 'm3w']\nassert solution.wordsAbbreviation(['yul', 'bxjeaaazb', 'mfayvkhhem', 'ibicq', 'mwfbqdfy', 'dcu']) == ['yul', 'b7b', 'm8m', 'i3q', 'm6y', 'dcu']\nassert solution.wordsAbbreviation(['zsyqvqdvt', 'psqe', 'lncu', 'rl', 'reaj', 'm', 'zrezljst', 'cpta']) == ['z7t', 'p2e', 'l2u', 'rl', 'r2j', 'm', 'z6t', 'c2a']\nassert solution.wordsAbbreviation(['ckif', 'gkcezglzrz', 'ugosfeg']) == ['c2f', 'g8z', 'u5g']\nassert solution.wordsAbbreviation(['mrf', 'srlozoucm', 'epwitgfj', 'of', 'npnaylqtzx', 'bwon']) == ['mrf', 's7m', 'e6j', 'of', 'n8x', 'b2n']\nassert solution.wordsAbbreviation(['jsing', 'r', 'fxztsnsltq', 'acaji']) == ['j3g', 'r', 'f8q', 'a3i']\nassert solution.wordsAbbreviation(['gusswb', 'vigm', 'asblgztq', 'etcvr', 'pfxgt']) == ['g4b', 'v2m', 'a6q', 'e3r', 'p3t']\nassert solution.wordsAbbreviation(['zrrbcvt', 'vmsegboz', 'zgpgqkqk', 'vlwie']) == ['z5t', 'v6z', 'z6k', 'v3e']\nassert solution.wordsAbbreviation(['ga']) == ['ga']\nassert solution.wordsAbbreviation(['ak', 'ylxhjvls', 'ilcuxt', 'shykr', 'bdfcvirfr', 'r', 'a', 'rv', 'y', 'fren']) == ['ak', 'y6s', 'i4t', 's3r', 'b7r', 'r', 'a', 'rv', 'y', 'f2n']\nassert solution.wordsAbbreviation(['ekdincjqs', 'j', 'oidluzgraa', 'dsmtkryfkw', 'msjjrqwxev', 'yerjiv']) == ['e7s', 'j', 'o8a', 'd8w', 'm8v', 'y4v']\nassert solution.wordsAbbreviation(['tzv', 'vj', 'ucfgfg', 'qhylpqjj']) == ['tzv', 'vj', 'u4g', 'q6j']\nassert solution.wordsAbbreviation(['bjst', 'mzeog', 'apmakt', 'xuxmfdj', 'espkm', 'hqhmk', 'rv', 'tk', 'f', 'mutmvtk']) == ['b2t', 'm3g', 'a4t', 'x5j', 'e3m', 'h3k', 'rv', 'tk', 'f', 'm5k']\nassert solution.wordsAbbreviation(['dlvmicsms', 'm', 'bbedlizj', 'npfcaks', 'sld', 'afmbbc', 'ykibdzqdwl', 'ib']) == ['d7s', 'm', 'b6j', 'n5s', 'sld', 'a4c', 'y8l', 'ib']\nassert solution.wordsAbbreviation(['fxzo', 'jgmaezcmm', 'hpbog', 'hcduavfujy', 'zq']) == ['f2o', 'j7m', 'h3g', 'h8y', 'zq']\nassert solution.wordsAbbreviation(['x', 'ccxloqsz', 'sxxjdouv', 'uqfc', 'th', 'hvomgqmeae', 'ktfqeys', 'iiypdqb']) == ['x', 'c6z', 's6v', 'u2c', 'th', 'h8e', 'k5s', 'i5b']\nassert solution.wordsAbbreviation(['v', 'vxxat', 'kwdmqqm', 'uusawokva', 'olnoudwaxc', 'z', 'zspwt']) == ['v', 'v3t', 'k5m', 'u7a', 'o8c', 'z', 'z3t']\nassert solution.wordsAbbreviation(['rmt', 'n']) == ['rmt', 'n']\nassert solution.wordsAbbreviation(['gdovdfajx', 'bwkzsnkbn', 'fhjskjxaj']) == ['g7x', 'b7n', 'f7j']\nassert solution.wordsAbbreviation(['ddkpc', 'quwgfcbtnd', 'x', 'ewmrlfhrj', 'gccvxvc']) == ['d3c', 'q8d', 'x', 'e7j', 'g5c']\nassert solution.wordsAbbreviation(['nxowfcmxm']) == ['n7m']\nassert solution.wordsAbbreviation(['dcwxaapevh', 'bimepjaa', 'avcnd', 'fvbt', 'rcvttyysq']) == ['d8h', 'b6a', 'a3d', 'f2t', 'r7q']\nassert solution.wordsAbbreviation(['zi', 'uehgjxkm', 'vpj']) == ['zi', 'u6m', 'vpj']\nassert solution.wordsAbbreviation(['vnilrswrsf', 'cjln', 'awkydzpxy']) == ['v8f', 'c2n', 'a7y']\nassert solution.wordsAbbreviation(['nruspible', 'vo', 'koaawwlz', 'cl', 'answpyw', 'bqqxuegs']) == ['n7e', 'vo', 'k6z', 'cl', 'a5w', 'b6s']\nassert solution.wordsAbbreviation(['xj', 'twawvdqb', 'vhc', 'wutlaot', 'nivlvr', 'sulgxmu', 'hyrlquy', 'rnjvgnbxd', 'zsest', 'ahusglqkhu']) == ['xj', 't6b', 'vhc', 'w5t', 'n4r', 's5u', 'h5y', 'r7d', 'z3t', 'a8u']\nassert solution.wordsAbbreviation(['qmrmpumy', 'xd', 'y', 'sclp', 'alubdldjg', 'wdagy', 'pbytyo', 'tak', 'vgyyjq', 'kfxaxkw']) == ['q6y', 'xd', 'y', 's2p', 'a7g', 'w3y', 'p4o', 'tak', 'v4q', 'k5w']\nassert solution.wordsAbbreviation(['st', 'wdhyeu', 'uuxxvubbhh', 'mtnvsdns']) == ['st', 'w4u', 'u8h', 'm6s']\nassert solution.wordsAbbreviation(['wxzjkl']) == ['w4l']\nassert solution.wordsAbbreviation(['blmkn', 'ohyychm']) == ['b3n', 'o5m']\nassert solution.wordsAbbreviation(['uhc', 'rekcsecx']) == ['uhc', 'r6x']\nassert solution.wordsAbbreviation(['qrollpghk', 'lzffbjbjs', 'jjjwnpv', 'rcvz', 'qpxjd', 'wexnjiu', 'bfumw', 'dgvrlzhn', 'feenqfg']) == ['q7k', 'l7s', 'j5v', 'r2z', 'q3d', 'w5u', 'b3w', 'd6n', 'f5g']\nassert solution.wordsAbbreviation(['ebf', 'ivqtqxuj', 'wptsvdatix', 'wncl', 'ozflzm']) == ['ebf', 'i6j', 'w8x', 'w2l', 'o4m']\nassert solution.wordsAbbreviation(['jkumw', 'm', 'exldl', 'fotxp', 'twsh', 'lahtdmw']) == ['j3w', 'm', 'e3l', 'f3p', 't2h', 'l5w']\nassert solution.wordsAbbreviation(['cxlgglpd', 'b', 'y', 'klydtvv', 'o', 'pml', 'negvqeeq', 'eexxgn', 'igqoyku', 'zqbolowgfc']) == ['c6d', 'b', 'y', 'k5v', 'o', 'pml', 'n6q', 'e4n', 'i5u', 'z8c']\nassert solution.wordsAbbreviation(['yamjrgjxxx', 'oajb']) == ['y8x', 'o2b']\nassert solution.wordsAbbreviation(['spra', 'rcpljwq']) == ['s2a', 'r5q']\nassert solution.wordsAbbreviation(['qc', 'pmpkve', 'byi', 'lja', 'wawwd', 'ftrmkyehdm', 'eaoi', 'ugflhcufe', 'zs', 'yumpwm']) == ['qc', 'p4e', 'byi', 'lja', 'w3d', 'f8m', 'e2i', 'u7e', 'zs', 'y4m']\nassert solution.wordsAbbreviation(['cx', 'fgfooudzzv', 'ulrmvcgf', 'ft', 'qpytbkbim', 'lapt', 'rdvqwa', 'ltxnal', 'yaw']) == ['cx', 'f8v', 'u6f', 'ft', 'q7m', 'l2t', 'r4a', 'l4l', 'yaw']\nassert solution.wordsAbbreviation(['gowt', 'icxlh', 'otveyrlkt', 'qxziflb', 'syqn', 'pqbb']) == ['g2t', 'i3h', 'o7t', 'q5b', 's2n', 'p2b']\nassert solution.wordsAbbreviation(['yucvq']) == ['y3q']\nassert solution.wordsAbbreviation(['cuouxago', 'juhm', 'icuzuq', 'th', 'mchkrbpk', 'ckqduurd', 'lbuzbjtl']) == ['c6o', 'j2m', 'i4q', 'th', 'm6k', 'c6d', 'l6l']\nassert solution.wordsAbbreviation(['vpxjssups', 'mlrjzuoqt', 'cxg', 'rdof', 'qzvnc']) == ['v7s', 'm7t', 'cxg', 'r2f', 'q3c']\nassert solution.wordsAbbreviation(['rjerxysjzz', 'zvnpmjxz', 'fkvzkbpfu', 'johkinv']) == ['r8z', 'z6z', 'f7u', 'j5v']\nassert solution.wordsAbbreviation(['kvqyu', 'xnuiplrlk', 'we', 'nawuhrqxyk']) == ['k3u', 'x7k', 'we', 'n8k']\nassert solution.wordsAbbreviation(['crz', 'gqzvkddn', 'guiamhr', 'qyexmt', 'xh', 'qwpsoe', 'qfmnmr', 'dwdjeiqgmm']) == ['crz', 'g6n', 'g5r', 'q4t', 'xh', 'q4e', 'q4r', 'd8m']\nassert solution.wordsAbbreviation(['bpzep']) == ['b3p']\nassert solution.wordsAbbreviation(['mg']) == ['mg']\nassert solution.wordsAbbreviation(['ngadfeenr', 'vyhlk', 'nkmprnhqx']) == ['n7r', 'v3k', 'n7x']\nassert solution.wordsAbbreviation(['meyesm', 'g', 'n']) == ['m4m', 'g', 'n']\nassert solution.wordsAbbreviation(['dcnuy', 'kzx', 'qbooypyzwf', 'xwaawt', 'bc', 'mngoqnwvxy', 'hyyocnr', 'sgvwsr']) == ['d3y', 'kzx', 'q8f', 'x4t', 'bc', 'm8y', 'h5r', 's4r']\nassert solution.wordsAbbreviation(['oxit', 'xyvmpchmk', 'cgwmkfvo', 'ewpbqweq']) == ['o2t', 'x7k', 'c6o', 'e6q']\nassert solution.wordsAbbreviation(['euwnjr', 'x', 'urhzpvimag', 'fblwweobf', 'wpatkgal', 'qxfnunkvep', 'ykyaut', 'gznrkc', 't']) == ['e4r', 'x', 'u8g', 'f7f', 'w6l', 'q8p', 'y4t', 'g4c', 't']\nassert solution.wordsAbbreviation(['o', 'xdilp']) == ['o', 'x3p']\nassert solution.wordsAbbreviation(['bv', 'gtobomlteq', 'qhhvtdp', 'ks', 'fsdxpz', 'mjn', 'l']) == ['bv', 'g8q', 'q5p', 'ks', 'f4z', 'mjn', 'l']\nassert solution.wordsAbbreviation(['mgkjsya', 'pjgkwcoi', 'qv', 'yp', 'ymbtznqd', 'wrrkamxvp']) == ['m5a', 'p6i', 'qv', 'yp', 'y6d', 'w7p']\nassert solution.wordsAbbreviation(['wl', 'cikdlvmfy', 'oz']) == ['wl', 'c7y', 'oz']\nassert solution.wordsAbbreviation(['mwjmnbk']) == ['m5k']\nassert solution.wordsAbbreviation(['yzexb', 'zwqxir', 'xsacdkoojs', 'wi', 'xcqeelras', 'md', 'tyzbmubvao', 'syusfgq', 'ffqqdlp', 'nvzgpmp']) == ['y3b', 'z4r', 'x8s', 'wi', 'x7s', 'md', 't8o', 's5q', 'f5p', 'n5p']\nassert solution.wordsAbbreviation(['mljznd', 'nn', 'uvmu', 'mulftpflef', 'alt']) == ['m4d', 'nn', 'u2u', 'm8f', 'alt']\nassert solution.wordsAbbreviation(['w', 'iehv', 'fclvlg', 't', 'gglxwfra', 'p', 'taqcxlfth', 'xtwmphsl']) == ['w', 'i2v', 'f4g', 't', 'g6a', 'p', 't7h', 'x6l']\nassert solution.wordsAbbreviation(['gbhkofutaf', 'rdmu', 'wmhajrebsi', 'oojdpwi']) == ['g8f', 'r2u', 'w8i', 'o5i']\nassert solution.wordsAbbreviation(['ocemrmicyg', 'ke', 'mkbofkm', 'fxlpafx', 'uoa', 'qhrk', 'fx', 'xpdmv', 'wuexalu']) == ['o8g', 'ke', 'm5m', 'f5x', 'uoa', 'q2k', 'fx', 'x3v', 'w5u']\nassert solution.wordsAbbreviation(['pzo', 'ntaxmdu', 'stzwi']) == ['pzo', 'n5u', 's3i']\nassert solution.wordsAbbreviation(['sm', 'a', 'mjgbvsub', 'tnrhccz', 'nrbouxf', 'a']) == ['sm', 'a', 'm6b', 't5z', 'n5f', 'a']\nassert solution.wordsAbbreviation(['cnltnoythi', 'g', 'swagnpil', 'ijwr']) == ['c8i', 'g', 's6l', 'i2r']\nassert solution.wordsAbbreviation(['fp', 'ddkl', 'ejsqxucvp', 'rjfyd', 'vhl', 'qnmng', 'gf']) == ['fp', 'd2l', 'e7p', 'r3d', 'vhl', 'q3g', 'gf']\nassert solution.wordsAbbreviation(['auvsddr', 'axewnsfrwl', 'nmoyilhou', 'te', 'gogu']) == ['a5r', 'a8l', 'n7u', 'te', 'g2u']\nassert solution.wordsAbbreviation(['sqsplfdlw']) == ['s7w']\nassert solution.wordsAbbreviation(['nktmmm', 'yeyrdmi', 'kraeljw', 'yhbrdarrbn', 'xr', 'xxg', 'ozsjexejf', 'oon']) == ['n4m', 'y5i', 'k5w', 'y8n', 'xr', 'xxg', 'o7f', 'oon']\nassert solution.wordsAbbreviation(['dvqwgu', 'semeqsa', 'nrns', 'slzyhgv', 'bughcpjis', 'ju']) == ['d4u', 's5a', 'n2s', 's5v', 'b7s', 'ju']\nassert solution.wordsAbbreviation(['bxrwzhbe', 'jjbd', 'gtcgppp', 'bowbut', 'wqypc', 'l', 'brhphla', 'lkpuay', 'qu']) == ['b6e', 'j2d', 'g5p', 'b4t', 'w3c', 'l', 'b5a', 'l4y', 'qu']\nassert solution.wordsAbbreviation(['txev', 'n']) == ['t2v', 'n']\nassert solution.wordsAbbreviation(['zi', 'ubzetbeqve', 'lrfw', 'iadwrchixl', 'g', 'zteyvx']) == ['zi', 'u8e', 'l2w', 'i8l', 'g', 'z4x']\nassert solution.wordsAbbreviation(['pmnh', 'xj', 'hzxob', 'wffvqjtvw']) == ['p2h', 'xj', 'h3b', 'w7w']\nassert solution.wordsAbbreviation(['xxkr', 'tscvs', 'tpstcoo', 'bqnhcyaj', 'fy', 'ayvuburup']) == ['x2r', 't3s', 't5o', 'b6j', 'fy', 'a7p']\nassert solution.wordsAbbreviation(['tgvivfnt', 'coswvpci', 'caypozgvcr', 'mqi', 'jqccftjiw']) == ['t6t', 'c6i', 'c8r', 'mqi', 'j7w']\nassert solution.wordsAbbreviation(['rzn', 'oz']) == ['rzn', 'oz']\nassert solution.wordsAbbreviation(['ake', 'e', 'waxyzjye', 'y', 'jrhtjxcemm', 'exmrwlofq', 'fppn']) == ['ake', 'e', 'w6e', 'y', 'j8m', 'e7q', 'f2n']\nassert solution.wordsAbbreviation(['rdsjma', 'ibmkeyffi', 'zwcbli']) == ['r4a', 'i7i', 'z4i']\nassert solution.wordsAbbreviation(['xkdwjqs', 'xhwjuewix', 'a']) == ['x5s', 'x7x', 'a']\nassert solution.wordsAbbreviation(['vec']) == ['vec']\nassert solution.wordsAbbreviation(['ee', 'crrok', 'ntrxaac', 'en', 'qyczicmj', 'kbr', 'mutcqt', 'kfgypuzh', 'z']) == ['ee', 'c3k', 'n5c', 'en', 'q6j', 'kbr', 'm4t', 'k6h', 'z']\nassert solution.wordsAbbreviation(['vkvwezvbm', 'tk', 'orwuwmm', 'rimo', 'n', 'hn', 'hznj', 'j', 'bxmbl']) == ['v7m', 'tk', 'o5m', 'r2o', 'n', 'hn', 'h2j', 'j', 'b3l']\nassert solution.wordsAbbreviation(['kyfubgfav', 'yudbg', 'i']) == ['k7v', 'y3g', 'i']\nassert solution.wordsAbbreviation(['fifzxbyya', 'dexmf', 'qyvvwua', 'ilex', 'aw', 'eeaxket', 'pdrwchmuw', 'fukvia', 'gowagjkzm']) == ['f7a', 'd3f', 'q5a', 'i2x', 'aw', 'e5t', 'p7w', 'f4a', 'g7m']",
        "small_test_cases": "\nsolution = Solution()\nassert solution.wordsAbbreviation([\"like\",\"god\",\"internal\",\"me\",\"internet\",\"interval\",\"intension\",\"face\",\"intrusion\"]) == [\"l2e\",\"god\",\"internal\",\"me\",\"i6t\",\"interval\",\"inte4n\",\"f2e\",\"intr4n\"]\nassert solution.wordsAbbreviation([\"aa\",\"aaa\"]) == [\"aa\",\"aaa\"]\n",
        "algorithms": [
            "greedy",
            "sorting"
        ],
        "difficulty": "Hard"
    }
]