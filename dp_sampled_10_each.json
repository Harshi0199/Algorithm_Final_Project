[
    {
        "problem_idx": 860,
        "task_name": "Lemonade Change",
        "description": "\n\n<p>At a lemonade stand, each lemonade costs <code>5</code>. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a <code>5</code>, <code>10</code>, or <code>20</code> bill. You must provide the correct change to each customer so that the net transaction is that the customer pays <code>5</code>.</p>\n\n<p>Note that you do not have any change in hand at first.</p>\n\n<p>Given an integer array <code>bills</code> where <code>bills[i]</code> is the bill the <code>i<sup>th</sup></code> customer pays, return <code>true</code> <em>if you can provide every customer with the correct change, or</em> <code>false</code> <em>otherwise</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> bills = [5,5,5,10,20]\n<strong>Output:</strong> true\n<strong>Explanation:</strong> \nFrom the first 3 customers, we collect three 5 bills in order.\nFrom the fourth customer, we collect a 10 bill and give back a 5.\nFrom the fifth customer, we give a 10 bill and a 5 bill.\nSince all customers got correct change, we output true.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> bills = [5,5,10,10,20]\n<strong>Output:</strong> false\n<strong>Explanation:</strong> \nFrom the first two customers in order, we collect two 5 bills.\nFor the next two customers in order, we collect a 10 bill and give back a 5 bill.\nFor the last customer, we can not give the change of 15 back because we only have two 10 bills.\nSince not every customer received the correct change, the answer is false.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= bills.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>bills[i]</code> is either <code>5</code>, <code>10</code>, or <code>20</code>.</li>\n</ul>\n\n",
        "markdown_description": "\nAt a lemonade stand, each lemonade costs `5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `5`, `10`, or `20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `5`.\n\n\nNote that you do not have any change in hand at first.\n\n\nGiven an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` *if you can provide every customer with the correct change, or* `false` *otherwise*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** bills = [5,5,5,10,20]\n**Output:** true\n**Explanation:** \nFrom the first 3 customers, we collect three 5 bills in order.\nFrom the fourth customer, we collect a 10 bill and give back a 5.\nFrom the fifth customer, we give a 10 bill and a 5 bill.\nSince all customers got correct change, we output true.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** bills = [5,5,10,10,20]\n**Output:** false\n**Explanation:** \nFrom the first two customers in order, we collect two 5 bills.\nFor the next two customers in order, we collect a 10 bill and give back a 5 bill.\nFor the last customer, we can not give the change of 15 back because we only have two 10 bills.\nSince not every customer received the correct change, the answer is false.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= bills.length <= 105`\n* `bills[i]` is either `5`, `10`, or `20`.\n\n\n",
        "canonical_solution": "class Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        five = ten = 0\n        for v in bills:\n            if v == 5:\n                five += 1\n            elif v == 10:\n                ten += 1\n                five -= 1\n            else:\n                if ten:\n                    ten -= 1\n                    five -= 1\n                else:\n                    five -= 3\n            if five < 0:\n                return False\n        return True\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def lemonadeChange(self, bills: List[int]) -> bool:\n        five = ten = 0\n        for v in bills:\n            if v == 5:\n                five += 1\n            elif v == 10:\n                ten += 1\n                five -= 1\n            else:\n                if ten:\n                    ten -= 1\n                    five -= 1\n                else:\n                    five -= 3\n            if five < 0:\n                return False\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    bills = random.choices([5, 10, 20], k=random.randint(1, 100))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.lemonadeChange(bills)\n\n    return bills, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        bills, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.lemonadeChange(bills) == expected_result\n        print(f\"assert solution.lemonadeChange({bills}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.lemonadeChange({bills}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.lemonadeChange([10, 20, 20, 10, 10, 20, 5, 20, 20, 20]) == False\nassert solution.lemonadeChange([20, 20, 20, 10, 20, 20, 5, 20, 10, 20, 20, 20]) == False\nassert solution.lemonadeChange([10, 5, 5, 20, 10, 5, 5, 10, 5, 5, 10, 20, 20, 20, 10, 20, 5, 20, 20, 20, 10, 10, 5, 20, 20, 5, 20, 5, 5, 5, 5, 20, 10, 20, 5, 20, 20, 10, 5, 5, 5, 20, 5, 5, 5, 20, 10, 5, 10, 5, 20, 10, 10, 5, 20, 5, 10, 5, 20, 5, 20, 5, 5, 20, 20, 20, 5, 10, 5, 10, 5, 10, 20, 20, 10, 5, 10, 10, 10, 10, 20, 5, 5, 5, 5, 10, 10, 5, 10, 5]) == False\nassert solution.lemonadeChange([10, 10, 5, 10, 20, 10, 10, 5, 10, 5, 20, 10, 20, 5, 20, 10, 20, 20, 5, 5, 20, 10, 10, 20, 20, 5, 20, 5, 5, 10, 20, 20, 20, 5, 10, 5, 20, 20, 20, 20, 20, 10, 5, 10, 10, 10]) == False\nassert solution.lemonadeChange([5, 20, 20, 20, 5, 5, 20, 20, 5, 20, 10, 10, 20, 5, 10, 20, 10, 20, 10, 20, 10, 20, 10, 5, 20, 10, 20, 5, 5, 20, 20, 20, 10, 20, 20, 10]) == False\nassert solution.lemonadeChange([5, 10, 20, 5, 20, 20, 20, 10, 10, 10, 20, 5, 20, 5, 20, 10, 5, 10, 20, 20, 20, 5, 5, 5, 5, 5, 20, 5, 20, 10, 10, 10, 5, 5, 20, 20, 20, 10, 10, 5, 20, 20, 10, 20, 10, 5, 20, 10, 5, 20, 20, 10, 5, 5, 20, 10, 5, 10, 10, 10, 5, 5, 20, 20, 5, 5, 5, 5, 10, 20, 10, 5, 10, 10, 5, 10, 10, 5, 20, 10, 20, 20, 5, 5, 10, 5, 20, 5, 5, 5, 5, 20, 5, 20, 5]) == False\nassert solution.lemonadeChange([20, 5, 5, 20, 10, 10, 20, 5, 10, 10, 5, 20, 5, 20, 10, 5, 5, 5, 10, 20, 20, 5]) == False\nassert solution.lemonadeChange([10, 20, 5, 20, 5, 5, 5, 10, 5, 10, 20, 10, 5, 5, 10, 10, 5, 20, 5, 20, 5, 5, 10, 5, 5, 20, 5, 5, 10, 10, 20, 20, 5, 10, 10, 10, 10, 5, 20, 5, 20, 5, 20, 5, 10, 20, 5, 5, 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 10, 5, 5, 5, 20, 5, 20]) == False\nassert solution.lemonadeChange([10, 10, 10, 20, 10, 10, 10, 20, 5, 20, 10, 20, 10, 10, 5, 10, 10, 20, 10, 5, 5, 10, 20, 5, 5, 10, 20, 10, 20, 5, 10, 20, 10, 5, 20, 20, 10, 5, 20, 5, 10, 10, 5, 20, 10, 10, 20, 10, 5, 20, 10, 5, 5, 10, 5, 20, 5, 20, 5, 5, 20, 10, 20, 20, 10, 20, 10, 5, 10, 5, 10, 5, 20, 5, 10, 5, 20, 5, 5, 10, 20, 10, 5, 5, 10, 10, 10, 5, 5, 10, 20, 5, 10, 20, 5, 10, 10]) == False\nassert solution.lemonadeChange([5, 10, 20, 20, 20, 5, 10, 5, 5, 10, 10, 10, 20, 20, 10, 5, 5, 20, 20, 5, 20, 5, 20, 20, 5, 20, 20, 10, 5, 5, 10, 20, 10, 5, 5, 10, 5, 10, 10, 5, 5, 10, 5, 5, 10, 5]) == False\nassert solution.lemonadeChange([10, 5, 20, 5, 5, 5, 5, 5, 20, 5, 20, 20, 5, 5, 5, 5, 20, 20, 10, 5, 20, 10, 20, 10, 5, 20, 20, 10, 5]) == False\nassert solution.lemonadeChange([20, 10, 5, 5, 10, 20, 10, 20, 20, 10, 5, 10, 10, 5, 10, 5, 10, 5, 10, 10, 5, 5, 20, 20, 20, 10, 10, 10, 20, 10, 5, 10, 20, 10]) == False\nassert solution.lemonadeChange([20, 5, 20, 20, 5, 20, 5, 5, 10, 20, 20, 5, 10, 20, 20, 20, 20, 20, 20, 10, 10, 10, 10, 5, 5, 5, 20, 20, 20, 10, 20, 5, 5, 10, 20, 20, 20, 10, 5, 20, 20, 20, 20, 20, 5, 10, 10, 10, 5, 5, 10, 10, 20, 20, 10, 10, 10]) == False\nassert solution.lemonadeChange([20, 10, 10, 20, 10]) == False\nassert solution.lemonadeChange([20, 20, 20, 10, 10, 10, 20, 10, 5, 20, 20, 20, 20, 20, 20, 5, 20, 20, 10, 10, 20, 5, 20, 10, 5, 5, 20, 5, 5, 10, 10, 20]) == False\nassert solution.lemonadeChange([5, 10, 20, 10, 10, 10, 10, 5, 10, 20, 5, 20, 5, 20, 10, 20, 20, 20, 10, 10, 20, 20, 10, 10, 10, 10, 5, 5, 10, 5, 20, 10, 20, 10, 20, 20, 20, 5, 20, 10, 10, 10, 20, 20, 5, 5]) == False\nassert solution.lemonadeChange([10, 20, 5, 5, 10, 10, 20, 20]) == False\nassert solution.lemonadeChange([10, 10, 10, 20, 10, 5, 10, 5, 5, 20, 20, 10, 20, 20, 20, 10, 10, 5, 20, 20, 5, 20, 20, 20, 10, 5, 20, 10, 5]) == False\nassert solution.lemonadeChange([20, 5, 20, 10, 20, 5, 20, 10, 10, 5, 20, 10, 20, 10, 20, 20, 20, 20, 5, 10, 5, 5, 10, 20, 5, 20, 20, 20, 5, 10, 5, 10, 20, 5, 10, 5, 20, 10, 5, 10, 5, 10, 10, 20, 5, 10, 10, 10, 20, 20, 5, 5, 5]) == False\nassert solution.lemonadeChange([5, 20, 5, 5, 10, 20, 10, 20, 20, 20, 20, 5, 5, 20, 20, 5, 20, 20, 10, 10, 20, 20, 5, 5, 5, 5, 10, 5, 20, 5, 10, 5, 5, 10, 10, 20, 5, 5, 20, 10, 5, 20, 5, 10, 10, 10, 5, 20, 20, 20, 5, 20, 10, 5, 10, 20, 10, 5, 20, 5, 5, 5, 10, 5, 5, 20, 20, 10, 10, 20, 10, 5, 10, 10, 10, 20, 5, 20, 10, 5]) == False\nassert solution.lemonadeChange([10, 5, 5, 20, 10, 20, 20, 20, 20, 20, 5, 20, 5, 20, 10, 20, 10, 5, 5, 20, 5, 20, 20, 20, 10, 20, 20, 5, 10, 10, 20, 10, 10, 20, 5, 5, 20, 10, 5, 20, 20, 20, 10, 10, 5, 20, 10, 10, 5, 5, 5, 20, 10, 20, 20, 5, 5, 20, 5]) == False\nassert solution.lemonadeChange([20, 10, 5, 5, 5, 10, 10, 10, 10, 20, 5, 5, 10, 10, 5, 5, 20, 10, 20, 5, 10, 20, 10, 10, 20, 5, 20, 5, 20, 10, 20, 5, 5, 20, 10, 5, 5, 10, 20, 20, 5]) == False\nassert solution.lemonadeChange([20, 5, 10, 5, 5, 20, 20, 10, 10, 5, 10, 20, 20, 20, 10, 5, 5, 5, 5, 20, 5, 10, 20, 20, 5, 10, 10, 5, 20, 20, 20, 20, 5, 10, 5, 5, 20, 10, 5, 5, 10, 20, 10, 5, 10, 10, 10, 10]) == False\nassert solution.lemonadeChange([10]) == False\nassert solution.lemonadeChange([20, 20, 5, 10, 10, 20, 20, 20, 5, 20, 10, 10, 20, 5, 10, 20, 10, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 20, 20, 5, 10, 20, 10, 20, 20, 20, 5, 20, 5, 20, 20, 5, 10, 20, 10, 20, 5, 5, 10, 5, 10, 10, 20, 20, 5, 10, 10, 10, 10, 20, 10, 20, 20, 5, 10, 10, 20, 10, 5, 5, 20, 10, 10, 20, 5, 20, 5, 5, 10, 20, 20, 20, 5, 10, 20, 20, 20, 10, 10, 20, 20, 10, 5, 10, 5]) == False\nassert solution.lemonadeChange([5, 10, 5, 20, 20, 5, 10, 20, 20, 5, 5, 10, 5, 5, 20, 20, 20, 10, 5, 5, 10, 5, 20, 5, 20, 10, 20, 20, 5, 5, 5, 5, 10, 20, 10, 5, 5, 5, 10, 10, 10, 20, 10, 20, 10, 20, 20, 10, 20, 5, 20, 20, 10, 20, 20, 5, 20, 5, 10, 10, 20, 5, 5, 20]) == False\nassert solution.lemonadeChange([20, 10, 10, 5, 10, 20, 5, 20, 20, 5, 5, 5, 5, 10, 20, 20, 10, 5, 5, 5, 5, 10, 5, 10, 5, 10, 20, 20, 10, 5, 20, 20, 5, 5, 10, 10, 20, 10, 10, 10, 20]) == False\nassert solution.lemonadeChange([20, 5, 20, 20, 20, 20, 10, 10, 5, 10, 5, 5, 10, 20, 5, 20, 5, 10, 20, 5, 10, 10, 10, 10, 10, 10, 5, 5, 20, 20, 20, 5, 20, 20, 5, 10, 10, 5, 20, 10, 10, 5, 10, 10, 5, 10, 20, 5, 10, 5, 10, 10, 5, 20, 20, 10, 20, 20, 5, 20, 5, 5, 20, 10, 10, 5, 5, 5, 10, 10, 5, 10, 10, 20, 20, 10, 5, 5, 5, 20, 5, 20, 10, 5, 5, 10, 10, 20, 5, 20, 20, 10, 20, 20]) == False\nassert solution.lemonadeChange([5, 20, 10, 20, 10, 5, 20, 10, 10, 5, 10, 5, 10, 20, 5, 10, 20, 10, 10, 10, 5, 20, 5, 10, 20, 10, 10, 10, 5, 10, 10, 20, 5, 20, 20, 10, 5, 10, 10, 10, 20, 10, 20, 5, 20, 10, 20, 10, 20, 20, 10, 10, 20, 10, 5, 20, 5, 10, 20]) == False\nassert solution.lemonadeChange([20, 20, 5, 20, 5, 20, 10, 10, 20, 5, 20, 5, 20, 10, 20, 20, 20, 20, 20, 10, 10, 20, 20, 5, 10, 20, 5, 10, 10, 10, 10, 5, 20, 20, 20, 20, 10, 5, 5, 5, 20, 20, 5, 10, 5, 5, 20, 10, 5, 20, 10, 10, 5, 10, 20, 5, 5, 10, 10, 5, 5, 5, 5, 5, 20, 10, 10]) == False\nassert solution.lemonadeChange([10, 5, 20, 20, 5, 5, 5, 20, 20, 10, 10, 10, 20, 10, 10, 10, 10, 5, 20]) == False\nassert solution.lemonadeChange([5, 10, 20, 10, 5, 20, 5, 20, 5, 20]) == False\nassert solution.lemonadeChange([10, 10, 20, 20, 10, 5, 20, 5, 20, 5, 5, 20, 10, 10]) == False\nassert solution.lemonadeChange([5, 10, 5, 20, 5, 20, 5, 10, 20, 20, 20, 5, 20, 5, 5, 20, 5, 20, 5, 5, 5, 10, 5, 5, 5, 20, 20, 20, 5, 10, 5, 5, 20, 20, 10, 5, 10, 10, 10, 20, 5, 10, 20, 10, 10, 5, 10, 10, 5, 10, 20, 10, 5, 10, 10, 10, 5, 10, 10]) == False\nassert solution.lemonadeChange([20, 5, 20, 20, 10, 20, 10, 20, 5, 20, 5, 10, 10, 10, 20, 10, 5, 5, 10]) == False\nassert solution.lemonadeChange([10, 20, 20, 20, 20, 10, 10, 20, 5, 10, 5, 10, 5, 5, 20, 5, 20, 10, 5, 10, 20, 10, 10, 5, 20, 20, 20, 10, 10, 20, 20, 5, 10, 10, 20, 10, 10, 20, 5, 20, 10, 10, 20, 5, 10, 20, 20, 5, 20, 10, 5, 5, 10, 10, 10, 10, 20, 10, 5, 20, 20, 5, 5, 10, 10, 10, 10, 10, 5, 5, 20, 20, 5, 10, 10, 20, 5, 5, 20, 20, 20, 5, 5, 10, 20, 10, 10, 20, 5, 10, 5, 5, 10, 10, 20, 20, 10, 10, 10, 20]) == False\nassert solution.lemonadeChange([5, 5, 10, 5, 5, 20, 5, 20, 20, 20, 20, 10, 20, 5, 5, 10, 10, 20, 10, 10, 5, 20, 5, 10, 20, 5, 10, 20, 20, 10, 10, 20, 5, 20, 5, 5, 5, 10, 20, 10, 10, 5, 10, 10, 10, 20, 10, 20, 10, 10, 20, 10, 20]) == False\nassert solution.lemonadeChange([20, 5, 5, 20, 10, 5, 20, 5, 20, 20, 20, 20, 10, 5, 20, 20, 20, 20, 5, 5, 5, 5, 20, 10, 5, 5, 5, 10, 20, 10, 20, 10, 5, 10, 20, 20, 20, 10, 5, 20, 10, 10, 10, 10, 10, 20, 20, 20, 5, 5, 5, 20, 5, 20, 10, 20, 20, 5, 20, 20, 10, 5, 10, 5, 5, 5, 10, 20, 10, 5, 10, 20, 20, 10, 5, 20, 20, 20, 20, 5, 5, 20]) == False\nassert solution.lemonadeChange([20, 5, 20, 10, 10, 10, 20, 5, 5, 10, 5, 10, 10, 20, 5, 10, 10, 20, 10, 5, 10, 10, 20, 20, 10, 10, 10, 20, 20, 20, 5, 20, 20, 10, 5, 20, 20, 10, 20, 10, 10, 10, 10, 5, 10, 5, 5, 5, 5, 20, 10, 10, 10, 5, 20, 20, 20, 20, 20]) == False\nassert solution.lemonadeChange([5, 5, 5, 10, 5, 20, 5, 10, 5, 5, 20, 20, 10, 5, 5, 10, 5, 5, 20, 5, 5, 20, 10, 20, 5, 10, 20, 20, 20, 10, 10, 20, 10, 10, 20, 10, 20, 10, 5, 20, 20, 5, 10, 5, 5, 10, 10, 20, 10, 10, 10, 10, 20, 20, 5, 10, 5, 10, 10, 10, 10, 10, 20, 20, 20, 20, 10, 5, 10, 5, 10, 20]) == False\nassert solution.lemonadeChange([20, 10, 10, 20, 10, 5, 20, 10, 10, 10, 10, 20, 20, 20, 10, 20, 10, 20, 5, 5, 10, 5, 10, 20, 10, 10, 20, 10, 10, 10, 5, 20, 20, 5, 10, 20, 5, 5, 20, 10, 5, 10, 5, 5, 20, 5, 5, 10, 20, 5, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 5, 20, 20, 5, 5, 10, 5, 20, 5, 20, 10, 20]) == False\nassert solution.lemonadeChange([5, 5, 10, 10, 10, 20, 10, 10, 10, 20, 5, 5, 20, 10, 5, 10, 5, 10, 20, 10, 5, 5, 10, 5, 20, 5, 5, 20, 5, 5, 20, 20, 20, 20, 5, 5, 20, 10, 5, 20, 20, 20, 10, 20, 20, 20, 5, 20, 10, 5, 5, 5, 10, 20, 10, 10, 10, 20, 5, 5, 5, 20, 5, 10, 20, 20, 20, 5, 10, 10, 20, 10, 20, 20, 10, 20, 20, 10, 5, 10, 5, 10, 20, 5, 10, 10, 20, 20, 10]) == False\nassert solution.lemonadeChange([5, 20, 10, 5, 20, 20, 5, 10, 5, 10, 5, 20, 5, 20, 20, 20, 5, 5, 10, 10, 5, 20, 20, 20, 5, 5]) == False\nassert solution.lemonadeChange([10, 20, 10, 10, 5, 20, 10, 10, 20, 10, 5, 20, 5, 20, 10, 10]) == False\nassert solution.lemonadeChange([20, 5, 5, 20, 20, 10, 5, 10, 10, 5, 10, 20, 10, 20, 5, 10, 10, 10, 20, 20, 5, 20, 20, 10, 10, 5, 10, 5, 5, 20, 20, 5, 10, 20, 20, 20, 20, 5, 5, 5, 5, 10, 20, 5, 20, 10, 20, 20, 5, 10, 20, 5]) == False\nassert solution.lemonadeChange([10, 10, 10, 5, 10, 5, 20, 20, 5, 20, 5, 5, 20, 5, 10, 5, 5, 20, 10, 10, 5, 20, 20, 10, 5, 20, 5, 10, 20, 5, 10, 5, 10, 10, 5, 5, 20, 10, 20, 5, 5, 20, 20, 20, 10, 20, 5, 20, 20, 10, 10, 5, 20, 10]) == False\nassert solution.lemonadeChange([20, 20, 10, 20, 10, 20, 5, 5, 10, 10, 20, 5, 5, 5, 5, 20, 20, 5, 5, 10, 5, 5, 20, 10, 10, 10, 10, 20, 10, 20, 20, 20, 20, 10, 10, 10, 5, 10, 5, 5, 10, 5, 10, 20, 5, 20, 5, 5, 5, 10, 5, 20, 5, 10, 5, 5, 5, 20, 5, 10]) == False\nassert solution.lemonadeChange([5, 20, 20, 20, 5, 5, 5, 20, 5, 5, 5, 10, 20, 20, 20, 10, 5, 10, 20, 10, 10, 20, 10, 20, 20, 20, 5, 10, 5, 20, 10, 10, 10, 20, 5, 10, 20, 10, 5, 10, 20, 20, 5, 10, 10, 20, 5, 20, 5, 20, 10, 5, 5, 10, 20, 10, 20, 20, 20, 10]) == False\nassert solution.lemonadeChange([5, 20, 5, 10, 10, 5, 20, 20, 20, 10, 20, 20, 5, 10, 10, 5, 10, 20, 20, 20, 10, 5, 10, 10, 20, 5, 10, 20, 5, 10, 5, 10, 20, 10, 5, 5]) == False\nassert solution.lemonadeChange([10, 20, 10, 5, 10, 10, 5, 20, 5, 10, 10, 10, 20, 20, 5, 5, 10, 20, 10, 5, 10, 10, 10, 20, 10, 5, 20, 10, 5, 5, 10, 5, 20, 10, 20, 20, 5, 5, 5, 20]) == False\nassert solution.lemonadeChange([20, 10, 5, 10, 10, 20, 20, 10, 10, 10, 5, 10, 5, 20, 10, 5, 10, 10, 10, 5, 20, 10, 5]) == False\nassert solution.lemonadeChange([5, 20, 5, 5, 5, 20, 10, 20, 20, 10, 10, 10, 20, 5, 5, 20, 20, 5, 5, 5, 10, 10, 20, 5, 10, 10, 20, 10, 10, 20, 20, 10, 10, 10, 5, 20, 10, 5, 10, 5, 5, 10, 20, 5, 20, 10, 10, 5, 5, 20, 5, 5, 10, 10, 10, 5, 10, 10, 20, 10, 10, 5, 5, 5, 10, 10, 20, 20, 20, 10, 10, 20, 10, 5, 20, 5, 20, 20, 20, 5, 10, 10, 5, 5, 5, 5, 10, 10, 20, 5, 20, 5, 20, 10, 20, 5, 5, 10, 5]) == False\nassert solution.lemonadeChange([20, 10, 10, 20, 20, 20, 10, 5, 20, 10, 20, 10, 10, 10, 10, 5, 20, 5, 5, 10, 10, 5, 5, 10, 5, 10, 20, 20, 10, 20, 10, 20, 5, 20, 20, 20, 10, 20, 20, 5, 20, 10, 5, 20, 20, 10, 10, 20, 10, 20, 20, 20, 10, 5, 20, 10, 5, 10, 10, 10, 20, 10, 20, 20, 5, 5, 20, 5, 5, 20, 5]) == False\nassert solution.lemonadeChange([20, 20, 5, 20, 10, 10, 5, 5, 5, 5, 20, 20, 20, 10, 20, 20, 5, 5, 20, 5, 5, 5, 5, 10, 10, 10, 5, 5, 20, 5, 5, 5, 5, 20, 20, 5, 10, 20, 10, 20, 5, 20, 20, 20, 5, 5, 10, 20, 10, 5, 10, 10, 10, 20, 10, 10, 5, 20, 20, 20]) == False\nassert solution.lemonadeChange([5, 5, 10, 20, 20, 10, 5, 10, 10, 10, 10, 5, 5, 20, 5, 5, 5, 10, 20, 10, 5, 20, 5, 5, 10, 10, 20, 5, 10, 10, 10, 10, 20, 10, 10, 20, 10, 10, 20, 5, 5, 10, 10, 10, 20, 10, 5, 20, 20, 20, 5, 20, 5, 20, 20, 10, 5, 10]) == False\nassert solution.lemonadeChange([5, 5, 5, 20, 20, 5, 20, 10, 5, 5, 20, 5, 5, 10, 20, 20, 20, 5, 20, 20, 10, 5, 20, 10, 20, 5, 5, 10, 5, 10, 10, 5, 20, 5, 10, 20, 10, 20, 10, 10, 10, 5, 10, 5, 20, 5, 5, 20, 5, 10, 5, 5]) == False\nassert solution.lemonadeChange([5, 20, 20, 10, 5, 5, 10, 5, 10, 20, 5, 10, 10, 20, 20, 20, 20, 20, 5, 10, 5, 10, 10, 5, 5, 20, 10, 5, 5, 10, 10, 5, 10, 20, 5, 10]) == False\nassert solution.lemonadeChange([10, 20, 20, 20, 5, 20, 20, 20, 20, 20, 20, 20, 5, 20, 5, 10, 10, 5, 5, 5, 5, 20, 5, 5, 10, 10, 5, 5, 5, 20, 20, 10, 20, 20, 10, 10, 5, 10, 5, 20, 20, 5, 20, 20, 10, 5, 5, 5]) == False\nassert solution.lemonadeChange([5, 10, 5, 20, 5, 5, 10, 10, 5, 10, 20, 10, 10, 10, 5, 10, 5, 10, 20, 20, 5, 20, 10, 5, 20, 10, 20, 10, 10, 20, 5, 5, 10, 5, 10, 5, 20, 5, 5, 10, 20, 5, 10, 20, 5, 5, 5, 10, 10, 10]) == False\nassert solution.lemonadeChange([5, 5, 20, 20, 5, 20, 10, 5, 5, 20, 10, 5, 20, 5, 20, 5, 10]) == False\nassert solution.lemonadeChange([20, 10, 5, 5, 20, 5, 10, 10, 20, 5, 10, 10, 10, 5, 10, 5, 20, 10, 20, 20, 5, 5, 5, 5, 20, 10, 5, 5, 20, 20, 20, 20, 20, 5, 5, 20, 20, 10, 20, 5, 10, 20, 5, 20, 10, 5, 10, 10, 5, 10, 20, 10, 5, 5, 20, 10, 10, 5, 20, 20, 10, 20, 5, 20, 20, 20, 5]) == False\nassert solution.lemonadeChange([10, 5, 5, 10, 20, 20, 10, 5, 5, 5, 10, 10, 10, 10, 20, 10, 10, 10, 5, 5, 10, 5, 10, 10, 10, 5, 10, 20, 10, 10, 5, 20, 5, 5, 5, 20, 5, 20, 20, 10, 10, 5, 10, 20, 20, 5, 20, 5, 20, 20, 10, 10, 10, 5, 10, 20, 5, 10, 20, 20, 20, 10, 20, 10]) == False\nassert solution.lemonadeChange([20, 10, 20, 20, 20, 5, 5, 5, 5, 10, 5, 10, 20, 5, 5, 5, 10, 5, 5, 5, 5, 20, 20, 5, 20, 10, 10, 5, 10, 5, 20, 5, 5, 10, 10, 20, 20]) == False\nassert solution.lemonadeChange([5, 10, 10, 20, 5, 5, 10, 10, 20, 5, 20, 10, 10, 10, 5, 5, 10, 20, 10, 5, 20, 20, 10, 20, 5, 5, 5, 5, 20, 20, 5, 20, 10, 20, 10, 10, 5, 5, 20, 20, 20, 10, 10, 5, 20, 20, 5, 10, 10, 10, 5, 20, 10, 20, 5, 5, 5, 5, 5, 10, 10, 5, 5, 20]) == False\nassert solution.lemonadeChange([20, 10, 20, 20, 5, 20, 10, 10, 10, 10, 20, 10, 10, 10, 5, 5, 10, 5, 20, 5, 10, 20, 10, 10, 20, 10, 20, 10, 5, 20, 5, 20, 10, 10]) == False\nassert solution.lemonadeChange([20, 5, 20, 20, 10, 5, 5, 5, 10, 20, 5, 20, 10, 20, 5, 5, 5, 10, 20, 5, 10, 5, 10, 5, 5, 5, 5, 10, 10, 5, 20, 20, 5, 10, 10, 5, 10, 5, 20, 5, 5, 10, 10, 20, 5, 10, 5, 10, 20, 10, 10, 10, 5, 10, 5, 20, 10, 5, 20, 5, 5, 20]) == False\nassert solution.lemonadeChange([10, 10, 5, 5, 5, 5, 10, 5]) == False\nassert solution.lemonadeChange([10, 20, 20, 20, 5, 20, 10, 10, 5, 5, 5, 10, 5, 5, 10, 10, 10, 10, 20, 5, 20, 5, 5, 10, 5, 5, 5, 20, 10, 5, 10, 10, 5, 5, 5, 20]) == False\nassert solution.lemonadeChange([5, 5, 5, 5, 10, 5, 5, 10, 20, 10, 10, 10, 20, 20, 5, 20, 10, 5, 5, 5, 20, 5, 5, 5, 10, 20, 5, 20, 20, 5, 10, 20, 20, 10, 10, 10, 10, 5, 10, 5, 10, 10, 20, 5, 10, 20, 10, 10, 5, 5, 10, 10, 10]) == False\nassert solution.lemonadeChange([10, 5, 10, 5, 10, 10, 10, 5, 5, 5, 20, 5, 10, 20, 5, 5, 10, 20, 20, 10, 20, 10, 5, 10, 20, 5, 5, 10, 10, 20, 10, 5, 5, 10, 20, 10, 10, 5, 10]) == False\nassert solution.lemonadeChange([10, 5, 5, 5, 10, 5, 10, 20, 20, 10, 5, 10, 10, 20, 5, 20, 5, 5, 20, 10, 5, 20, 10, 5, 5, 5, 10, 20, 5, 5, 5, 20, 10, 20, 5]) == False\nassert solution.lemonadeChange([5, 5, 10, 5, 10, 10, 10, 5, 20, 5]) == False\nassert solution.lemonadeChange([20, 10, 10, 5, 10, 20, 5, 10, 5, 10, 10, 20, 5, 10, 5, 10, 5, 10, 20, 20, 20, 10, 5, 5, 20, 5, 10, 5, 10, 10, 10, 20, 5, 20, 10, 5, 5, 10, 10, 20, 10, 5, 20, 10, 10, 10, 5, 5, 5, 10, 10, 10, 20, 5, 20, 20, 5, 5, 5, 20, 20, 5, 20, 10, 20, 10, 5, 10, 20, 5, 10, 20, 20, 10, 20, 5, 10, 5, 20, 20, 10, 10]) == False\nassert solution.lemonadeChange([5, 5, 20, 10, 10, 10, 20, 20, 10, 20, 5, 10, 10, 5, 5, 5, 5, 5, 20, 20, 5, 20, 20, 5, 20, 20, 20, 10, 20, 5, 10, 10, 10, 5, 20, 5, 20, 5, 5, 20, 20, 10, 10, 10, 20, 10, 5, 5, 20, 5, 10, 10, 20, 20, 5, 5, 10, 20, 5, 5, 20, 10, 20, 5, 10, 20, 5, 10]) == False\nassert solution.lemonadeChange([20, 5, 5, 20, 10, 10, 5, 20, 5, 20, 10, 20, 10, 10, 5, 10, 10, 5, 10, 20, 10, 10, 20, 5, 5, 20, 20, 10, 20, 10, 5, 5, 5, 20, 20, 5, 20, 10, 20, 5, 5, 20, 5, 20, 20, 20, 5, 20, 5, 5, 5, 10, 10, 20, 20, 10, 20, 5, 20, 10, 5, 5, 5, 10, 10, 5, 10, 20, 20, 10, 20, 20, 10, 10, 5, 5, 10, 5, 20, 5, 20, 20, 5, 5, 10, 20, 20, 10, 20, 10, 10]) == False\nassert solution.lemonadeChange([10, 10, 10, 5]) == False\nassert solution.lemonadeChange([10, 10, 10, 10, 5, 10, 20, 20, 10, 20, 10, 10, 5, 5, 5, 5, 10, 10, 5, 20, 20, 20, 20, 20, 5, 20, 20, 5, 5, 20, 20, 20, 5, 10, 20, 20, 10, 5, 10, 10, 20, 10, 5, 10, 5, 10, 5, 5, 5, 5, 10, 5, 5, 20, 10, 10, 10, 20, 5, 20, 5, 5, 5, 10, 20, 10, 5, 10, 10, 10, 10, 5, 20, 10, 5, 5, 10, 10, 5, 5, 20, 10, 5, 10, 20, 20, 10, 10, 10, 10, 20, 10, 20, 10, 5, 10, 10]) == False\nassert solution.lemonadeChange([10, 10, 20, 20, 20, 10, 20]) == False\nassert solution.lemonadeChange([20, 20, 20, 5, 20, 10, 5, 10, 20, 10, 10, 20, 5, 5, 10, 10, 5, 20, 20, 5, 5, 20, 20, 10, 5, 10, 20, 5, 10, 20]) == False\nassert solution.lemonadeChange([20, 10, 10, 20, 10, 5, 10, 5, 10, 10, 20, 5, 10, 10, 5, 5, 20, 10, 5, 5, 20, 20, 20, 20, 20, 10, 20, 20, 20, 10, 20, 5, 20, 5, 10, 5, 20, 10, 10, 20, 5, 20, 10, 5, 20, 10, 20, 10, 10, 20, 20, 5, 5, 5, 5, 20, 10, 20, 5, 20, 5, 10, 20, 20, 20, 5, 5, 20, 5, 10, 20, 20, 10, 10, 5, 20, 5, 20, 20, 20, 10, 10, 10, 5, 10, 5, 10, 10, 5, 20, 5, 10, 20, 20, 20, 10, 20, 20, 20]) == False\nassert solution.lemonadeChange([5, 10, 10, 10, 5, 5, 20, 20, 5, 10, 10, 5, 20, 10, 5, 5, 10, 20, 5, 5, 20]) == False\nassert solution.lemonadeChange([20, 20, 20, 5, 20, 5, 5, 20, 5, 5, 10, 10, 5, 20, 10, 20, 5, 5, 5, 20, 5, 5, 5, 10, 10, 20, 20, 10, 10, 10, 20, 20, 20, 10, 20, 10, 5, 10, 10, 10, 5, 10, 10, 10, 5, 5, 5, 5, 5, 10, 20, 20, 20, 10, 5, 10, 5, 20, 20, 5, 5, 5, 20, 5, 20, 5, 5, 5, 20, 5, 5, 10, 20, 10, 10, 5]) == False\nassert solution.lemonadeChange([5, 5, 10, 5, 20, 5, 10, 20, 20, 10, 5, 5, 20, 20, 10, 5, 20, 20, 10, 10]) == False\nassert solution.lemonadeChange([10, 5, 20, 5, 20, 20, 10, 5, 20, 10, 10, 20, 20, 20, 20, 5, 10, 20, 10, 10, 20, 20, 10, 10, 10, 5, 5, 10, 5, 10, 10, 10, 20, 5, 5, 20, 5, 10, 10, 20, 20, 10, 20, 20, 5, 5, 10, 20, 10, 20, 5, 20, 20, 20]) == False\nassert solution.lemonadeChange([10, 10, 5, 20, 10, 5, 20, 5, 5, 10, 10, 5, 5, 20, 20, 10, 5, 5, 20, 5, 20, 5, 5, 5, 5, 20, 20, 10, 10, 20, 10, 20, 10, 5, 20, 10, 5, 10, 20, 10, 20, 10, 5, 5]) == False\nassert solution.lemonadeChange([20, 20, 20, 10, 20, 20, 10, 20, 5, 10, 10, 10, 10, 20, 5, 10, 10, 5, 10, 20, 5, 5, 5, 10, 20, 10, 20, 5, 10, 20, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10]) == False\nassert solution.lemonadeChange([10, 10, 20, 10, 20, 5, 10, 10, 5, 20, 20]) == False\nassert solution.lemonadeChange([10, 10, 5, 5, 5, 10, 5, 20, 5, 20, 5, 10, 10, 20, 20, 10, 20, 10, 10, 20, 10, 5, 10, 20, 10, 20, 10, 20, 20, 5, 20, 10, 10, 20, 20, 10, 20, 5, 20, 10, 5, 10, 10, 20, 10, 10, 20, 5]) == False\nassert solution.lemonadeChange([5, 10, 5, 10, 20, 10, 5, 20, 5, 20, 20, 10, 20, 20, 5, 20, 5, 20, 5, 20, 20, 20, 10, 10, 20, 5, 20, 20, 5, 5, 20, 10, 10, 20, 20, 20, 5, 5, 10, 10, 20, 20, 10, 5, 20, 5, 5, 10, 20, 10, 10, 5, 20, 10, 5, 10, 20, 10, 10, 5, 20, 10, 10, 10, 10, 20, 20, 20, 10, 5, 20, 10, 5, 20, 5, 5, 5]) == False\nassert solution.lemonadeChange([5, 5, 10, 10, 5, 5, 5, 20, 10, 5, 10, 20, 10, 20, 5]) == False\nassert solution.lemonadeChange([20, 10, 20, 20, 10, 10, 5, 5, 5, 10]) == False\nassert solution.lemonadeChange([5, 5, 20, 5, 10, 20, 20, 5, 5, 20, 20, 20, 20, 10, 10, 5, 10, 20, 20, 20, 20, 20, 10, 20, 5, 5, 20, 10, 5, 10, 5, 10, 5, 20, 5, 5, 20, 10, 10, 20, 5, 20, 10, 5, 5, 10, 10, 20, 5, 5, 5, 10, 10, 20, 10, 5, 10, 10, 20, 20, 20, 10]) == False\nassert solution.lemonadeChange([20, 5, 5, 10, 20, 5, 5, 20, 20, 10, 20, 10, 5, 20, 20, 20, 10, 10, 10, 5, 10, 10, 5, 10, 5, 5, 10, 5, 20, 5, 20, 20, 20, 10, 20, 10, 5, 5, 10, 20, 10, 5, 20, 20, 20, 10, 20, 20, 5, 5, 5, 10, 10, 5, 20, 5, 10, 5, 10, 10, 5, 10, 20, 20, 10, 5, 20, 5, 20, 5, 5, 10, 10, 5, 20, 20, 10, 5, 10]) == False\nassert solution.lemonadeChange([5, 10, 10, 10, 10, 5, 20, 5, 20, 5, 10, 20, 20]) == False\nassert solution.lemonadeChange([20, 5, 5, 20, 20, 10, 10, 20, 20, 20, 20, 5, 10, 5, 10, 10, 20, 5, 10, 20, 5, 5, 5, 5, 20, 10, 20, 20]) == False\nassert solution.lemonadeChange([20, 20, 10, 5, 10, 5, 20, 5, 10, 20, 5, 20, 20, 10, 10, 10, 10, 20, 20, 20, 5, 10, 5, 20, 10, 5, 20, 20, 10, 20, 10, 5, 5, 20, 10, 20, 10, 10, 20]) == False\nassert solution.lemonadeChange([5, 20, 10, 5, 20, 10, 10, 10, 5, 10, 5, 5, 5, 10, 5, 5, 10, 5, 10, 20, 10, 10, 5, 10, 20, 20, 5, 5, 5, 10, 20, 10, 5, 5, 20, 5, 5, 20, 10, 5, 10, 20, 10, 20, 10, 10, 10, 5, 20, 5, 5, 5, 20, 20, 10, 5, 5, 20, 5, 5, 5, 10, 5, 10, 5, 5, 5, 5, 5, 10, 20, 20, 20, 5, 20, 20, 10, 20, 20, 10, 10, 20, 10, 10, 20, 20, 10, 5, 20, 20, 10, 10]) == False\nassert solution.lemonadeChange([20, 5, 20, 10, 10, 5, 20, 20, 10, 5, 5, 5, 10, 10, 10, 5, 20, 20, 10, 10, 10, 10, 10, 20, 20, 5, 20, 10, 10, 10]) == False\nassert solution.lemonadeChange([10, 10, 10, 20, 5, 20, 10, 20, 20, 20, 20, 20, 20, 10, 5, 20, 10, 10, 5, 5, 20, 5, 20, 5, 10, 10, 5, 5, 5, 20]) == False\nassert solution.lemonadeChange([5, 20, 10, 10, 5, 5, 20, 10, 10, 10, 20, 5, 5, 10, 5, 20, 5, 5, 5, 20, 5, 10, 5, 5, 20, 5, 10, 10, 10, 10, 10, 5, 10, 10, 20, 20, 10]) == False",
        "small_test_cases": "\nsolution = Solution()\nassert solution.lemonadeChange([5,5,5,10,20]) == True\nassert solution.lemonadeChange([5,5,10,10,20]) == False\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2224,
        "task_name": "Minimum Number of Operations to Convert Time",
        "description": "\n\n<p>You are given two strings <code>current</code> and <code>correct</code> representing two <strong>24-hour times</strong>.</p>\n\n<p>24-hour times are formatted as <code>&quot;HH:MM&quot;</code>, where <code>HH</code> is between <code>00</code> and <code>23</code>, and <code>MM</code> is between <code>00</code> and <code>59</code>. The earliest 24-hour time is <code>00:00</code>, and the latest is <code>23:59</code>.</p>\n\n<p>In one operation you can increase the time <code>current</code> by <code>1</code>, <code>5</code>, <code>15</code>, or <code>60</code> minutes. You can perform this operation <strong>any</strong> number of times.</p>\n\n<p>Return <em>the <strong>minimum number of operations</strong> needed to convert </em><code>current</code><em> to </em><code>correct</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> current = &quot;02:30&quot;, correct = &quot;04:35&quot;\n<strong>Output:</strong> 3\n<strong>Explanation:\n</strong>We can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes &quot;03:30&quot;.\n- Add 60 minutes to current. current becomes &quot;04:30&quot;.\n- Add 5 minutes to current. current becomes &quot;04:35&quot;.\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> current = &quot;11:00&quot;, correct = &quot;11:01&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> We only have to add one minute to current, so the minimum number of operations needed is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>current</code> and <code>correct</code> are in the format <code>&quot;HH:MM&quot;</code></li>\n\t<li><code>current &lt;= correct</code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given two strings `current` and `correct` representing two **24-hour times**.\n\n\n24-hour times are formatted as `\"HH:MM\"`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.\n\n\nIn one operation you can increase the time `current` by `1`, `5`, `15`, or `60` minutes. You can perform this operation **any** number of times.\n\n\nReturn *the **minimum number of operations** needed to convert* `current` *to* `correct`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** current = \"02:30\", correct = \"04:35\"\n**Output:** 3\n**Explanation:**We can convert current to correct in 3 operations as follows:\n- Add 60 minutes to current. current becomes \"03:30\".\n- Add 60 minutes to current. current becomes \"04:30\".\n- Add 5 minutes to current. current becomes \"04:35\".\nIt can be proven that it is not possible to convert current to correct in fewer than 3 operations.\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** current = \"11:00\", correct = \"11:01\"\n**Output:** 1\n**Explanation:** We only have to add one minute to current, so the minimum number of operations needed is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `current` and `correct` are in the format `\"HH:MM\"`\n* `current <= correct`\n\n\n",
        "canonical_solution": "class Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        a = int(current[:2]) * 60 + int(current[3:])\n        b = int(correct[:2]) * 60 + int(correct[3:])\n        ans, d = 0, b - a\n        for i in [60, 15, 5, 1]:\n            ans += d // i\n            d %= i\n        return ans\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def convertTime(self, current: str, correct: str) -> int:\n        a = int(current[:2]) * 60 + int(current[3:])\n        b = int(correct[:2]) * 60 + int(correct[3:])\n        ans, d = 0, b - a\n        for i in [60, 15, 5, 1]:\n            ans += d // i\n            d %= i\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    test_case_generator_results = []\n    for i in range(100):\n\n        current_hours = random.randint(0, 23)\n        current_minutes = random.randint(0, 59)\n        current = f\"{current_hours:02d}:{current_minutes:02d}\"\n\n        correct_hours = random.randint(current_hours, 23)\n        correct_minutes = random.randint(current_minutes, 59)\n        correct = f\"{correct_hours:02d}:{correct_minutes:02d}\"\n\n        expected_result = solution.convertTime(current, correct)\n\n        test_case_generator_results.append(f\"assert solution.convertTime('{current}', '{correct}') == {expected_result}\")\n\n    return test_case_generator_results\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = generate_test_case()\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n    print(test_case_generator_results)\n",
        "test_case": "assert solution.convertTime('13:45', '22:45') == 9\nassert solution.convertTime('12:11', '21:27') == 11\nassert solution.convertTime('15:40', '22:47') == 10\nassert solution.convertTime('15:29', '20:33') == 9\nassert solution.convertTime('09:40', '09:55') == 1\nassert solution.convertTime('15:48', '15:57') == 5\nassert solution.convertTime('06:40', '18:52') == 16\nassert solution.convertTime('07:28', '12:54') == 9\nassert solution.convertTime('14:46', '20:49') == 9\nassert solution.convertTime('20:57', '23:57') == 3\nassert solution.convertTime('12:33', '19:39') == 9\nassert solution.convertTime('18:55', '23:55') == 5\nassert solution.convertTime('21:11', '22:43') == 5\nassert solution.convertTime('21:22', '21:56') == 6\nassert solution.convertTime('13:09', '23:26') == 13\nassert solution.convertTime('00:43', '14:43') == 14\nassert solution.convertTime('00:33', '23:48') == 24\nassert solution.convertTime('03:04', '12:18') == 15\nassert solution.convertTime('16:21', '21:38') == 8\nassert solution.convertTime('13:49', '17:54') == 5\nassert solution.convertTime('12:40', '16:59') == 9\nassert solution.convertTime('11:01', '14:37') == 7\nassert solution.convertTime('09:57', '22:57') == 13\nassert solution.convertTime('19:43', '20:48') == 2\nassert solution.convertTime('21:35', '21:53') == 4\nassert solution.convertTime('09:05', '12:24') == 8\nassert solution.convertTime('10:22', '20:25') == 13\nassert solution.convertTime('03:29', '05:40') == 5\nassert solution.convertTime('12:57', '18:59') == 8\nassert solution.convertTime('23:46', '23:47') == 1\nassert solution.convertTime('12:54', '20:57') == 11\nassert solution.convertTime('12:41', '21:43') == 11\nassert solution.convertTime('15:52', '16:57') == 2\nassert solution.convertTime('05:04', '21:09') == 17\nassert solution.convertTime('02:40', '10:48') == 12\nassert solution.convertTime('13:27', '18:59') == 9\nassert solution.convertTime('16:15', '21:32') == 8\nassert solution.convertTime('19:11', '22:47') == 7\nassert solution.convertTime('15:58', '20:59') == 6\nassert solution.convertTime('03:58', '13:58') == 10\nassert solution.convertTime('07:25', '20:42') == 16\nassert solution.convertTime('06:42', '12:56') == 12\nassert solution.convertTime('22:49', '23:49') == 1\nassert solution.convertTime('11:49', '14:55') == 5\nassert solution.convertTime('20:59', '22:59') == 2\nassert solution.convertTime('03:30', '16:37') == 16\nassert solution.convertTime('03:12', '12:43') == 12\nassert solution.convertTime('19:15', '20:36') == 4\nassert solution.convertTime('23:17', '23:53') == 4\nassert solution.convertTime('22:50', '23:56') == 3\nassert solution.convertTime('06:14', '20:55') == 19\nassert solution.convertTime('00:06', '14:57') == 19\nassert solution.convertTime('10:26', '16:28') == 8\nassert solution.convertTime('15:12', '21:41') == 13\nassert solution.convertTime('23:35', '23:35') == 0\nassert solution.convertTime('12:35', '15:36') == 4\nassert solution.convertTime('09:57', '21:57') == 12\nassert solution.convertTime('22:20', '22:55') == 3\nassert solution.convertTime('13:55', '13:56') == 1\nassert solution.convertTime('14:53', '16:57') == 6\nassert solution.convertTime('23:32', '23:32') == 0\nassert solution.convertTime('20:27', '20:32') == 1\nassert solution.convertTime('09:54', '19:59') == 11\nassert solution.convertTime('06:36', '18:45') == 17\nassert solution.convertTime('13:11', '16:34') == 8\nassert solution.convertTime('19:45', '19:46') == 1\nassert solution.convertTime('08:26', '11:57') == 6\nassert solution.convertTime('23:53', '23:58') == 1\nassert solution.convertTime('01:58', '11:58') == 10\nassert solution.convertTime('11:59', '13:59') == 2\nassert solution.convertTime('20:34', '22:44') == 4\nassert solution.convertTime('23:49', '23:55') == 2\nassert solution.convertTime('03:31', '06:52') == 6\nassert solution.convertTime('02:54', '22:58') == 24\nassert solution.convertTime('06:06', '06:33') == 5\nassert solution.convertTime('20:02', '20:12') == 2\nassert solution.convertTime('13:41', '15:44') == 5\nassert solution.convertTime('11:05', '17:49') == 14\nassert solution.convertTime('16:39', '20:40') == 5\nassert solution.convertTime('16:34', '21:37') == 8\nassert solution.convertTime('14:58', '16:58') == 2\nassert solution.convertTime('17:53', '20:58') == 4\nassert solution.convertTime('12:37', '16:51') == 10\nassert solution.convertTime('01:53', '18:54') == 18\nassert solution.convertTime('04:13', '04:57') == 8\nassert solution.convertTime('10:05', '21:41') == 15\nassert solution.convertTime('19:13', '20:57') == 9\nassert solution.convertTime('22:17', '23:58') == 6\nassert solution.convertTime('15:56', '21:56') == 6\nassert solution.convertTime('02:08', '08:23') == 7\nassert solution.convertTime('18:32', '21:51') == 8\nassert solution.convertTime('03:15', '12:16') == 10\nassert solution.convertTime('13:34', '14:39') == 2\nassert solution.convertTime('14:58', '15:58') == 1\nassert solution.convertTime('14:17', '16:29') == 6\nassert solution.convertTime('12:05', '19:25') == 9\nassert solution.convertTime('20:22', '22:48') == 6\nassert solution.convertTime('20:07', '23:34') == 8\nassert solution.convertTime('14:54', '23:54') == 9\nassert solution.convertTime('00:29', '07:46') == 10",
        "small_test_cases": "\nsolution = Solution()\nassert solution.convertTime(\"02:30\", \"04:35\") == 3\nassert solution.convertTime(\"11:00\", \"11:01\") == 1\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2566,
        "task_name": "Maximum Difference by Remapping a Digit",
        "description": "\n\n<p>You are given an integer <code>num</code>. You know that Danny Mittal will sneakily <strong>remap</strong> one of the <code>10</code> possible digits (<code>0</code> to <code>9</code>) to another digit.</p>\n\n<p>Return <em>the difference between the maximum and minimum</em><em>&nbsp;values Danny can make by remapping&nbsp;<strong>exactly</strong> <strong>one</strong> digit</em><em> in </em><code>num</code>.</p>\n\n<p><strong>Notes:</strong></p>\n\n<ul>\n\t<li>When Danny remaps a digit <font face=\"monospace\">d1</font>&nbsp;to another digit <font face=\"monospace\">d2</font>, Danny replaces all occurrences of <code>d1</code>&nbsp;in <code>num</code>&nbsp;with <code>d2</code>.</li>\n\t<li>Danny can remap a digit to itself, in which case <code>num</code>&nbsp;does not change.</li>\n\t<li>Danny can remap different digits for obtaining minimum and maximum values respectively.</li>\n\t<li>The resulting number after remapping can contain leading zeroes.</li>\n\t<li>We mentioned &quot;Danny Mittal&quot; to congratulate him on being in the top 10 in Weekly Contest 326.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 11891\n<strong>Output:</strong> 99009\n<strong>Explanation:</strong> \nTo achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009.\n</pre>\n\n<p><strong>Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = 90\n<strong>Output:</strong> 99\n<strong>Explanation:</strong>\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num &lt;= 10<sup>8</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given an integer `num`. You know that Danny Mittal will sneakily **remap** one of the `10` possible digits (`0` to `9`) to another digit.\n\n\nReturn *the difference between the maximum and minimum**values Danny can make by remapping\u00a0**exactly** **one** digit* *in* `num`.\n\n\n**Notes:**\n\n\n* When Danny remaps a digit d1\u00a0to another digit d2, Danny replaces all occurrences of `d1`\u00a0in `num`\u00a0with `d2`.\n* Danny can remap a digit to itself, in which case `num`\u00a0does not change.\n* Danny can remap different digits for obtaining minimum and maximum values respectively.\n* The resulting number after remapping can contain leading zeroes.\n* We mentioned \"Danny Mittal\" to congratulate him on being in the top 10 in Weekly Contest 326.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = 11891\n**Output:** 99009\n**Explanation:** \nTo achieve the maximum value, Danny can remap the digit 1 to the digit 9 to yield 99899.\nTo achieve the minimum value, Danny can remap the digit 1 to the digit 0, yielding 890.\nThe difference between these two numbers is 99009.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = 90\n**Output:** 99\n**Explanation:**\nThe maximum value that can be returned by the function is 99 (if 0 is replaced by 9) and the minimum value that can be returned by the function is 0 (if 9 is replaced by 0).\nThus, we return 99.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num <= 108`\n\n\n",
        "canonical_solution": "class Solution:\n    def minMaxDifference(self, num: int) -> int:\n        s = str(num)\n        mi = int(s.replace(s[0], '0'))\n        for c in s:\n            if c != '9':\n                return int(s.replace(c, '9')) - mi\n        return num - mi\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def minMaxDifference(self, num: int) -> int:\n        s = str(num)\n        mi = int(s.replace(s[0], '0'))\n        for c in s:\n            if c != '9':\n                return int(s.replace(c, '9')) - mi\n        return num - mi\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random num\n    num = random.randint(1, 100000000)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minMaxDifference(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minMaxDifference(num) == expected_result\n        print(f\"assert solution.minMaxDifference({num}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minMaxDifference({num}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minMaxDifference(92172134) == 97007000\nassert solution.minMaxDifference(20804427) == 90000090\nassert solution.minMaxDifference(71943470) == 90000090\nassert solution.minMaxDifference(44195743) == 99000090\nassert solution.minMaxDifference(63771733) == 90000000\nassert solution.minMaxDifference(97443755) == 92000200\nassert solution.minMaxDifference(1935418) == 9000090\nassert solution.minMaxDifference(42232558) == 90000000\nassert solution.minMaxDifference(94718233) == 95000000\nassert solution.minMaxDifference(3264502) == 9000000\nassert solution.minMaxDifference(37111090) == 90000000\nassert solution.minMaxDifference(3452111) == 9000000\nassert solution.minMaxDifference(61130406) == 90000009\nassert solution.minMaxDifference(47717263) == 90000000\nassert solution.minMaxDifference(83276107) == 90000000\nassert solution.minMaxDifference(2097301) == 9000000\nassert solution.minMaxDifference(52502225) == 90900009\nassert solution.minMaxDifference(89318773) == 90009000\nassert solution.minMaxDifference(52942446) == 90000000\nassert solution.minMaxDifference(7746777) == 9900999\nassert solution.minMaxDifference(90031158) == 99900000\nassert solution.minMaxDifference(67855487) == 90000000\nassert solution.minMaxDifference(60356983) == 90009000\nassert solution.minMaxDifference(94187474) == 95000505\nassert solution.minMaxDifference(24961039) == 90000000\nassert solution.minMaxDifference(36235036) == 90090090\nassert solution.minMaxDifference(28196649) == 90000000\nassert solution.minMaxDifference(59210070) == 90000000\nassert solution.minMaxDifference(86155230) == 90000000\nassert solution.minMaxDifference(41513932) == 90000000\nassert solution.minMaxDifference(13428890) == 90000000\nassert solution.minMaxDifference(82877343) == 90900000\nassert solution.minMaxDifference(86275053) == 90000000\nassert solution.minMaxDifference(57141709) == 90000000\nassert solution.minMaxDifference(99175778) == 99800000\nassert solution.minMaxDifference(85608131) == 90009000\nassert solution.minMaxDifference(74070688) == 90090000\nassert solution.minMaxDifference(38271470) == 90000000\nassert solution.minMaxDifference(19800693) == 90000000\nassert solution.minMaxDifference(28526131) == 90090000\nassert solution.minMaxDifference(17301478) == 90009000\nassert solution.minMaxDifference(96444719) == 93000009\nassert solution.minMaxDifference(31243197) == 90009000\nassert solution.minMaxDifference(9506618) == 9400000\nassert solution.minMaxDifference(66196252) == 99009000\nassert solution.minMaxDifference(95731684) == 94000000\nassert solution.minMaxDifference(76983464) == 90000000\nassert solution.minMaxDifference(95966349) == 94900009\nassert solution.minMaxDifference(38473886) == 90009000\nassert solution.minMaxDifference(79692184) == 90000000\nassert solution.minMaxDifference(32924341) == 90000900\nassert solution.minMaxDifference(58805888) == 90009000\nassert solution.minMaxDifference(7746688) == 9900000\nassert solution.minMaxDifference(7702221) == 9900000\nassert solution.minMaxDifference(2317397) == 9000000\nassert solution.minMaxDifference(73212521) == 90000000\nassert solution.minMaxDifference(92869831) == 97009000\nassert solution.minMaxDifference(20680606) == 90000000\nassert solution.minMaxDifference(65826409) == 90009000\nassert solution.minMaxDifference(14061429) == 90009000\nassert solution.minMaxDifference(36607692) == 90000000\nassert solution.minMaxDifference(37597458) == 90000000\nassert solution.minMaxDifference(51959121) == 90090000\nassert solution.minMaxDifference(86350250) == 90000000\nassert solution.minMaxDifference(49153748) == 90000090\nassert solution.minMaxDifference(47540347) == 90090090\nassert solution.minMaxDifference(62733476) == 90000009\nassert solution.minMaxDifference(8946573) == 9000000\nassert solution.minMaxDifference(39821746) == 90000000\nassert solution.minMaxDifference(94153068) == 95000000\nassert solution.minMaxDifference(46109089) == 90000000\nassert solution.minMaxDifference(2116238) == 9000900\nassert solution.minMaxDifference(7872609) == 9090000\nassert solution.minMaxDifference(26681665) == 90000000\nassert solution.minMaxDifference(83139345) == 90000000\nassert solution.minMaxDifference(30044894) == 90000000\nassert solution.minMaxDifference(42392409) == 90000900\nassert solution.minMaxDifference(90363210) == 99000009\nassert solution.minMaxDifference(45168081) == 90000000\nassert solution.minMaxDifference(87450497) == 90000000\nassert solution.minMaxDifference(71606680) == 90000000\nassert solution.minMaxDifference(67843589) == 90000000\nassert solution.minMaxDifference(10344888) == 90000000\nassert solution.minMaxDifference(9328869) == 9600009\nassert solution.minMaxDifference(77972366) == 99090000\nassert solution.minMaxDifference(58075000) == 90009000\nassert solution.minMaxDifference(11203312) == 99000090\nassert solution.minMaxDifference(9721803) == 9200000\nassert solution.minMaxDifference(88519650) == 99000000\nassert solution.minMaxDifference(35311185) == 90900000\nassert solution.minMaxDifference(73485407) == 90000009\nassert solution.minMaxDifference(53399079) == 90000000\nassert solution.minMaxDifference(40396996) == 90000000\nassert solution.minMaxDifference(73423339) == 90000000\nassert solution.minMaxDifference(93006462) == 96000000\nassert solution.minMaxDifference(20414996) == 90000000\nassert solution.minMaxDifference(94505792) == 95000090\nassert solution.minMaxDifference(70651245) == 90000000\nassert solution.minMaxDifference(83715582) == 90000090\nassert solution.minMaxDifference(85934423) == 90000000",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minMaxDifference(11891) == 99009\nassert solution.minMaxDifference(90) == 99\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2144,
        "task_name": "Minimum Cost of Buying Candies With Discount",
        "description": "\n\n<p>A shop is selling candies at a discount. For <strong>every two</strong> candies sold, the shop gives a <strong>third</strong> candy for <strong>free</strong>.</p>\n\n<p>The customer can choose <strong>any</strong> candy to take away for free as long as the cost of the chosen candy is less than or equal to the <strong>minimum</strong> cost of the two candies bought.</p>\n\n<ul>\n\t<li>For example, if there are <code>4</code> candies with costs <code>1</code>, <code>2</code>, <code>3</code>, and <code>4</code>, and the customer buys candies with costs <code>2</code> and <code>3</code>, they&nbsp;can take the candy with cost <code>1</code> for free, but not the candy with cost <code>4</code>.</li>\n</ul>\n\n<p>Given a <strong>0-indexed</strong> integer array <code>cost</code>, where <code>cost[i]</code> denotes the cost of the <code>i<sup>th</sup></code> candy, return <em>the <strong>minimum cost</strong> of buying <strong>all</strong> the candies</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [1,2,3]\n<strong>Output:</strong> 5\n<strong>Explanation:</strong> We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the <strong>only</strong> way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [6,5,7,9,2,2]\n<strong>Output:</strong> 23\n<strong>Explanation:</strong> The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> cost = [5,5]\n<strong>Output:</strong> 10\n<strong>Explanation:</strong> Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= cost.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= cost[i] &lt;= 100</code></li>\n</ul>\n\n",
        "markdown_description": "\nA shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**.\n\n\nThe customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought.\n\n\n* For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they\u00a0can take the candy with cost `1` for free, but not the candy with cost `4`.\n\n\nGiven a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return *the **minimum cost** of buying **all** the candies*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** cost = [1,2,3]\n**Output:** 5\n**Explanation:** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.\nThe total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.\nNote that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.\nThe cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** cost = [6,5,7,9,2,2]\n**Output:** 23\n**Explanation:** The way in which we can get the minimum cost is described below:\n- Buy candies with costs 9 and 7\n- Take the candy with cost 6 for free\n- We buy candies with costs 5 and 2\n- Take the last remaining candy with cost 2 for free\nHence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** cost = [5,5]\n**Output:** 10\n**Explanation:** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.\nHence, the minimum cost to buy all candies is 5 + 5 = 10.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= cost.length <= 100`\n* `1 <= cost[i] <= 100`\n\n\n",
        "canonical_solution": "class Solution:\n    def minimumCost(self, cost: List[int]) -> int:\n        cost.sort(reverse=True)\n        return sum(cost) - sum(cost[2::3])\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumCost(self, cost):\n        cost.sort(reverse=True)\n        return sum(cost) - sum(cost[2::3])\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random cost list\n    cost = random.choices(range(1, 101), k=random.randint(1, 100))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumCost(cost)\n\n    return cost, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        cost, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumCost(cost) == expected_result\n        print(f\"assert solution.minimumCost({cost}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumCost({cost}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minimumCost([97, 96, 95, 94, 94, 93, 91, 91, 88, 85, 83, 83, 82, 81, 81, 81, 79, 71, 70, 69, 68, 64, 64, 54, 54, 53, 53, 49, 48, 47, 46, 45, 42, 40, 38, 35, 34, 33, 32, 27, 26, 25, 23, 20, 17, 17, 14, 12, 8, 8]) == 1904\nassert solution.minimumCost([99, 98, 96, 95, 94, 92, 90, 85, 85, 83, 82, 80, 80, 79, 79, 78, 76, 75, 74, 73, 72, 70, 70, 67, 65, 61, 61, 61, 58, 57, 55, 52, 51, 51, 46, 44, 42, 42, 41, 40, 39, 37, 35, 34, 32, 31, 29, 28, 26, 25, 25, 23, 21, 20, 20, 19, 19, 16, 12, 12, 8, 8, 5, 2, 2, 1, 1, 1]) == 2251\nassert solution.minimumCost([98, 94, 94, 92, 92, 90, 88, 87, 86, 83, 82, 82, 81, 81, 79, 77, 75, 73, 71, 68, 67, 65, 63, 62, 60, 60, 59, 58, 57, 54, 51, 49, 48, 46, 44, 43, 42, 41, 41, 35, 34, 30, 29, 27, 26, 24, 23, 20, 17, 16, 15, 13, 12, 10, 6, 5, 4, 2]) == 2048\nassert solution.minimumCost([100, 100, 100, 99, 99, 99, 96, 94, 93, 91, 89, 89, 85, 84, 83, 80, 78, 74, 72, 71, 67, 66, 66, 65, 65, 64, 62, 61, 58, 58, 56, 55, 54, 54, 51, 50, 50, 49, 47, 45, 44, 43, 42, 41, 40, 32, 31, 31, 28, 26, 23, 23, 20, 16, 15, 15, 14, 12, 12, 11, 8, 8, 7, 5, 3, 1]) == 2343\nassert solution.minimumCost([92, 91, 86, 86, 83, 83, 82, 80, 78, 77, 75, 73, 71, 67, 67, 67, 67, 66, 60, 58, 55, 54, 54, 53, 52, 52, 50, 50, 47, 47, 45, 45, 44, 44, 44, 43, 40, 37, 35, 32, 28, 26, 26, 25, 23, 22, 22, 22, 21, 21, 19, 16, 16, 15, 14, 12, 11, 10, 7, 2, 1]) == 1893\nassert solution.minimumCost([100, 99, 99, 99, 98, 98, 98, 97, 96, 95, 94, 92, 92, 90, 90, 90, 87, 87, 86, 84, 82, 82, 82, 81, 77, 77, 77, 75, 74, 73, 73, 72, 72, 72, 72, 69, 68, 68, 66, 66, 65, 62, 62, 61, 60, 60, 60, 60, 59, 59, 57, 57, 56, 54, 54, 50, 47, 45, 45, 44, 44, 42, 40, 39, 39, 38, 37, 37, 36, 35, 34, 33, 33, 31, 28, 28, 27, 26, 25, 22, 22, 20, 17, 14, 13, 12, 11, 11, 8, 3, 1]) == 3555\nassert solution.minimumCost([88, 76, 64, 32, 29, 26]) == 225\nassert solution.minimumCost([98, 97, 97, 96, 95, 95, 95, 94, 93, 93, 92, 91, 89, 89, 88, 82, 79, 79, 78, 78, 77, 76, 75, 74, 74, 73, 70, 69, 69, 66, 61, 58, 58, 57, 55, 55, 52, 50, 50, 47, 47, 45, 44, 44, 43, 42, 39, 38, 36, 35, 35, 35, 35, 32, 32, 29, 29, 27, 26, 26, 25, 25, 24, 23, 20, 19, 17, 17, 16, 15, 15, 13, 10, 10, 9, 9, 9, 7, 7, 7, 6, 6, 5, 3, 2, 2]) == 2766\nassert solution.minimumCost([100, 100, 98, 98, 96, 95, 95, 94, 92, 92, 89, 88, 87, 85, 85, 84, 84, 83, 83, 81, 80, 77, 76, 72, 71, 70, 69, 67, 66, 66, 63, 63, 62, 62, 61, 59, 59, 58, 55, 55, 54, 53, 53, 52, 51, 50, 48, 47, 46, 44, 43, 43, 42, 42, 42, 40, 39, 38, 36, 36, 35, 33, 33, 33, 32, 31, 28, 26, 25, 23, 20, 20, 20, 14, 13, 12, 11, 11, 10, 9, 9, 8, 7, 6, 5, 3, 3, 2]) == 3035\nassert solution.minimumCost([98, 97, 95, 94, 93, 93, 93, 88, 88, 87, 86, 86, 86, 86, 85, 84, 82, 82, 81, 81, 80, 78, 74, 71, 71, 71, 70, 69, 68, 66, 66, 63, 63, 62, 58, 56, 54, 53, 52, 49, 48, 48, 48, 47, 46, 45, 45, 45, 45, 43, 43, 43, 43, 42, 41, 40, 40, 40, 39, 39, 38, 38, 36, 35, 34, 31, 31, 29, 27, 26, 26, 26, 26, 25, 25, 24, 24, 22, 22, 21, 20, 19, 18, 17, 14, 13, 11, 8, 7, 6, 6, 6, 4, 1, 1, 1]) == 3131\nassert solution.minimumCost([100, 100, 98, 96, 94, 93, 91, 90, 90, 90, 89, 89, 89, 88, 88, 87, 84, 80, 76, 76, 71, 71, 69, 69, 67, 66, 66, 64, 64, 64, 63, 62, 61, 60, 59, 58, 58, 58, 58, 57, 56, 55, 55, 51, 49, 48, 48, 47, 45, 43, 41, 40, 37, 35, 34, 30, 29, 29, 26, 23, 23, 22, 19, 18, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 6, 5, 4, 4, 3, 1, 1]) == 2785\nassert solution.minimumCost([100, 97, 93, 93, 93, 91, 91, 91, 89, 85, 84, 82, 82, 82, 81, 77, 77, 76, 74, 73, 70, 70, 69, 69, 68, 68, 67, 67, 64, 64, 61, 58, 56, 55, 54, 54, 53, 50, 49, 47, 46, 44, 44, 43, 43, 43, 42, 40, 40, 40, 39, 39, 39, 38, 37, 37, 36, 36, 34, 34, 34, 32, 32, 31, 31, 30, 28, 27, 26, 25, 23, 22, 22, 20, 20, 19, 16, 13, 12, 12, 12, 11, 11, 9, 8, 7, 7, 7, 6, 5, 5, 5, 4, 2, 1]) == 2898\nassert solution.minimumCost([100, 97, 97, 97, 94, 93, 90, 89, 89, 89, 88, 86, 84, 83, 82, 80, 79, 78, 75, 75, 74, 74, 71, 67, 64, 61, 61, 60, 59, 56, 53, 47, 44, 44, 44, 43, 42, 40, 39, 38, 33, 30, 28, 26, 24, 19, 18, 17, 15, 10, 10, 10, 9, 9, 6, 4, 2, 2]) == 2097\nassert solution.minimumCost([100, 99, 98, 96, 90, 89, 88, 87, 86, 85, 85, 84, 82, 81, 76, 75, 73, 72, 72, 72, 72, 71, 61, 58, 51, 49, 47, 45, 44, 43, 41, 36, 32, 31, 30, 29, 26, 25, 21, 20, 18, 17, 13, 12, 10, 9, 7, 6, 4]) == 1778\nassert solution.minimumCost([92, 84, 76, 58, 52, 51, 49, 42, 41, 28, 24, 24, 20, 18, 14, 10, 2]) == 479\nassert solution.minimumCost([97, 92, 90, 85, 85, 82, 77, 75, 75, 72, 70, 66, 65, 64, 61, 60, 58, 58, 57, 57, 56, 53, 53, 49, 46, 43, 41, 39, 38, 36, 35, 35, 32, 29, 29, 28, 28, 27, 25, 25, 24, 22, 22, 21, 20, 18, 18, 18, 17, 17, 16, 15, 14, 11, 10, 7, 6]) == 1677\nassert solution.minimumCost([99, 94, 92, 91, 91, 91, 90, 88, 88, 86, 86, 84, 83, 81, 81, 81, 77, 76, 74, 73, 71, 68, 67, 67, 67, 66, 65, 63, 63, 62, 62, 61, 60, 59, 59, 59, 58, 57, 57, 56, 55, 53, 50, 49, 48, 48, 48, 47, 45, 45, 44, 44, 43, 41, 40, 38, 36, 36, 36, 35, 35, 34, 32, 32, 32, 32, 30, 28, 27, 24, 22, 20, 20, 17, 17, 16, 15, 13, 12, 11, 9, 9, 5, 4, 3, 2, 2, 1]) == 2925\nassert solution.minimumCost([98, 97, 94, 93, 89, 89, 88, 87, 86, 85, 84, 83, 83, 82, 82, 82, 80, 78, 78, 77, 74, 72, 72, 71, 70, 70, 70, 69, 69, 65, 64, 63, 60, 58, 57, 56, 56, 55, 53, 49, 46, 46, 44, 39, 36, 35, 33, 30, 25, 22, 22, 22, 20, 18, 16, 9, 9, 8, 8]) == 2354\nassert solution.minimumCost([100, 100, 99, 97, 93, 92, 91, 88, 87, 83, 81, 78, 77, 77, 77, 75, 73, 71, 67, 67, 66, 63, 63, 63, 63, 63, 59, 59, 58, 56, 52, 51, 51, 49, 47, 47, 47, 46, 46, 42, 42, 41, 38, 36, 34, 34, 33, 32, 32, 30, 28, 27, 25, 24, 21, 18, 16, 16, 14, 14, 12, 11, 11, 8, 8, 7, 7, 6, 6, 1]) == 2291\nassert solution.minimumCost([100, 99, 99, 97, 94, 92, 91, 91, 90, 90, 87, 85, 85, 84, 82, 81, 80, 79, 78, 77, 76, 76, 75, 74, 74, 72, 72, 71, 71, 70, 69, 69, 68, 64, 63, 62, 61, 60, 59, 56, 53, 50, 49, 49, 47, 47, 45, 45, 44, 43, 40, 38, 38, 36, 35, 35, 35, 34, 33, 33, 33, 32, 30, 28, 28, 23, 23, 23, 22, 20, 20, 18, 16, 16, 16, 16, 14, 14, 12, 12, 10, 10, 7, 6, 4, 3, 3, 2]) == 2977\nassert solution.minimumCost([100, 98, 95, 95, 95, 93, 92, 90, 90, 89, 88, 88, 86, 86, 84, 83, 82, 80, 78, 78, 78, 76, 76, 76, 73, 73, 70, 70, 69, 67, 67, 66, 65, 65, 62, 61, 60, 59, 58, 57, 54, 54, 52, 52, 49, 47, 43, 43, 43, 40, 36, 34, 33, 33, 32, 32, 32, 31, 28, 27, 26, 24, 24, 23, 21, 21, 18, 17, 15, 15, 14, 14, 13, 11, 10, 9, 8, 8, 7, 7, 6, 5, 3, 2, 2, 1]) == 2858\nassert solution.minimumCost([99, 98, 98, 97, 97, 96, 92, 91, 90, 89, 89, 89, 89, 87, 86, 85, 83, 83, 81, 78, 78, 77, 71, 71, 71, 70, 68, 67, 67, 66, 62, 61, 60, 60, 60, 59, 59, 58, 58, 58, 57, 55, 55, 55, 54, 52, 52, 51, 51, 47, 45, 45, 44, 44, 44, 43, 43, 42, 42, 41, 39, 39, 38, 36, 36, 36, 33, 33, 32, 32, 31, 30, 30, 28, 27, 26, 23, 22, 21, 20, 19, 17, 16, 16, 15, 14, 13, 12, 12, 11, 11, 7, 5, 5, 4, 3, 3, 3]) == 3271\nassert solution.minimumCost([99, 99, 92, 90, 89, 83, 82, 81, 80, 80, 79, 77, 76, 75, 73, 73, 64, 63, 60, 60, 57, 57, 56, 56, 55, 54, 53, 50, 47, 46, 44, 43, 39, 38, 37, 36, 35, 34, 31, 31, 30, 29, 29, 27, 26, 24, 22, 21, 19, 15, 15, 13, 13, 12, 11, 11, 11, 11, 10, 10, 9, 8, 6, 5, 4, 2, 1, 1]) == 1951\nassert solution.minimumCost([100, 99, 98, 96, 94, 92, 89, 88, 87, 86, 78, 73, 73, 72, 72, 68, 68, 66, 63, 62, 61, 60, 59, 58, 54, 53, 50, 46, 43, 41, 40, 38, 35, 34, 32, 31, 30, 29, 27, 25, 25, 22, 22, 22, 20, 16, 14, 13, 11, 10, 10, 10, 7, 4, 2, 2, 2]) == 1820\nassert solution.minimumCost([97, 93, 92, 90, 89, 86, 86, 85, 84, 81, 81, 78, 74, 72, 71, 71, 70, 69, 64, 63, 61, 60, 56, 55, 52, 50, 50, 46, 44, 43, 42, 39, 37, 33, 30, 13, 13, 10, 10, 4, 3, 1]) == 1598\nassert solution.minimumCost([93, 89, 74, 71, 69, 67, 64, 60, 56, 54, 53, 50, 49, 46, 45, 43, 37, 29, 18, 18, 16, 7]) == 771\nassert solution.minimumCost([99, 99, 83, 64, 33, 29, 21, 16, 4, 3]) == 335\nassert solution.minimumCost([99, 98, 98, 97, 96, 95, 90, 88, 86, 85, 82, 82, 81, 79, 78, 76, 75, 75, 73, 70, 68, 66, 64, 60, 58, 56, 56, 55, 55, 54, 46, 44, 43, 42, 41, 41, 40, 39, 39, 34, 34, 32, 31, 30, 30, 27, 25, 21, 21, 19, 19, 11, 7, 3, 3]) == 2037\nassert solution.minimumCost([90, 85, 77, 76, 71, 68, 61, 57, 57, 44, 39, 38, 37, 35, 26, 13, 11, 10, 8, 8]) == 635\nassert solution.minimumCost([98, 97, 95, 93, 91, 89, 89, 88, 86, 85, 83, 81, 80, 79, 79, 76, 74, 74, 74, 74, 73, 72, 69, 69, 66, 65, 64, 62, 62, 58, 58, 58, 56, 56, 53, 52, 52, 52, 51, 49, 47, 46, 46, 45, 45, 44, 41, 36, 33, 32, 29, 25, 25, 21, 18, 17, 13, 10, 10, 9, 8, 5, 4, 4, 4]) == 2369\nassert solution.minimumCost([95, 85, 83, 81, 79, 76, 72, 61, 61, 58, 54, 53, 47, 42, 40, 36, 36, 31, 24, 19]) == 789\nassert solution.minimumCost([96, 95, 94, 91, 90, 84, 82, 70, 70, 66, 65, 64, 63, 62, 58, 58, 55, 55, 54, 46, 46, 44, 41, 40, 37, 36, 35, 35, 34, 33, 26, 23, 22, 19, 15, 6, 4, 3]) == 1310\nassert solution.minimumCost([100, 100, 97, 97, 97, 96, 95, 94, 93, 93, 93, 92, 92, 91, 90, 90, 89, 87, 87, 87, 86, 86, 86, 82, 82, 82, 81, 81, 80, 80, 76, 74, 74, 73, 72, 71, 68, 68, 67, 66, 65, 65, 64, 62, 60, 56, 56, 55, 54, 53, 52, 51, 51, 51, 50, 49, 49, 45, 43, 40, 40, 38, 36, 34, 32, 32, 31, 30, 27, 26, 26, 25, 25, 24, 21, 21, 20, 19, 19, 17, 17, 16, 15, 14, 14, 9, 9, 7, 7, 7, 6, 5, 4, 1]) == 3461\nassert solution.minimumCost([55, 22]) == 77\nassert solution.minimumCost([100, 98, 95, 95, 94, 91, 89, 77, 75, 71, 70, 70, 69, 66, 64, 64, 62, 62, 62, 59, 57, 57, 57, 55, 55, 48, 45, 45, 43, 38, 35, 34, 29, 27, 25, 19, 19, 17, 16, 5]) == 1543\nassert solution.minimumCost([96, 96, 94, 90, 89, 83, 76, 72, 69, 68, 64, 59, 57, 57, 55, 53, 52, 46, 35, 33, 29, 28, 25, 23, 23, 19, 15, 14, 13, 13, 12, 8, 6, 5]) == 1085\nassert solution.minimumCost([100, 100, 99, 98, 97, 97, 97, 95, 93, 88, 88, 87, 86, 86, 85, 83, 83, 83, 82, 82, 82, 82, 82, 80, 79, 77, 75, 72, 72, 67, 64, 63, 63, 60, 60, 59, 58, 57, 55, 55, 54, 51, 46, 45, 44, 42, 42, 42, 40, 39, 39, 35, 35, 33, 30, 30, 29, 24, 23, 21, 17, 15, 14, 12, 11, 10, 8, 8, 7, 5, 5, 4, 2]) == 2714\nassert solution.minimumCost([100, 100, 99, 94, 93, 91, 86, 85, 83, 82, 79, 79, 78, 77, 77, 77, 74, 73, 72, 72, 72, 71, 70, 70, 70, 69, 66, 65, 65, 63, 61, 60, 56, 54, 54, 52, 52, 52, 49, 45, 44, 44, 41, 39, 38, 36, 36, 35, 30, 29, 28, 27, 26, 25, 24, 23, 23, 23, 19, 19, 19, 18, 17, 15, 13, 7, 6, 5, 3, 3]) == 2433\nassert solution.minimumCost([100, 100, 99, 99, 98, 98, 97, 95, 92, 89, 89, 88, 87, 87, 84, 84, 83, 81, 81, 79, 77, 77, 76, 76, 74, 72, 72, 72, 72, 71, 70, 68, 68, 67, 66, 65, 63, 62, 62, 61, 57, 56, 56, 55, 54, 53, 53, 52, 52, 52, 51, 50, 48, 47, 45, 45, 45, 44, 43, 42, 39, 38, 36, 36, 35, 35, 34, 34, 34, 32, 32, 32, 32, 31, 30, 29, 29, 29, 26, 25, 24, 23, 21, 21, 20, 19, 16, 13, 12, 12, 11, 11, 9, 8, 6, 4, 4, 2, 2, 1]) == 3424\nassert solution.minimumCost([100, 100, 100, 96, 96, 96, 95, 95, 94, 93, 93, 93, 88, 88, 85, 84, 83, 83, 82, 79, 78, 76, 76, 75, 75, 75, 75, 74, 74, 74, 72, 72, 71, 71, 71, 69, 66, 65, 64, 63, 63, 62, 62, 60, 59, 58, 58, 57, 55, 55, 54, 53, 52, 51, 51, 50, 49, 47, 47, 47, 46, 46, 46, 45, 44, 42, 38, 36, 36, 35, 34, 34, 32, 31, 30, 30, 28, 27, 27, 26, 24, 19, 19, 18, 15, 15, 15, 15, 14, 12, 11, 10, 9, 7, 5, 5, 4, 4, 2, 1]) == 3550\nassert solution.minimumCost([96, 94, 93, 89, 85, 84, 82, 78, 68, 61, 61, 57, 57, 56, 47, 46, 44, 32, 28, 27, 25, 25, 21, 13, 8, 3, 2, 2]) == 963\nassert solution.minimumCost([99, 99, 96, 94, 94, 91, 90, 89, 88, 87, 86, 83, 82, 77, 75, 74, 69, 69, 68, 67, 63, 62, 62, 58, 48, 48, 45, 44, 40, 39, 35, 33, 29, 28, 28, 26, 24, 17, 17, 16, 15, 14, 10, 7, 5, 4, 1]) == 1697\nassert solution.minimumCost([99, 94, 94, 90, 88, 88, 85, 84, 83, 75, 63, 61, 61, 58, 56, 52, 48, 41, 33, 27, 22, 15, 9, 7, 6, 6, 2, 2]) == 995\nassert solution.minimumCost([100, 98, 98, 94, 91, 81, 81, 81, 78, 77, 72, 64, 63, 63, 59, 58, 58, 55, 54, 53, 51, 47, 46, 46, 45, 45, 45, 42, 39, 38, 37, 36, 35, 31, 28, 27, 26, 22, 20, 20, 18, 17, 16, 16, 15, 3, 2]) == 1562\nassert solution.minimumCost([100, 97, 96, 91, 90, 90, 90, 89, 89, 88, 87, 84, 82, 80, 80, 79, 75, 74, 71, 68, 67, 65, 65, 62, 62, 61, 60, 58, 55, 52, 51, 51, 50, 50, 50, 49, 48, 48, 47, 42, 41, 41, 39, 37, 33, 33, 33, 31, 30, 25, 23, 14, 13, 12, 10, 10, 9, 5, 5, 1]) == 2188\nassert solution.minimumCost([98, 77, 76, 75, 63, 59, 59, 57, 48, 43, 42, 41, 37, 36, 35, 31, 28, 23, 22, 21, 17, 14, 13, 10, 3, 2]) == 721\nassert solution.minimumCost([99, 99, 97, 96, 94, 93, 91, 89, 88, 88, 85, 83, 82, 82, 81, 76, 72, 71, 69, 64, 63, 63, 63, 63, 60, 60, 59, 58, 58, 57, 56, 53, 52, 51, 48, 48, 47, 47, 47, 43, 41, 39, 39, 34, 31, 30, 26, 26, 25, 25, 25, 24, 22, 21, 21, 21, 18, 18, 16, 14, 14, 11, 10, 9, 7, 6, 6, 5, 3]) == 2287\nassert solution.minimumCost([99, 97, 97, 97, 97, 94, 94, 94, 94, 93, 91, 90, 88, 86, 86, 85, 84, 83, 82, 82, 81, 80, 77, 77, 74, 72, 71, 71, 70, 57, 56, 55, 54, 54, 53, 51, 51, 51, 50, 47, 47, 46, 42, 42, 40, 39, 37, 31, 26, 25, 25, 24, 23, 23, 23, 22, 21, 21, 20, 19, 18, 18, 17, 17, 13, 12, 11, 9, 9, 9, 7, 6, 4, 3, 3, 2]) == 2582\nassert solution.minimumCost([100, 98, 95, 95, 94, 94, 93, 93, 92, 91, 91, 90, 90, 90, 89, 79, 78, 77, 76, 71, 70, 69, 65, 61, 57, 56, 55, 55, 50, 49, 44, 43, 42, 41, 37, 34, 32, 30, 28, 27, 24, 24, 23, 19, 19, 18, 16, 15, 14, 9, 9, 2, 1, 1]) == 1971\nassert solution.minimumCost([100, 99, 96, 95, 95, 95, 94, 91, 89, 88, 86, 86, 84, 84, 81, 78, 78, 76, 73, 71, 71, 70, 70, 69, 65, 64, 63, 56, 52, 51, 51, 51, 49, 44, 42, 40, 39, 35, 35, 34, 32, 32, 32, 31, 31, 29, 24, 23, 22, 21, 20, 17, 16, 16, 15, 14, 13, 13, 11, 10, 10, 10, 9, 8, 7, 6, 5, 5, 5, 4, 2, 1]) == 2217\nassert solution.minimumCost([100, 100, 99, 98, 97, 97, 94, 94, 93, 91, 89, 87, 86, 82, 82, 81, 80, 80, 80, 78, 73, 69, 69, 68, 68, 66, 66, 65, 64, 63, 61, 61, 60, 59, 58, 58, 58, 56, 56, 56, 53, 53, 51, 51, 49, 49, 47, 47, 44, 43, 42, 41, 40, 39, 38, 38, 36, 35, 34, 34, 33, 29, 28, 26, 25, 25, 25, 25, 24, 24, 22, 22, 21, 20, 20, 19, 18, 13, 11, 9, 6, 6, 5, 4, 4, 3]) == 2949\nassert solution.minimumCost([99, 99, 99, 94, 93, 92, 91, 88, 87, 87, 87, 86, 85, 84, 80, 79, 79, 78, 78, 76, 75, 73, 73, 71, 67, 66, 66, 65, 63, 58, 58, 54, 52, 51, 51, 50, 49, 47, 47, 46, 41, 41, 41, 39, 39, 38, 32, 32, 28, 27, 25, 24, 22, 21, 21, 19, 19, 18, 18, 17, 16, 16, 15, 15, 13, 12, 10, 10, 8, 6, 5, 4, 4, 1]) == 2446\nassert solution.minimumCost([100, 99, 98, 98, 93, 93, 91, 90, 87, 87, 84, 83, 83, 82, 82, 81, 81, 80, 78, 76, 75, 74, 72, 71, 70, 70, 69, 68, 68, 68, 67, 66, 66, 64, 63, 61, 60, 60, 59, 59, 54, 52, 52, 51, 51, 48, 48, 45, 45, 44, 44, 44, 43, 43, 43, 42, 40, 39, 38, 36, 36, 35, 35, 34, 33, 31, 31, 30, 29, 27, 26, 26, 24, 23, 23, 21, 21, 20, 19, 18, 17, 16, 9, 9, 7, 6, 6, 5, 4, 3, 2, 1]) == 3103\nassert solution.minimumCost([94, 91, 91, 91, 88, 79, 79, 78, 74, 62, 60, 56, 56, 53, 51, 50, 50, 43, 40, 35, 34, 32, 28, 28, 18, 17, 16, 16, 14, 13, 13, 12, 10, 7, 3, 3, 2]) == 1089\nassert solution.minimumCost([100, 98, 98, 95, 94, 91, 89, 88, 87, 84, 84, 83, 81, 75, 74, 73, 73, 73, 72, 72, 70, 70, 69, 68, 67, 63, 60, 59, 59, 56, 55, 53, 53, 52, 52, 50, 49, 49, 49, 48, 44, 44, 40, 39, 37, 37, 37, 37, 35, 35, 35, 34, 34, 29, 27, 24, 23, 23, 20, 20, 20, 18, 17, 16, 16, 15, 15, 15, 14, 13, 10, 9, 6, 5, 2, 2, 1]) == 2489\nassert solution.minimumCost([99, 99, 98, 96, 95, 95, 91, 90, 90, 90, 88, 87, 86, 85, 84, 84, 83, 82, 80, 79, 79, 77, 77, 76, 75, 71, 71, 71, 71, 69, 69, 69, 68, 67, 67, 67, 66, 65, 63, 61, 60, 60, 60, 59, 58, 58, 57, 56, 56, 55, 54, 54, 51, 48, 47, 47, 44, 44, 44, 43, 43, 43, 42, 41, 41, 41, 40, 39, 37, 37, 37, 37, 34, 33, 33, 32, 32, 30, 28, 26, 26, 25, 24, 24, 24, 24, 22, 19, 18, 17, 8, 7, 7, 4, 4, 3, 2, 2]) == 3510\nassert solution.minimumCost([100, 98, 95, 94, 93, 93, 92, 91, 91, 89, 87, 85, 81, 80, 79, 77, 77, 76, 76, 76, 74, 72, 71, 70, 70, 69, 69, 68, 64, 64, 62, 62, 61, 61, 61, 61, 61, 60, 58, 56, 55, 54, 54, 53, 53, 53, 49, 49, 48, 46, 45, 43, 42, 36, 34, 34, 34, 29, 28, 27, 26, 26, 25, 22, 22, 21, 21, 19, 19, 19, 19, 18, 18, 18, 16, 15, 14, 14, 12, 12, 11, 8, 8, 7, 7, 6, 5, 3, 1, 1]) == 2912\nassert solution.minimumCost([100, 99, 98, 98, 97, 95, 94, 93, 92, 92, 91, 91, 91, 90, 89, 87, 87, 85, 85, 84, 84, 80, 75, 74, 73, 72, 71, 70, 69, 65, 65, 62, 62, 61, 61, 59, 58, 56, 55, 51, 51, 51, 51, 49, 49, 48, 46, 46, 44, 43, 43, 42, 42, 39, 38, 38, 37, 36, 36, 35, 31, 29, 28, 26, 25, 25, 20, 20, 19, 18, 18, 18, 16, 15, 13, 13, 12, 12, 11, 11, 9, 9, 7, 1]) == 2986\nassert solution.minimumCost([100, 99, 98, 95, 94, 94, 93, 91, 88, 87, 87, 86, 84, 82, 81, 79, 78, 76, 75, 75, 75, 71, 71, 70, 70, 69, 67, 66, 65, 64, 55, 54, 53, 49, 49, 49, 47, 45, 42, 39, 39, 37, 36, 36, 35, 33, 29, 28, 27, 27, 22, 21, 21, 18, 18, 17, 16, 14, 12, 10, 10, 10, 9, 8, 7, 7, 6, 5, 4, 3, 3]) == 2351\nassert solution.minimumCost([100, 92, 91, 79, 75, 74, 67, 66, 63, 61, 61, 60, 58, 58, 56, 53, 50, 50, 45, 43, 37, 35, 33, 32, 32, 28, 27, 20, 17, 16, 12, 12, 12, 8, 8, 5, 4, 4, 3]) == 1121\nassert solution.minimumCost([100, 99, 97, 97, 95, 95, 93, 92, 91, 85, 83, 82, 79, 77, 76, 75, 75, 74, 70, 69, 69, 67, 66, 64, 64, 62, 61, 60, 55, 55, 54, 54, 52, 51, 49, 49, 47, 45, 44, 41, 40, 39, 35, 34, 33, 33, 32, 32, 31, 31, 28, 27, 26, 26, 22, 22, 19, 18, 16, 12, 11, 10, 10, 6, 4, 3, 3, 1]) == 2306\nassert solution.minimumCost([99, 98, 97, 97, 95, 95, 95, 94, 94, 91, 90, 89, 89, 88, 88, 84, 84, 82, 81, 80, 78, 76, 76, 75, 75, 74, 74, 74, 74, 73, 71, 69, 69, 68, 68, 67, 67, 67, 66, 66, 64, 63, 57, 56, 55, 55, 55, 53, 53, 49, 49, 48, 47, 46, 45, 45, 42, 41, 41, 40, 38, 37, 37, 34, 34, 33, 27, 27, 26, 26, 24, 24, 22, 21, 17, 15, 13, 12, 11, 9, 9, 6, 6, 2, 2, 2]) == 3200\nassert solution.minimumCost([100, 99, 98, 97, 96, 96, 95, 94, 94, 88, 88, 87, 86, 85, 82, 81, 79, 78, 78, 77, 74, 68, 65, 59, 56, 53, 51, 49, 47, 46, 44, 40, 39, 35, 34, 33, 32, 29, 27, 25, 17, 17, 17, 16, 14, 12, 11, 10, 5, 4, 3, 2]) == 1904\nassert solution.minimumCost([100, 100, 98, 95, 94, 91, 91, 88, 86, 82, 81, 81, 80, 77, 76, 75, 75, 71, 69, 69, 68, 65, 63, 63, 62, 62, 61, 61, 60, 59, 58, 57, 55, 55, 54, 54, 52, 52, 52, 50, 45, 45, 44, 44, 43, 43, 43, 39, 35, 35, 33, 32, 31, 30, 29, 28, 27, 25, 25, 24, 21, 20, 20, 17, 15, 10, 9, 8, 7, 6, 4, 4, 2, 1]) == 2489\nassert solution.minimumCost([42, 32, 28]) == 74\nassert solution.minimumCost([96, 93, 92, 91, 91, 91, 90, 87, 87, 83, 82, 82, 81, 80, 72, 70, 70, 69, 68, 67, 59, 55, 55, 54, 54, 52, 48, 47, 41, 32, 30, 28, 27, 27, 26, 22, 21, 18, 15, 6, 6, 1]) == 1615\nassert solution.minimumCost([100, 100, 98, 98, 96, 95, 94, 94, 92, 91, 89, 89, 88, 87, 86, 84, 84, 82, 81, 79, 79, 78, 76, 75, 74, 72, 71, 71, 71, 69, 68, 68, 66, 65, 64, 64, 64, 63, 63, 62, 62, 61, 61, 60, 57, 56, 54, 53, 49, 47, 47, 46, 45, 44, 42, 41, 41, 37, 36, 31, 28, 28, 27, 25, 23, 23, 22, 21, 21, 21, 19, 18, 16, 14, 11, 11, 9, 7, 6, 4, 4, 4, 3, 3, 2, 1]) == 3054\nassert solution.minimumCost([97, 97, 95, 94, 94, 94, 94, 93, 93, 93, 92, 92, 92, 91, 90, 90, 89, 88, 87, 87, 87, 86, 86, 84, 83, 79, 77, 75, 71, 71, 70, 68, 68, 67, 67, 66, 55, 55, 54, 54, 54, 53, 52, 50, 49, 49, 49, 49, 48, 46, 46, 46, 45, 45, 45, 44, 41, 41, 41, 40, 40, 38, 38, 34, 34, 34, 33, 30, 26, 26, 24, 21, 19, 18, 16, 14, 14, 13, 11, 8, 7, 7, 6, 2, 1]) == 3173\nassert solution.minimumCost([98, 98, 89, 88, 87, 87, 85, 83, 82, 82, 82, 77, 74, 72, 71, 67, 67, 67, 66, 66, 64, 64, 63, 63, 58, 55, 52, 51, 51, 51, 46, 44, 44, 43, 42, 40, 39, 36, 32, 30, 29, 23, 22, 21, 21, 19, 17, 15, 15, 15, 13, 12, 11, 8, 7, 3, 1, 1, 1]) == 1910\nassert solution.minimumCost([100, 94, 93, 92, 89, 85, 80, 79, 69, 68, 61, 60, 60, 56, 55, 54, 52, 40, 34, 26, 22, 21, 16, 6, 4, 3, 2, 2, 2]) == 993\nassert solution.minimumCost([93, 67, 55, 55, 46, 43, 42, 41, 34, 31, 30, 28, 26, 20, 14, 7, 5, 4, 2, 2]) == 467\nassert solution.minimumCost([100, 100, 97, 97, 96, 96, 96, 96, 95, 94, 93, 89, 89, 85, 82, 81, 80, 78, 77, 73, 72, 71, 70, 66, 66, 66, 65, 62, 61, 61, 61, 60, 56, 53, 52, 51, 50, 50, 47, 47, 46, 46, 43, 41, 36, 35, 33, 31, 31, 30, 27, 25, 24, 24, 24, 23, 23, 22, 19, 18, 15, 14, 14, 12, 10, 10, 9, 7, 5, 5, 4, 3, 3, 3]) == 2504\nassert solution.minimumCost([96, 96, 95, 92, 90, 90, 88, 87, 87, 86, 85, 84, 83, 82, 81, 78, 77, 76, 76, 71, 71, 70, 66, 66, 66, 63, 61, 58, 56, 54, 54, 53, 50, 50, 49, 46, 45, 45, 42, 39, 38, 37, 36, 30, 27, 25, 22, 21, 20, 19, 16, 14, 13, 13, 7, 7, 6, 5, 3, 3, 3, 2]) == 2145\nassert solution.minimumCost([29, 18, 1]) == 47\nassert solution.minimumCost([100, 98, 96, 94, 94, 93, 93, 91, 91, 90, 88, 87, 87, 86, 84, 82, 81, 80, 79, 78, 75, 71, 71, 70, 70, 70, 69, 68, 68, 67, 67, 67, 66, 64, 63, 61, 59, 58, 57, 56, 54, 53, 52, 50, 50, 49, 48, 48, 45, 45, 45, 44, 43, 41, 41, 39, 39, 38, 38, 36, 35, 34, 34, 33, 32, 30, 28, 28, 26, 25, 25, 25, 25, 24, 24, 23, 21, 20, 19, 19, 19, 17, 17, 13, 10, 9, 9, 9, 8, 7, 7, 6, 4, 4, 3, 3, 3, 3]) == 3146\nassert solution.minimumCost([99, 98, 78, 74, 69, 69, 66, 56, 56, 52, 46, 42, 39, 34, 31, 28, 20, 9, 7, 5, 2]) == 693\nassert solution.minimumCost([100, 100, 100, 99, 97, 97, 96, 96, 96, 96, 93, 92, 90, 90, 89, 87, 87, 87, 86, 83, 82, 80, 80, 78, 73, 73, 73, 73, 68, 67, 66, 66, 63, 63, 62, 59, 56, 52, 50, 50, 48, 48, 47, 46, 40, 38, 38, 37, 35, 33, 31, 30, 26, 26, 25, 25, 24, 23, 22, 21, 20, 20, 20, 16, 16, 16, 16, 15, 14, 14, 11, 11, 8, 8, 7, 6, 5, 3, 1, 1]) == 2755\nassert solution.minimumCost([89, 83, 82, 74, 61, 60, 58, 55, 50, 49, 48, 30, 27, 9]) == 553\nassert solution.minimumCost([96, 96, 85, 80, 77, 64, 57, 49, 43, 37, 31, 30, 19, 8, 2]) == 550\nassert solution.minimumCost([97, 89, 86, 84, 76, 73, 65, 53, 52, 50, 33, 27]) == 547\nassert solution.minimumCost([99, 97, 95, 94, 92, 92, 90, 88, 86, 85, 85, 84, 84, 83, 78, 77, 76, 75, 74, 70, 68, 68, 68, 65, 60, 56, 56, 55, 55, 54, 53, 53, 53, 52, 52, 51, 50, 50, 48, 44, 43, 40, 38, 35, 34, 32, 31, 29, 28, 27, 27, 25, 24, 24, 23, 21, 18, 16, 14, 12, 10, 7, 7, 4, 4, 3, 1, 1]) == 2294\nassert solution.minimumCost([100, 96, 95, 92, 86, 78, 75, 72, 72, 71, 68, 68, 67, 59, 52, 48, 43, 42, 38, 34, 33, 31, 30, 29, 28, 28, 27, 23, 22, 22, 19, 16, 11, 10, 3, 3, 2, 1]) == 1162\nassert solution.minimumCost([80, 75, 67, 67, 63, 60, 55, 50, 40, 33, 4, 3]) == 427\nassert solution.minimumCost([100, 93, 88, 85, 73, 72, 69, 68, 66, 56, 56, 49, 39, 38, 26, 26, 23, 19, 14, 13, 11, 7, 4]) == 764\nassert solution.minimumCost([99, 95, 95, 95, 94, 91, 91, 91, 91, 90, 87, 87, 86, 83, 83, 81, 80, 80, 79, 79, 78, 77, 75, 74, 72, 71, 69, 66, 66, 64, 64, 60, 57, 57, 53, 50, 49, 49, 47, 46, 45, 44, 44, 43, 42, 41, 41, 41, 40, 38, 37, 35, 35, 35, 34, 29, 26, 26, 26, 23, 23, 22, 20, 19, 19, 17, 16, 15, 14, 13, 12, 11, 11, 9, 8, 8, 7, 6, 6, 6, 4, 2, 2, 2, 1, 1]) == 2704\nassert solution.minimumCost([95, 94, 94, 93, 91, 90, 87, 82, 80, 76, 75, 73, 73, 72, 72, 69, 69, 67, 66, 62, 56, 55, 55, 51, 47, 45, 45, 43, 42, 42, 41, 41, 34, 32, 31, 30, 24, 20, 19, 17, 16, 16, 14, 13, 12, 12, 12, 9, 9, 7, 4, 4, 1]) == 1685\nassert solution.minimumCost([100, 98, 98, 98, 93, 93, 92, 91, 90, 87, 86, 86, 86, 82, 82, 80, 79, 76, 76, 66, 61, 61, 59, 59, 58, 55, 54, 52, 52, 51, 51, 50, 48, 46, 46, 42, 41, 34, 33, 30, 29, 25, 22, 20, 19, 19, 16, 15, 15, 14, 12, 10, 7, 4, 3, 3]) == 2007\nassert solution.minimumCost([99, 95, 94, 87, 84, 81, 78, 73, 72, 66, 66, 61, 61, 57, 50, 49, 47, 43, 40, 39, 38, 37, 37, 31, 26, 23, 17, 11, 11, 9, 1]) == 1087\nassert solution.minimumCost([100, 97, 94, 94, 94, 93, 91, 91, 85, 85, 83, 81, 81, 80, 79, 78, 77, 76, 74, 74, 69, 68, 67, 65, 62, 62, 61, 60, 59, 59, 56, 55, 40, 36, 35, 34, 32, 31, 28, 27, 26, 25, 24, 23, 23, 21, 21, 19, 19, 16, 11, 6, 5, 4, 3, 3]) == 2016\nassert solution.minimumCost([100, 98, 93, 92, 92, 91, 90, 88, 87, 87, 87, 87, 86, 84, 84, 84, 81, 81, 79, 78, 78, 78, 77, 76, 75, 75, 74, 73, 71, 70, 67, 63, 63, 63, 62, 60, 60, 59, 58, 57, 53, 52, 49, 45, 45, 44, 41, 40, 39, 39, 38, 37, 33, 30, 29, 29, 28, 28, 27, 27, 23, 23, 23, 22, 21, 20, 19, 19, 19, 18, 17, 17, 16, 16, 16, 13, 13, 13, 12, 12, 12, 4, 2]) == 2849\nassert solution.minimumCost([97, 93, 92, 89, 76, 72, 72, 72, 71, 67, 63, 60, 56, 47, 44, 44, 34, 29, 28, 27, 24, 20, 16, 15, 12, 6, 2, 1]) == 920\nassert solution.minimumCost([98, 94, 92, 91, 89, 89, 86, 84, 84, 83, 79, 77, 74, 74, 71, 71, 69, 69, 68, 66, 63, 62, 60, 59, 59, 44, 38, 33, 30, 30, 26, 26, 24, 19, 14, 13, 9, 8, 3, 3, 3, 2, 2, 1, 1]) == 1525\nassert solution.minimumCost([96, 94, 93, 87, 84, 82, 73, 61, 61, 61, 60, 57, 54, 51, 50, 48, 43, 43, 37, 36, 35, 34, 32, 29, 27, 23, 6, 6]) == 1007\nassert solution.minimumCost([99, 99, 92, 91, 89, 89, 79, 78, 74, 73, 70, 68, 68, 67, 63, 63, 61, 60, 60, 59, 57, 57, 55, 54, 53, 51, 47, 44, 42, 41, 39, 37, 37, 37, 36, 36, 35, 34, 34, 30, 27, 24, 21, 18, 17, 16, 15, 14, 14, 13, 11, 11, 10, 6, 4, 3, 3, 2]) == 1760\nassert solution.minimumCost([100, 100, 99, 96, 96, 92, 90, 90, 89, 88, 81, 80, 80, 77, 75, 73, 71, 71, 70, 68, 68, 68, 67, 62, 61, 56, 54, 53, 52, 49, 48, 48, 47, 44, 41, 41, 39, 38, 34, 33, 33, 31, 29, 29, 29, 27, 27, 26, 26, 24, 24, 23, 23, 19, 16, 16, 15, 15, 15, 14, 12, 9, 8, 7, 6, 6, 1, 1]) == 2167\nassert solution.minimumCost([99, 97, 97, 95, 94, 93, 93, 93, 91, 83, 82, 81, 81, 80, 80, 76, 76, 72, 71, 71, 70, 69, 69, 69, 68, 65, 64, 63, 61, 61, 61, 59, 58, 58, 58, 57, 50, 47, 47, 46, 44, 44, 43, 41, 41, 41, 41, 39, 38, 38, 38, 36, 36, 33, 32, 32, 31, 30, 25, 23, 22, 18, 16, 15, 14, 14, 11, 9, 8, 4, 3, 2]) == 2538\nassert solution.minimumCost([99, 97, 97, 95, 90, 88, 87, 85, 84, 84, 81, 79, 78, 76, 75, 74, 70, 70, 70, 66, 64, 61, 60, 58, 57, 57, 54, 52, 52, 51, 51, 50, 50, 48, 48, 48, 47, 47, 46, 46, 46, 46, 45, 45, 44, 41, 39, 35, 31, 30, 29, 26, 25, 24, 24, 24, 22, 19, 18, 18, 16, 15, 13, 12, 12, 12, 11, 10, 8, 8, 7, 7, 6, 4, 3, 2, 2, 1]) == 2346\nassert solution.minimumCost([97, 97, 97, 96, 94, 94, 93, 93, 89, 89, 87, 86, 85, 81, 80, 79, 79, 78, 77, 76, 74, 73, 69, 67, 66, 65, 62, 60, 59, 57, 56, 52, 52, 52, 52, 50, 49, 49, 47, 46, 46, 44, 43, 42, 35, 35, 34, 32, 31, 31, 29, 28, 27, 26, 26, 25, 22, 19, 19, 14, 10, 7, 7, 2]) == 2396\nassert solution.minimumCost([100, 99, 98, 97, 96, 95, 94, 93, 92, 91, 91, 91, 90, 90, 89, 85, 84, 80, 79, 76, 71, 68, 67, 66, 63, 58, 55, 53, 52, 52, 50, 50, 49, 47, 47, 47, 47, 46, 43, 41, 40, 40, 36, 35, 32, 31, 30, 30, 30, 30, 29, 28, 27, 27, 26, 25, 25, 24, 23, 23, 21, 20, 20, 18, 17, 17, 17, 16, 16, 14, 13, 13, 11, 10, 9, 9, 8, 6, 2, 2, 1]) == 2517\nassert solution.minimumCost([99, 99, 96, 96, 95, 94, 93, 93, 92, 92, 91, 90, 89, 88, 87, 86, 84, 84, 82, 81, 79, 74, 73, 72, 71, 67, 66, 65, 64, 64, 63, 62, 62, 61, 60, 60, 59, 56, 56, 54, 54, 54, 53, 51, 51, 50, 50, 49, 47, 46, 44, 44, 41, 39, 38, 38, 37, 36, 36, 33, 33, 32, 32, 30, 29, 28, 26, 26, 24, 23, 22, 21, 20, 17, 15, 10, 10, 10, 8, 7, 6, 6, 6, 6, 4, 4, 4, 2, 2]) == 2998",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minimumCost([1, 2, 3]) == 5\nassert solution.minimumCost([6, 5, 7, 9, 2, 2]) == 23\nassert solution.minimumCost([5, 5]) == 10\n",
        "algorithms": [
            "greedy",
            "sorting"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 1217,
        "task_name": "Minimum Cost to Move Chips to The Same Position",
        "description": "\n\n<p>We have <code>n</code> chips, where the position of the <code>i<sup>th</sup></code> chip is <code>position[i]</code>.</p>\n\n<p>We need to move all the chips to <strong>the same position</strong>. In one step, we can change the position of the <code>i<sup>th</sup></code> chip from <code>position[i]</code> to:</p>\n\n<ul>\n\t<li><code>position[i] + 2</code> or <code>position[i] - 2</code> with <code>cost = 0</code>.</li>\n\t<li><code>position[i] + 1</code> or <code>position[i] - 1</code> with <code>cost = 1</code>.</li>\n</ul>\n\n<p>Return <em>the minimum cost</em> needed to move all the chips to the same position.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1217.Minimum%20Cost%20to%20Move%20Chips%20to%20The%20Same%20Position/images/chips_e1.jpg\" style=\"width: 750px; height: 217px;\" />\n<pre>\n<strong>Input:</strong> position = [1,2,3]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1217.Minimum%20Cost%20to%20Move%20Chips%20to%20The%20Same%20Position/images/chip_e2.jpg\" style=\"width: 750px; height: 306px;\" />\n<pre>\n<strong>Input:</strong> position = [2,2,2,3,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> position = [1,1000000000]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= position.length &lt;= 100</code></li>\n\t<li><code>1 &lt;= position[i] &lt;= 10^9</code></li>\n</ul>\n\n",
        "markdown_description": "\nWe have `n` chips, where the position of the `ith` chip is `position[i]`.\n\n\nWe need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to:\n\n\n* `position[i] + 2` or `position[i] - 2` with `cost = 0`.\n* `position[i] + 1` or `position[i] - 1` with `cost = 1`.\n\n\nReturn *the minimum cost* needed to move all the chips to the same position.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1217.Minimum%20Cost%20to%20Move%20Chips%20to%20The%20Same%20Position/images/chips_e1.jpg)\n\n```\n\n**Input:** position = [1,2,3]\n**Output:** 1\n**Explanation:** First step: Move the chip at position 3 to position 1 with cost = 0.\nSecond step: Move the chip at position 2 to position 1 with cost = 1.\nTotal cost is 1.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/1200-1299/1217.Minimum%20Cost%20to%20Move%20Chips%20to%20The%20Same%20Position/images/chip_e2.jpg)\n\n```\n\n**Input:** position = [2,2,2,3,3]\n**Output:** 2\n**Explanation:** We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** position = [1,1000000000]\n**Output:** 1\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= position.length <= 100`\n* `1 <= position[i] <= 10^9`\n\n\n",
        "canonical_solution": "class Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        a = sum(p % 2 for p in position)\n        b = len(position) - a\n        return min(a, b)\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minCostToMoveChips(self, position: List[int]) -> int:\n        a = sum(p % 2 for p in position)\n        b = len(position) - a\n        return min(a, b)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random positions\n    position = random.sample(range(1, 101), random.randint(1, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCostToMoveChips(position)\n\n    return position, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        position, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCostToMoveChips(position) == expected_result\n        print(f\"assert solution.minCostToMoveChips({position}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minCostToMoveChips({position}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minCostToMoveChips([36, 19]) == 1\nassert solution.minCostToMoveChips([11, 61, 20]) == 1\nassert solution.minCostToMoveChips([38, 53, 50, 31, 75, 22, 74, 25, 71]) == 4\nassert solution.minCostToMoveChips([18, 70, 31, 78, 23, 13, 29, 7]) == 3\nassert solution.minCostToMoveChips([5, 87, 39]) == 0\nassert solution.minCostToMoveChips([92, 32, 66, 9, 18, 10, 62, 55, 3, 22]) == 3\nassert solution.minCostToMoveChips([80]) == 0\nassert solution.minCostToMoveChips([7, 40, 92, 86, 45]) == 2\nassert solution.minCostToMoveChips([51, 1, 59, 90]) == 1\nassert solution.minCostToMoveChips([69, 88, 68, 16, 78, 83, 12, 13, 96, 57]) == 4\nassert solution.minCostToMoveChips([42, 41, 55, 59]) == 1\nassert solution.minCostToMoveChips([56]) == 0\nassert solution.minCostToMoveChips([48, 74, 70, 69]) == 1\nassert solution.minCostToMoveChips([8, 22, 70, 68]) == 0\nassert solution.minCostToMoveChips([4, 41, 88, 22]) == 1\nassert solution.minCostToMoveChips([60, 81, 54, 65, 31, 16, 93, 32]) == 4\nassert solution.minCostToMoveChips([26, 60, 75, 62, 89, 96, 78, 80, 54, 5]) == 3\nassert solution.minCostToMoveChips([1]) == 0\nassert solution.minCostToMoveChips([40, 91, 90, 17]) == 2\nassert solution.minCostToMoveChips([5, 79, 3, 90, 29, 1, 72, 7, 31, 58]) == 3\nassert solution.minCostToMoveChips([89, 2, 75]) == 1\nassert solution.minCostToMoveChips([30, 62, 19, 83, 29, 17, 22]) == 3\nassert solution.minCostToMoveChips([74, 47, 33, 8, 77, 87, 32]) == 3\nassert solution.minCostToMoveChips([91, 92, 16, 89, 39, 52, 37, 82, 46, 41]) == 5\nassert solution.minCostToMoveChips([79, 69, 31, 77, 38]) == 1\nassert solution.minCostToMoveChips([7, 42, 35, 68, 37, 61, 19, 12]) == 3\nassert solution.minCostToMoveChips([10, 75, 7, 26, 78, 80, 61]) == 3\nassert solution.minCostToMoveChips([29, 26, 92, 20]) == 1\nassert solution.minCostToMoveChips([59, 29, 73, 60, 8, 50, 14]) == 3\nassert solution.minCostToMoveChips([24, 44, 70, 42]) == 0\nassert solution.minCostToMoveChips([38, 83]) == 1\nassert solution.minCostToMoveChips([21, 33, 50, 100, 94, 37, 99]) == 3\nassert solution.minCostToMoveChips([77, 6, 98, 73, 33, 8, 20, 70, 9, 34]) == 4\nassert solution.minCostToMoveChips([56, 4, 52, 21, 22, 91, 35, 75, 25]) == 4\nassert solution.minCostToMoveChips([4, 89, 23, 5, 83]) == 1\nassert solution.minCostToMoveChips([33, 97, 60, 10, 71]) == 2\nassert solution.minCostToMoveChips([47, 73, 53, 54, 34, 65, 11, 92, 26, 28]) == 5\nassert solution.minCostToMoveChips([55, 97, 70, 52, 14, 67, 54, 12, 10, 82]) == 3\nassert solution.minCostToMoveChips([97, 9, 1, 86, 98]) == 2\nassert solution.minCostToMoveChips([65]) == 0\nassert solution.minCostToMoveChips([86, 26, 97, 95, 58, 84]) == 2\nassert solution.minCostToMoveChips([9, 45, 47, 36, 8, 53, 72, 2, 31]) == 4\nassert solution.minCostToMoveChips([93, 47, 36, 75]) == 1\nassert solution.minCostToMoveChips([94, 61]) == 1\nassert solution.minCostToMoveChips([18, 5, 82, 58, 37]) == 2\nassert solution.minCostToMoveChips([98]) == 0\nassert solution.minCostToMoveChips([58, 44, 88, 92, 18, 15, 80, 91]) == 2\nassert solution.minCostToMoveChips([68, 30, 66, 44, 9]) == 1\nassert solution.minCostToMoveChips([83, 2, 38]) == 1\nassert solution.minCostToMoveChips([12, 9, 63, 34, 48, 86, 74, 72, 67]) == 3\nassert solution.minCostToMoveChips([93, 62, 34]) == 1\nassert solution.minCostToMoveChips([90, 95, 78, 49, 68, 96]) == 2\nassert solution.minCostToMoveChips([44]) == 0\nassert solution.minCostToMoveChips([25, 66, 79, 6, 49, 55, 31, 88, 91, 20]) == 4\nassert solution.minCostToMoveChips([44, 72, 97]) == 1\nassert solution.minCostToMoveChips([97, 35, 77, 39, 65, 41, 63, 29, 87, 20]) == 1\nassert solution.minCostToMoveChips([23, 50, 46, 25, 32, 52, 98, 61, 4, 17]) == 4\nassert solution.minCostToMoveChips([67, 48, 60, 13]) == 2\nassert solution.minCostToMoveChips([62, 13, 29, 34]) == 2\nassert solution.minCostToMoveChips([21, 79, 77, 57, 98, 82, 65, 86, 53]) == 3\nassert solution.minCostToMoveChips([50, 47, 63]) == 1\nassert solution.minCostToMoveChips([50, 69, 3, 100, 2]) == 2\nassert solution.minCostToMoveChips([15, 95, 18, 13, 30, 61, 73, 91]) == 2\nassert solution.minCostToMoveChips([57, 7, 91, 56]) == 1\nassert solution.minCostToMoveChips([49, 14, 70, 35, 56, 59, 32, 3, 16, 34]) == 4\nassert solution.minCostToMoveChips([57, 70]) == 1\nassert solution.minCostToMoveChips([89, 74, 24, 12, 53]) == 2\nassert solution.minCostToMoveChips([88, 35, 29, 16, 8, 76, 44]) == 2\nassert solution.minCostToMoveChips([1, 37, 99, 10, 72, 4]) == 3\nassert solution.minCostToMoveChips([50, 38, 24, 33, 100, 5]) == 2\nassert solution.minCostToMoveChips([57, 23]) == 0\nassert solution.minCostToMoveChips([58, 34, 23, 97]) == 2\nassert solution.minCostToMoveChips([94, 73, 12, 64, 97, 42, 71, 63, 96, 58]) == 4\nassert solution.minCostToMoveChips([1, 37, 92, 52, 34, 53, 41, 69, 59, 55]) == 3\nassert solution.minCostToMoveChips([51]) == 0\nassert solution.minCostToMoveChips([15, 46, 49, 96, 61, 57, 86, 12, 76, 83]) == 5\nassert solution.minCostToMoveChips([100, 79, 83, 13]) == 1\nassert solution.minCostToMoveChips([28, 87, 56, 62, 64, 69, 55]) == 3\nassert solution.minCostToMoveChips([41, 11, 91, 6, 62]) == 2\nassert solution.minCostToMoveChips([74, 56, 26, 75, 54, 31, 79, 60]) == 3\nassert solution.minCostToMoveChips([83, 45, 6, 52]) == 2\nassert solution.minCostToMoveChips([52, 89, 81]) == 1\nassert solution.minCostToMoveChips([51, 40, 89, 15, 62]) == 2\nassert solution.minCostToMoveChips([72]) == 0\nassert solution.minCostToMoveChips([4, 89, 75, 79, 48, 77, 1, 100, 19, 3]) == 3\nassert solution.minCostToMoveChips([86, 71, 84, 9, 5, 26]) == 3\nassert solution.minCostToMoveChips([32]) == 0\nassert solution.minCostToMoveChips([97]) == 0\nassert solution.minCostToMoveChips([47, 28, 16, 12, 7, 56, 9, 15, 37, 20]) == 5\nassert solution.minCostToMoveChips([22]) == 0\nassert solution.minCostToMoveChips([36]) == 0\nassert solution.minCostToMoveChips([55, 60, 78]) == 1\nassert solution.minCostToMoveChips([56, 23, 34]) == 1\nassert solution.minCostToMoveChips([78]) == 0\nassert solution.minCostToMoveChips([87, 91]) == 0\nassert solution.minCostToMoveChips([36, 43]) == 1\nassert solution.minCostToMoveChips([33, 63, 34]) == 1\nassert solution.minCostToMoveChips([83, 97, 85, 43]) == 0\nassert solution.minCostToMoveChips([11, 23, 88, 36, 30]) == 2\nassert solution.minCostToMoveChips([20, 13, 30]) == 1",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minCostToMoveChips([1,2,3]) == 1\nassert solution.minCostToMoveChips([2,2,2,3,3]) == 2\nassert solution.minCostToMoveChips([1,1000000000]) == 1\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 409,
        "task_name": "Longest Palindrome",
        "description": "\n\n<p>Given a string <code>s</code> which consists of lowercase or uppercase letters, return <em>the length of the <strong>longest palindrome</strong></em>&nbsp;that can be built with those letters.</p>\n\n<p>Letters are <strong>case sensitive</strong>, for example,&nbsp;<code>&quot;Aa&quot;</code> is not considered a palindrome here.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;abccccdd&quot;\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> One longest palindrome that can be built is &quot;dccaccd&quot;, whose length is 7.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;a&quot;\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The longest palindrome that can be built is &quot;a&quot;, whose length is 1.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists of lowercase <strong>and/or</strong> uppercase English&nbsp;letters only.</li>\n</ul>\n\n",
        "markdown_description": "\nGiven a string `s` which consists of lowercase or uppercase letters, return *the length of the **longest palindrome***\u00a0that can be built with those letters.\n\n\nLetters are **case sensitive**, for example,\u00a0`\"Aa\"` is not considered a palindrome here.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"abccccdd\"\n**Output:** 7\n**Explanation:** One longest palindrome that can be built is \"dccaccd\", whose length is 7.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"a\"\n**Output:** 1\n**Explanation:** The longest palindrome that can be built is \"a\", whose length is 1.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists of lowercase **and/or** uppercase English\u00a0letters only.\n\n\n",
        "canonical_solution": "class Solution:\n    def longestPalindrome(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        for v in cnt.values():\n            ans += v - (v & 1)\n            ans += (ans & 1 ^ 1) and (v & 1)\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom collections import Counter\n\nclass Solution:\n    def longestPalindrome(self, s: str) -> int:\n        cnt = Counter(s)\n        ans = 0\n        for v in cnt.values():\n            ans += v - (v & 1)\n            ans += (ans & 1 ^ 1) and (v & 1)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.longestPalindrome(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.longestPalindrome(s) == expected_result\n        print(f'assert solution.longestPalindrome(\"{s}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.longestPalindrome(\"{s}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.longestPalindrome(\"GxyDLlAh\") == 1\nassert solution.longestPalindrome(\"HcEbNV\") == 1\nassert solution.longestPalindrome(\"DNQeW\") == 1\nassert solution.longestPalindrome(\"Rm\") == 1\nassert solution.longestPalindrome(\"aMOqIUDZZ\") == 3\nassert solution.longestPalindrome(\"WHtu\") == 1\nassert solution.longestPalindrome(\"IKOqqJaucR\") == 3\nassert solution.longestPalindrome(\"ig\") == 1\nassert solution.longestPalindrome(\"LeUzsYoEbT\") == 1\nassert solution.longestPalindrome(\"XgZSa\") == 1\nassert solution.longestPalindrome(\"YVxpSr\") == 1\nassert solution.longestPalindrome(\"uTSVyofy\") == 3\nassert solution.longestPalindrome(\"oENUy\") == 1\nassert solution.longestPalindrome(\"f\") == 1\nassert solution.longestPalindrome(\"E\") == 1\nassert solution.longestPalindrome(\"fzNDsJ\") == 1\nassert solution.longestPalindrome(\"mN\") == 1\nassert solution.longestPalindrome(\"rI\") == 1\nassert solution.longestPalindrome(\"oBbosiCYs\") == 5\nassert solution.longestPalindrome(\"pK\") == 1\nassert solution.longestPalindrome(\"dNw\") == 1\nassert solution.longestPalindrome(\"pdGJJclhF\") == 3\nassert solution.longestPalindrome(\"hLfgZ\") == 1\nassert solution.longestPalindrome(\"sVKmuaeuQG\") == 3\nassert solution.longestPalindrome(\"suYnZmKrt\") == 1\nassert solution.longestPalindrome(\"WAG\") == 1\nassert solution.longestPalindrome(\"kG\") == 1\nassert solution.longestPalindrome(\"ih\") == 1\nassert solution.longestPalindrome(\"iB\") == 1\nassert solution.longestPalindrome(\"gpu\") == 1\nassert solution.longestPalindrome(\"mVQsrMf\") == 1\nassert solution.longestPalindrome(\"Ld\") == 1\nassert solution.longestPalindrome(\"gRu\") == 1\nassert solution.longestPalindrome(\"utBH\") == 1\nassert solution.longestPalindrome(\"gLcMUCH\") == 1\nassert solution.longestPalindrome(\"QuuAaPQJ\") == 5\nassert solution.longestPalindrome(\"nWqtUfCs\") == 1\nassert solution.longestPalindrome(\"NNrGZ\") == 3\nassert solution.longestPalindrome(\"YeBA\") == 1\nassert solution.longestPalindrome(\"B\") == 1\nassert solution.longestPalindrome(\"g\") == 1\nassert solution.longestPalindrome(\"csCBgple\") == 1\nassert solution.longestPalindrome(\"ruKYUiZyF\") == 1\nassert solution.longestPalindrome(\"Mct\") == 1\nassert solution.longestPalindrome(\"UtJbblK\") == 3\nassert solution.longestPalindrome(\"PNDtlcAPLM\") == 3\nassert solution.longestPalindrome(\"wbgB\") == 1\nassert solution.longestPalindrome(\"F\") == 1\nassert solution.longestPalindrome(\"FvFi\") == 3\nassert solution.longestPalindrome(\"esERdj\") == 1\nassert solution.longestPalindrome(\"cAxNAht\") == 3\nassert solution.longestPalindrome(\"dgBRVk\") == 1\nassert solution.longestPalindrome(\"vaGRLv\") == 3\nassert solution.longestPalindrome(\"vZp\") == 1\nassert solution.longestPalindrome(\"vkfXfx\") == 3\nassert solution.longestPalindrome(\"vwuHH\") == 3\nassert solution.longestPalindrome(\"ZYfi\") == 1\nassert solution.longestPalindrome(\"T\") == 1\nassert solution.longestPalindrome(\"IzdYDFaQV\") == 1\nassert solution.longestPalindrome(\"ZKSocSBIHS\") == 3\nassert solution.longestPalindrome(\"r\") == 1\nassert solution.longestPalindrome(\"RIM\") == 1\nassert solution.longestPalindrome(\"hwtyCpSr\") == 1\nassert solution.longestPalindrome(\"B\") == 1\nassert solution.longestPalindrome(\"ngF\") == 1\nassert solution.longestPalindrome(\"KBiuCkFQJ\") == 1\nassert solution.longestPalindrome(\"ESginoagsp\") == 3\nassert solution.longestPalindrome(\"x\") == 1\nassert solution.longestPalindrome(\"UGeMpu\") == 1\nassert solution.longestPalindrome(\"oM\") == 1\nassert solution.longestPalindrome(\"zhAzOTU\") == 3\nassert solution.longestPalindrome(\"rm\") == 1\nassert solution.longestPalindrome(\"W\") == 1\nassert solution.longestPalindrome(\"wTf\") == 1\nassert solution.longestPalindrome(\"Uh\") == 1\nassert solution.longestPalindrome(\"NVMTWj\") == 1\nassert solution.longestPalindrome(\"xllqx\") == 5\nassert solution.longestPalindrome(\"mSYqucQZ\") == 1\nassert solution.longestPalindrome(\"nc\") == 1\nassert solution.longestPalindrome(\"NmEdWL\") == 1\nassert solution.longestPalindrome(\"ji\") == 1\nassert solution.longestPalindrome(\"mTng\") == 1\nassert solution.longestPalindrome(\"MWB\") == 1\nassert solution.longestPalindrome(\"p\") == 1\nassert solution.longestPalindrome(\"lOZdZD\") == 3\nassert solution.longestPalindrome(\"ZRPmTOObzh\") == 3\nassert solution.longestPalindrome(\"iD\") == 1\nassert solution.longestPalindrome(\"eaARO\") == 1\nassert solution.longestPalindrome(\"GoGSCG\") == 3\nassert solution.longestPalindrome(\"Hki\") == 1\nassert solution.longestPalindrome(\"YQjMohunH\") == 1\nassert solution.longestPalindrome(\"mXaURIS\") == 1\nassert solution.longestPalindrome(\"v\") == 1\nassert solution.longestPalindrome(\"iTTzsg\") == 3\nassert solution.longestPalindrome(\"QAC\") == 1\nassert solution.longestPalindrome(\"cCW\") == 1\nassert solution.longestPalindrome(\"SyR\") == 1\nassert solution.longestPalindrome(\"uCKQvx\") == 1\nassert solution.longestPalindrome(\"UVtYfIQsyU\") == 3\nassert solution.longestPalindrome(\"VAGueWdib\") == 1",
        "small_test_cases": "\nsolution = Solution()\nassert solution.longestPalindrome(\"abccccdd\") == 7\nassert solution.longestPalindrome(\"a\") == 1\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2389,
        "task_name": "Longest Subsequence With Limited Sum",
        "description": "\n\n<p>You are given an integer array <code>nums</code> of length <code>n</code>, and an integer array <code>queries</code> of length <code>m</code>.</p>\n\n<p>Return <em>an array </em><code>answer</code><em> of length </em><code>m</code><em> where </em><code>answer[i]</code><em> is the <strong>maximum</strong> size of a <strong>subsequence</strong> that you can take from </em><code>nums</code><em> such that the <strong>sum</strong> of its elements is less than or equal to </em><code>queries[i]</code>.</p>\n\n<p>A <strong>subsequence</strong> is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [4,5,2,1], queries = [3,10,21]\n<strong>Output:</strong> [2,3,4]\n<strong>Explanation:</strong> We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,3,4,5], queries = [1]\n<strong>Output:</strong> [0]\n<strong>Explanation:</strong> The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length</code></li>\n\t<li><code>m == queries.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 1000</code></li>\n\t<li><code>1 &lt;= nums[i], queries[i] &lt;= 10<sup>6</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given an integer array `nums` of length `n`, and an integer array `queries` of length `m`.\n\n\nReturn *an array* `answer` *of length* `m` *where* `answer[i]` *is the **maximum** size of a **subsequence** that you can take from* `nums` *such that the **sum** of its elements is less than or equal to* `queries[i]`.\n\n\nA **subsequence** is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [4,5,2,1], queries = [3,10,21]\n**Output:** [2,3,4]\n**Explanation:** We answer the queries as follows:\n- The subsequence [2,1] has a sum less than or equal to 3. It can be proven that 2 is the maximum size of such a subsequence, so answer[0] = 2.\n- The subsequence [4,5,1] has a sum less than or equal to 10. It can be proven that 3 is the maximum size of such a subsequence, so answer[1] = 3.\n- The subsequence [4,5,2,1] has a sum less than or equal to 21. It can be proven that 4 is the maximum size of such a subsequence, so answer[2] = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,3,4,5], queries = [1]\n**Output:** [0]\n**Explanation:** The empty subsequence is the only subsequence that has a sum less than or equal to 1, so answer[0] = 0.\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length`\n* `m == queries.length`\n* `1 <= n, m <= 1000`\n* `1 <= nums[i], queries[i] <= 106`\n\n\n",
        "canonical_solution": "class Solution:\n    def answerQueries(self, nums: List[int], queries: List[int]) -> List[int]:\n        nums.sort()\n        s = list(accumulate(nums))\n        return [bisect_right(s, q) for q in queries]\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def answerQueries(self, nums, queries):\n        nums.sort()\n        s = list(accumulate(nums))\n        return [bisect_right(s, q) for q in queries]\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random integer arrays\n    nums = random.choices(range(1, 100), k=random.randint(2, 10))\n    queries = random.choices(range(1, 100), k=random.randint(1, 5))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.answerQueries(nums, queries)\n\n    return nums, queries, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, queries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.answerQueries(nums, queries) == expected_result\n        print(f\"assert solution.answerQueries({nums}, {queries}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.answerQueries({nums}, {queries}) == {expected_result}\")\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.answerQueries([9, 12, 13, 23, 23, 24, 42, 47, 54, 91], [26, 90, 87, 47]) == [2, 5, 5, 3]\nassert solution.answerQueries([43, 54, 69], [98, 90, 72, 57]) == [2, 1, 1, 1]\nassert solution.answerQueries([32, 37, 40, 86], [82]) == [2]\nassert solution.answerQueries([11, 12, 24, 26, 27, 60, 76, 76, 96, 96], [40, 57]) == [2, 3]\nassert solution.answerQueries([9, 9, 21, 64, 69, 74, 90, 95, 97], [52, 58]) == [3, 3]\nassert solution.answerQueries([5, 7, 7, 14, 27, 28, 36, 39, 90, 96], [64, 2, 18, 4, 73]) == [5, 0, 2, 0, 5]\nassert solution.answerQueries([10, 17, 24, 33, 40, 67, 71, 88, 98], [79, 53, 7]) == [3, 3, 0]\nassert solution.answerQueries([36, 59, 91], [92, 98, 1]) == [1, 2, 0]\nassert solution.answerQueries([25, 46, 46, 49, 78], [75, 58, 99, 97]) == [2, 1, 2, 2]\nassert solution.answerQueries([51, 90], [39, 95, 17]) == [0, 1, 0]\nassert solution.answerQueries([2, 10, 33, 47, 75, 79, 85, 85], [10, 71, 87, 41]) == [1, 3, 3, 2]\nassert solution.answerQueries([1, 4, 9, 17, 86, 92, 99], [20, 18]) == [3, 3]\nassert solution.answerQueries([16, 17, 22, 25, 35, 45], [91]) == [4]\nassert solution.answerQueries([1, 6, 50, 72, 74, 84, 89, 95, 98], [37]) == [2]\nassert solution.answerQueries([4, 14, 24, 27, 31, 70, 70, 71, 85, 85], [34, 98]) == [2, 4]\nassert solution.answerQueries([1, 15, 37, 57, 86, 87, 92], [97, 29]) == [3, 2]\nassert solution.answerQueries([7, 20, 26, 33, 51, 52, 56, 61, 63, 90], [36]) == [2]\nassert solution.answerQueries([1, 1, 7, 26, 33, 80, 91], [75, 13]) == [5, 3]\nassert solution.answerQueries([25, 82, 87, 92], [80]) == [1]\nassert solution.answerQueries([8, 8, 20, 40, 62, 70, 71, 83], [12, 19]) == [1, 2]\nassert solution.answerQueries([31, 51, 55, 56, 83, 86, 88, 97], [31, 56]) == [1, 1]\nassert solution.answerQueries([4, 31, 50, 60], [91, 73, 99, 35, 49]) == [3, 2, 3, 2, 2]\nassert solution.answerQueries([5, 16, 34, 50, 69, 70, 79, 82, 86], [16, 72, 30, 58]) == [1, 3, 2, 3]\nassert solution.answerQueries([18, 37, 51, 97], [11, 59]) == [0, 2]\nassert solution.answerQueries([78, 89, 96], [38, 58, 53, 25, 26]) == [0, 0, 0, 0, 0]\nassert solution.answerQueries([1, 6, 17, 33, 35, 55, 57, 57, 74], [55, 1, 11, 16]) == [3, 1, 2, 2]\nassert solution.answerQueries([2, 10, 20, 21, 34, 57, 72, 82, 97], [31]) == [2]\nassert solution.answerQueries([49, 53, 54], [59]) == [1]\nassert solution.answerQueries([15, 16, 18, 37, 55, 58, 65, 88], [92, 1, 87]) == [4, 0, 4]\nassert solution.answerQueries([14, 17, 31, 36, 54, 84, 87, 89, 91], [71, 30]) == [3, 1]\nassert solution.answerQueries([5, 13, 14, 17, 49, 55, 76, 79], [79, 12]) == [4, 1]\nassert solution.answerQueries([7, 72], [42, 72, 71, 88, 6]) == [1, 1, 1, 2, 0]\nassert solution.answerQueries([30, 40, 60, 62, 91], [11]) == [0]\nassert solution.answerQueries([55, 69], [78, 48, 70, 87]) == [1, 0, 1, 1]\nassert solution.answerQueries([3, 43, 67, 77, 80], [94, 70, 95, 57, 70]) == [2, 2, 2, 2, 2]\nassert solution.answerQueries([8, 24, 32, 88], [59, 10, 2, 54]) == [2, 1, 0, 2]\nassert solution.answerQueries([3, 26, 44, 60, 68, 75], [94]) == [3]\nassert solution.answerQueries([7, 8, 28, 45, 48, 71], [89, 75, 70, 93]) == [4, 3, 3, 4]\nassert solution.answerQueries([1, 9, 49, 62, 79, 96], [71, 50, 64, 50]) == [3, 2, 3, 2]\nassert solution.answerQueries([4, 13, 17, 35, 53, 76, 86, 95, 96, 98], [48, 9, 64, 56]) == [3, 1, 3, 3]\nassert solution.answerQueries([13, 13, 46, 52], [79]) == [3]\nassert solution.answerQueries([2, 4, 30, 53, 55, 68, 71, 94, 99], [2, 23, 63]) == [1, 2, 3]\nassert solution.answerQueries([5, 13, 27, 28, 32, 57, 80, 86, 94, 99], [50, 74, 23, 85, 33]) == [3, 4, 2, 4, 2]\nassert solution.answerQueries([5, 19, 36, 79, 82, 87], [42, 60, 89, 7]) == [2, 3, 3, 1]\nassert solution.answerQueries([17, 22, 61, 67, 97], [69, 86, 82, 91, 5]) == [2, 2, 2, 2, 0]\nassert solution.answerQueries([17, 54, 58, 73, 87], [85, 67, 35, 15]) == [2, 1, 1, 0]\nassert solution.answerQueries([25, 39, 46, 61, 64, 86, 94], [93, 57, 99, 69]) == [2, 1, 2, 2]\nassert solution.answerQueries([17, 20, 32, 32, 52, 82, 87], [47, 60, 46, 63]) == [2, 2, 2, 2]\nassert solution.answerQueries([68, 72, 80, 85], [64, 14, 24, 4]) == [0, 0, 0, 0]\nassert solution.answerQueries([11, 73], [44, 56, 52, 77, 35]) == [1, 1, 1, 1, 1]\nassert solution.answerQueries([5, 10, 17, 39, 53, 75, 81, 93], [98]) == [4]\nassert solution.answerQueries([6, 26, 30, 36, 38, 71, 75, 97], [11, 73, 82, 96, 33]) == [1, 3, 3, 3, 2]\nassert solution.answerQueries([7, 17, 95], [61, 67, 7, 38]) == [2, 2, 1, 2]\nassert solution.answerQueries([31, 64], [8, 28, 35, 55]) == [0, 0, 1, 1]\nassert solution.answerQueries([4, 8, 47, 54], [99, 16]) == [3, 2]\nassert solution.answerQueries([14, 14, 19, 29, 35, 64, 65, 79, 79, 81], [79, 78, 4]) == [4, 4, 0]\nassert solution.answerQueries([6, 22, 23, 27, 34, 36, 43, 53, 70], [10, 99, 78]) == [1, 4, 4]\nassert solution.answerQueries([16, 23, 26, 26, 38, 51, 54, 60], [46, 11, 77, 43]) == [2, 0, 3, 2]\nassert solution.answerQueries([3, 8, 16, 46, 71], [52]) == [3]\nassert solution.answerQueries([4, 7, 39, 47, 50, 63, 69], [34, 79, 31]) == [2, 3, 2]\nassert solution.answerQueries([24, 49], [41, 56, 53, 20]) == [1, 1, 1, 0]\nassert solution.answerQueries([2, 4, 32, 51, 54, 78, 88, 95], [34]) == [2]\nassert solution.answerQueries([9, 35, 53, 63, 77, 79, 86, 88], [52, 67]) == [2, 2]\nassert solution.answerQueries([13, 30, 40, 52, 53, 54, 67, 81], [23, 51, 21, 50]) == [1, 2, 1, 2]\nassert solution.answerQueries([36, 40, 67, 68, 71], [97, 63, 40, 20]) == [2, 1, 1, 0]\nassert solution.answerQueries([7, 26, 30, 43, 46, 53, 79, 87, 87, 89], [24, 12, 61, 70]) == [1, 1, 2, 3]\nassert solution.answerQueries([10, 24, 28, 52, 59, 59, 71, 87], [70]) == [3]\nassert solution.answerQueries([42, 59, 78], [37]) == [0]\nassert solution.answerQueries([10, 38, 41, 42, 54, 68, 81, 84], [12, 84, 73]) == [1, 2, 2]\nassert solution.answerQueries([7, 23, 53, 87, 94], [33, 85]) == [2, 3]\nassert solution.answerQueries([25, 45, 69, 79, 81, 91], [72, 55]) == [2, 1]\nassert solution.answerQueries([13, 35, 69], [33, 4]) == [1, 0]\nassert solution.answerQueries([7, 14, 25, 40, 42, 59, 61, 80], [14, 28, 15]) == [1, 2, 1]\nassert solution.answerQueries([49, 54, 55, 63, 96], [49]) == [1]\nassert solution.answerQueries([8, 11, 24, 60, 67, 89, 89, 97, 99, 99], [23, 21, 71]) == [2, 2, 3]\nassert solution.answerQueries([11, 11, 14, 45, 48, 91], [38, 1]) == [3, 0]\nassert solution.answerQueries([63, 70, 73, 79, 80, 88, 99], [89, 92, 55]) == [1, 1, 0]\nassert solution.answerQueries([10, 15, 35, 36, 62, 87, 98], [62, 83, 60]) == [3, 3, 3]\nassert solution.answerQueries([19, 20, 32, 41, 41, 59], [32, 93, 19, 25]) == [1, 3, 1, 1]\nassert solution.answerQueries([25, 97], [26, 3, 38, 60]) == [1, 0, 1, 1]\nassert solution.answerQueries([11, 15, 16, 26, 55, 97], [77, 99]) == [4, 4]\nassert solution.answerQueries([11, 50, 62, 67, 77, 96], [73, 89, 82, 72]) == [2, 2, 2, 2]\nassert solution.answerQueries([9, 38, 71, 77, 86], [56]) == [2]\nassert solution.answerQueries([20, 28, 30, 37, 52, 60], [52]) == [2]\nassert solution.answerQueries([6, 55, 69], [55, 64]) == [1, 2]\nassert solution.answerQueries([9, 39, 40, 50, 63, 64, 71, 73], [67]) == [2]\nassert solution.answerQueries([16, 43, 56, 76, 91, 95, 96], [72, 94, 30, 63]) == [2, 2, 1, 2]\nassert solution.answerQueries([18, 32, 36, 55, 58, 74, 86], [39, 21]) == [1, 1]\nassert solution.answerQueries([7, 13, 31, 32, 39, 72, 75, 83], [2]) == [0]\nassert solution.answerQueries([8, 17, 56, 93], [9, 29]) == [1, 2]\nassert solution.answerQueries([3, 25, 82], [46]) == [2]\nassert solution.answerQueries([5, 13, 47, 56, 79], [6, 9]) == [1, 1]\nassert solution.answerQueries([21, 23, 25, 46, 52, 55, 61, 69], [66, 76, 28, 34, 85]) == [2, 3, 1, 1, 3]\nassert solution.answerQueries([2, 7, 15, 30, 40, 43, 54, 83, 83], [8, 65, 87]) == [1, 4, 4]\nassert solution.answerQueries([21, 37, 38, 66, 72, 76, 90], [69, 62]) == [2, 2]\nassert solution.answerQueries([34, 44, 55, 56, 57, 58, 65, 68, 85, 93], [79, 45]) == [2, 1]\nassert solution.answerQueries([18, 30, 73, 80, 88, 89, 98], [91]) == [2]\nassert solution.answerQueries([6, 24, 27, 45, 50, 57, 97], [80, 96]) == [3, 3]\nassert solution.answerQueries([3, 17, 35, 56, 85, 99], [58, 56, 51, 16]) == [3, 3, 2, 1]\nassert solution.answerQueries([22, 55, 74, 90], [77, 56]) == [2, 1]",
        "small_test_cases": "\nsolution = Solution()\nassert solution.answerQueries([4, 5, 2, 1], [3, 10, 21]) == [2, 3, 4]\nassert solution.answerQueries([2, 3, 4, 5], [1]) == [0]\n",
        "algorithms": [
            "greedy",
            "binary_search",
            "sorting"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2591,
        "task_name": "Distribute Money to Maximum Children",
        "description": "\n\n<p>You are given an integer <code>money</code> denoting the amount of money (in dollars) that you have and another integer <code>children</code> denoting the number of children that you must distribute the money to.</p>\n\n<p>You have to distribute the money according to the following rules:</p>\n\n<ul>\n\t<li>All money must be distributed.</li>\n\t<li>Everyone must receive at least <code>1</code> dollar.</li>\n\t<li>Nobody receives <code>4</code> dollars.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> number of children who may receive <strong>exactly</strong> </em><code>8</code> <em>dollars if you distribute the money according to the aforementioned rules</em>. If there is no way to distribute the money, return <code>-1</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> money = 20, children = 3\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> money = 16, children = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Each child can be given 8 dollars.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= money &lt;= 200</code></li>\n\t<li><code>2 &lt;= children &lt;= 30</code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given an integer `money` denoting the amount of money (in dollars) that you have and another integer `children` denoting the number of children that you must distribute the money to.\n\n\nYou have to distribute the money according to the following rules:\n\n\n* All money must be distributed.\n* Everyone must receive at least `1` dollar.\n* Nobody receives `4` dollars.\n\n\nReturn *the **maximum** number of children who may receive **exactly*** `8` *dollars if you distribute the money according to the aforementioned rules*. If there is no way to distribute the money, return `-1`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** money = 20, children = 3\n**Output:** 1\n**Explanation:** \nThe maximum number of children with 8 dollars will be 1. One of the ways to distribute the money is:\n- 8 dollars to the first child.\n- 9 dollars to the second child. \n- 3 dollars to the third child.\nIt can be proven that no distribution exists such that number of children getting 8 dollars is greater than 1.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** money = 16, children = 2\n**Output:** 2\n**Explanation:** Each child can be given 8 dollars.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= money <= 200`\n* `2 <= children <= 30`\n\n\n",
        "canonical_solution": "class Solution:\n    def distMoney(self, money: int, children: int) -> int:\n        if money < children:\n            return -1\n        if money > 8 * children:\n            return children - 1\n        if money == 8 * children - 4:\n            return children - 2\n        # money-8x >= children-x, x <= (money-children)/7\n        return (money - children) // 7\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def distMoney(self, money: int, children: int) -> int:\n        if money < children:\n            return -1\n        if money > 8 * children:\n            return children - 1\n        if money == 8 * children - 4:\n            return children - 2\n        # money-8x >= children-x, x <= (money-children)/7\n        return (money - children) // 7\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random money and children values\n    money = random.randint(1, 201)\n    children = random.randint(2, 31)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.distMoney(money, children)\n\n    return money, children, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        money, children, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.distMoney(money, children) == expected_result\n        print(f\"assert solution.distMoney({money}, {children}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.distMoney({money}, {children}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.distMoney(33, 14) == 2\nassert solution.distMoney(66, 27) == 5\nassert solution.distMoney(137, 15) == 14\nassert solution.distMoney(105, 23) == 11\nassert solution.distMoney(28, 15) == 1\nassert solution.distMoney(124, 25) == 14\nassert solution.distMoney(33, 20) == 1\nassert solution.distMoney(67, 30) == 5\nassert solution.distMoney(185, 30) == 22\nassert solution.distMoney(129, 2) == 1\nassert solution.distMoney(127, 6) == 5\nassert solution.distMoney(88, 18) == 10\nassert solution.distMoney(161, 22) == 19\nassert solution.distMoney(3, 8) == -1\nassert solution.distMoney(4, 23) == -1\nassert solution.distMoney(100, 23) == 11\nassert solution.distMoney(104, 11) == 10\nassert solution.distMoney(54, 9) == 6\nassert solution.distMoney(162, 25) == 19\nassert solution.distMoney(41, 21) == 2\nassert solution.distMoney(140, 25) == 16\nassert solution.distMoney(114, 16) == 14\nassert solution.distMoney(193, 31) == 23\nassert solution.distMoney(99, 4) == 3\nassert solution.distMoney(47, 7) == 5\nassert solution.distMoney(146, 15) == 14\nassert solution.distMoney(180, 28) == 21\nassert solution.distMoney(106, 22) == 12\nassert solution.distMoney(48, 17) == 4\nassert solution.distMoney(79, 8) == 7\nassert solution.distMoney(38, 9) == 4\nassert solution.distMoney(144, 27) == 16\nassert solution.distMoney(71, 21) == 7\nassert solution.distMoney(159, 27) == 18\nassert solution.distMoney(81, 18) == 9\nassert solution.distMoney(62, 11) == 7\nassert solution.distMoney(144, 13) == 12\nassert solution.distMoney(34, 21) == 1\nassert solution.distMoney(38, 13) == 3\nassert solution.distMoney(38, 20) == 2\nassert solution.distMoney(97, 11) == 10\nassert solution.distMoney(149, 31) == 16\nassert solution.distMoney(130, 19) == 15\nassert solution.distMoney(89, 13) == 10\nassert solution.distMoney(125, 20) == 15\nassert solution.distMoney(123, 31) == 13\nassert solution.distMoney(63, 28) == 5\nassert solution.distMoney(148, 8) == 7\nassert solution.distMoney(183, 26) == 22\nassert solution.distMoney(128, 25) == 14\nassert solution.distMoney(32, 21) == 1\nassert solution.distMoney(175, 18) == 17\nassert solution.distMoney(54, 22) == 4\nassert solution.distMoney(83, 17) == 9\nassert solution.distMoney(87, 26) == 8\nassert solution.distMoney(196, 26) == 24\nassert solution.distMoney(71, 19) == 7\nassert solution.distMoney(53, 4) == 3\nassert solution.distMoney(138, 8) == 7\nassert solution.distMoney(154, 22) == 18\nassert solution.distMoney(82, 27) == 7\nassert solution.distMoney(153, 29) == 17\nassert solution.distMoney(42, 28) == 2\nassert solution.distMoney(95, 11) == 10\nassert solution.distMoney(5, 13) == -1\nassert solution.distMoney(73, 28) == 6\nassert solution.distMoney(50, 30) == 2\nassert solution.distMoney(93, 16) == 11\nassert solution.distMoney(81, 25) == 8\nassert solution.distMoney(144, 10) == 9\nassert solution.distMoney(38, 19) == 2\nassert solution.distMoney(36, 22) == 2\nassert solution.distMoney(83, 30) == 7\nassert solution.distMoney(140, 31) == 15\nassert solution.distMoney(53, 28) == 3\nassert solution.distMoney(58, 19) == 5\nassert solution.distMoney(193, 5) == 4\nassert solution.distMoney(53, 8) == 6\nassert solution.distMoney(6, 18) == -1\nassert solution.distMoney(129, 5) == 4\nassert solution.distMoney(91, 24) == 9\nassert solution.distMoney(94, 3) == 2\nassert solution.distMoney(180, 25) == 22\nassert solution.distMoney(106, 7) == 6\nassert solution.distMoney(93, 26) == 9\nassert solution.distMoney(45, 7) == 5\nassert solution.distMoney(23, 30) == -1\nassert solution.distMoney(69, 9) == 8\nassert solution.distMoney(108, 2) == 1\nassert solution.distMoney(31, 9) == 3\nassert solution.distMoney(18, 22) == -1\nassert solution.distMoney(171, 19) == 18\nassert solution.distMoney(95, 10) == 9\nassert solution.distMoney(175, 31) == 20\nassert solution.distMoney(68, 20) == 6\nassert solution.distMoney(77, 30) == 6\nassert solution.distMoney(168, 21) == 21\nassert solution.distMoney(66, 22) == 6\nassert solution.distMoney(26, 4) == 3\nassert solution.distMoney(9, 21) == -1",
        "small_test_cases": "\nsolution = Solution()\nassert solution.distMoney(20, 3) == 1\nassert solution.distMoney(16, 2) == 2\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 1903,
        "task_name": "Largest Odd Number in String",
        "description": "\n\n<p>You are given a string <code>num</code>, representing a large integer. Return <em>the <strong>largest-valued odd</strong> integer (as a string) that is a <strong>non-empty substring</strong> of </em><code>num</code><em>, or an empty string </em><code>&quot;&quot;</code><em> if no odd integer exists</em>.</p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters within a string.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;52&quot;\n<strong>Output:</strong> &quot;5&quot;\n<strong>Explanation:</strong> The only non-empty substrings are &quot;5&quot;, &quot;2&quot;, and &quot;52&quot;. &quot;5&quot; is the only odd number.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;4206&quot;\n<strong>Output:</strong> &quot;&quot;\n<strong>Explanation:</strong> There are no odd numbers in &quot;4206&quot;.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> num = &quot;35427&quot;\n<strong>Output:</strong> &quot;35427&quot;\n<strong>Explanation:</strong> &quot;35427&quot; is already an odd number.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= num.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>num</code> only consists of digits and does not contain any leading zeros.</li>\n</ul>\n\n",
        "markdown_description": "\nYou are given a string `num`, representing a large integer. Return *the **largest-valued odd** integer (as a string) that is a **non-empty substring** of* `num`*, or an empty string* `\"\"` *if no odd integer exists*.\n\n\nA **substring** is a contiguous sequence of characters within a string.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** num = \"52\"\n**Output:** \"5\"\n**Explanation:** The only non-empty substrings are \"5\", \"2\", and \"52\". \"5\" is the only odd number.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** num = \"4206\"\n**Output:** \"\"\n**Explanation:** There are no odd numbers in \"4206\".\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** num = \"35427\"\n**Output:** \"35427\"\n**Explanation:** \"35427\" is already an odd number.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= num.length <= 105`\n* `num` only consists of digits and does not contain any leading zeros.\n\n\n",
        "canonical_solution": "class Solution:\n    def largestOddNumber(self, num: str) -> str:\n        for i in range(len(num) - 1, -1, -1):\n            if (int(num[i]) & 1) == 1:\n                return num[: i + 1]\n        return ''\n",
        "test_case_generator": "\nimport random\n\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate a random num string\n    num_length = random.randint(1, 10)\n    num = \"\"\n    for _ in range(num_length):\n        num += str(random.choice([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.largestOddNumber(num)\n\n    return num, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for _ in range(num_tests):\n        num, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.largestOddNumber(num) == expected_result\n        if expected_result != \"\":\n            print(f\"assert solution.largestOddNumber('{num}') == '{expected_result}'\")\n            test_case_generator_results.append(f\"assert solution.largestOddNumber('{num}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n\n",
        "test_case": "assert solution.largestOddNumber('584') == '5'\nassert solution.largestOddNumber('3826166635') == '3826166635'\nassert solution.largestOddNumber('57409') == '57409'\nassert solution.largestOddNumber('79532556') == '7953255'\nassert solution.largestOddNumber('140602379') == '140602379'\nassert solution.largestOddNumber('7322') == '73'\nassert solution.largestOddNumber('99') == '99'\nassert solution.largestOddNumber('5521') == '5521'\nassert solution.largestOddNumber('458995') == '458995'\nassert solution.largestOddNumber('91') == '91'\nassert solution.largestOddNumber('54') == '5'\nassert solution.largestOddNumber('4984') == '49'\nassert solution.largestOddNumber('3451426') == '3451'\nassert solution.largestOddNumber('7973802') == '7973'\nassert solution.largestOddNumber('580705') == '580705'\nassert solution.largestOddNumber('41') == '41'\nassert solution.largestOddNumber('14109') == '14109'\nassert solution.largestOddNumber('717') == '717'\nassert solution.largestOddNumber('473') == '473'\nassert solution.largestOddNumber('5178960903') == '5178960903'\nassert solution.largestOddNumber('448524') == '4485'\nassert solution.largestOddNumber('052351375') == '052351375'\nassert solution.largestOddNumber('2824373144') == '28243731'\nassert solution.largestOddNumber('885') == '885'\nassert solution.largestOddNumber('7') == '7'\nassert solution.largestOddNumber('6580052054') == '658005205'\nassert solution.largestOddNumber('3') == '3'\nassert solution.largestOddNumber('592109') == '592109'\nassert solution.largestOddNumber('738229') == '738229'\nassert solution.largestOddNumber('51') == '51'\nassert solution.largestOddNumber('7145') == '7145'\nassert solution.largestOddNumber('0894768') == '08947'\nassert solution.largestOddNumber('1871584714') == '187158471'\nassert solution.largestOddNumber('52') == '5'\nassert solution.largestOddNumber('3') == '3'\nassert solution.largestOddNumber('021') == '021'\nassert solution.largestOddNumber('62854') == '6285'\nassert solution.largestOddNumber('9704') == '97'\nassert solution.largestOddNumber('6301') == '6301'\nassert solution.largestOddNumber('9500273') == '9500273'\nassert solution.largestOddNumber('754') == '75'\nassert solution.largestOddNumber('85979618') == '8597961'\nassert solution.largestOddNumber('85906174') == '8590617'\nassert solution.largestOddNumber('122') == '1'\nassert solution.largestOddNumber('2080499') == '2080499'\nassert solution.largestOddNumber('4735506') == '47355'\nassert solution.largestOddNumber('15325793') == '15325793'\nassert solution.largestOddNumber('296491922') == '2964919'\nassert solution.largestOddNumber('58566352') == '5856635'\nassert solution.largestOddNumber('1617') == '1617'\nassert solution.largestOddNumber('7947') == '7947'\nassert solution.largestOddNumber('9456946') == '94569'\nassert solution.largestOddNumber('761') == '761'\nassert solution.largestOddNumber('27781329') == '27781329'\nassert solution.largestOddNumber('2316167693') == '2316167693'\nassert solution.largestOddNumber('8846574') == '884657'\nassert solution.largestOddNumber('5215731656') == '521573165'\nassert solution.largestOddNumber('6299810914') == '629981091'\nassert solution.largestOddNumber('7907') == '7907'\nassert solution.largestOddNumber('0618638') == '061863'\nassert solution.largestOddNumber('96646108') == '966461'\nassert solution.largestOddNumber('95563') == '95563'\nassert solution.largestOddNumber('0211276') == '021127'\nassert solution.largestOddNumber('998849') == '998849'\nassert solution.largestOddNumber('6029') == '6029'\nassert solution.largestOddNumber('4459088106') == '44590881'\nassert solution.largestOddNumber('25333') == '25333'\nassert solution.largestOddNumber('503983482') == '503983'\nassert solution.largestOddNumber('9720622') == '97'\nassert solution.largestOddNumber('1192620') == '119'\nassert solution.largestOddNumber('35502494') == '3550249'\nassert solution.largestOddNumber('3413360') == '34133'\nassert solution.largestOddNumber('9') == '9'\nassert solution.largestOddNumber('3555') == '3555'\nassert solution.largestOddNumber('748') == '7'\nassert solution.largestOddNumber('7536387848') == '7536387'\nassert solution.largestOddNumber('409239164') == '4092391'\nassert solution.largestOddNumber('81175662') == '81175'\nassert solution.largestOddNumber('964283356') == '96428335'\nassert solution.largestOddNumber('852362') == '8523'\nassert solution.largestOddNumber('3186229') == '3186229'\nassert solution.largestOddNumber('866274') == '86627'\nassert solution.largestOddNumber('774751929') == '774751929'\nassert solution.largestOddNumber('126496818') == '12649681'\nassert solution.largestOddNumber('5') == '5'\nassert solution.largestOddNumber('365942422') == '3659'\nassert solution.largestOddNumber('76') == '7'\nassert solution.largestOddNumber('53') == '53'\nassert solution.largestOddNumber('7799') == '7799'\nassert solution.largestOddNumber('1616425821') == '1616425821'\nassert solution.largestOddNumber('506') == '5'\nassert solution.largestOddNumber('11') == '11'\nassert solution.largestOddNumber('73229') == '73229'",
        "small_test_cases": "\nsolution = Solution()\nassert solution.largestOddNumber(\"52\") == \"5\"\nassert solution.largestOddNumber(\"4206\") == \"\"\nassert solution.largestOddNumber(\"35427\") == \"35427\"\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2600,
        "task_name": "K Items With the Maximum Sum",
        "description": "\n\n<p>There is a bag that consists of items, each item&nbsp;has a number <code>1</code>, <code>0</code>, or <code>-1</code> written on it.</p>\n\n<p>You are given four <strong>non-negative </strong>integers <code>numOnes</code>, <code>numZeros</code>, <code>numNegOnes</code>, and <code>k</code>.</p>\n\n<p>The bag initially contains:</p>\n\n<ul>\n\t<li><code>numOnes</code> items with <code>1</code>s written on them.</li>\n\t<li><code>numZeroes</code> items with <code>0</code>s written on them.</li>\n\t<li><code>numNegOnes</code> items with <code>-1</code>s written on them.</li>\n</ul>\n\n<p>We want to pick exactly <code>k</code> items among the available items. Return <em>the <strong>maximum</strong> possible sum of numbers written on the items</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\n<strong>Output:</strong> 3\n<strong>Explanation:</strong> We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= numOnes, numZeros, numNegOnes &lt;= 50</code></li>\n\t<li><code>0 &lt;= k &lt;= numOnes + numZeros + numNegOnes</code></li>\n</ul>\n\n",
        "markdown_description": "\nThere is a bag that consists of items, each item\u00a0has a number `1`, `0`, or `-1` written on it.\n\n\nYou are given four **non-negative** integers `numOnes`, `numZeros`, `numNegOnes`, and `k`.\n\n\nThe bag initially contains:\n\n\n* `numOnes` items with `1`s written on them.\n* `numZeroes` items with `0`s written on them.\n* `numNegOnes` items with `-1`s written on them.\n\n\nWe want to pick exactly `k` items among the available items. Return *the **maximum** possible sum of numbers written on the items*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 2\n**Output:** 2\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 2 items with 1 written on them and get a sum in a total of 2.\nIt can be proven that 2 is the maximum possible sum.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** numOnes = 3, numZeros = 2, numNegOnes = 0, k = 4\n**Output:** 3\n**Explanation:** We have a bag of items with numbers written on them {1, 1, 1, 0, 0}. We take 3 items with 1 written on them, and 1 item with 0 written on it, and get a sum in a total of 3.\nIt can be proven that 3 is the maximum possible sum.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= numOnes, numZeros, numNegOnes <= 50`\n* `0 <= k <= numOnes + numZeros + numNegOnes`\n\n\n",
        "canonical_solution": "class Solution:\n    def kItemsWithMaximumSum(\n        self, numOnes: int, numZeros: int, numNegOnes: int, k: int\n    ) -> int:\n        if numOnes >= k:\n            return k\n        if numZeros >= k - numOnes:\n            return numOnes\n        return numOnes - (k - numOnes - numZeros)\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def kItemsWithMaximumSum(\n        self, numOnes: int, numZeros: int, numNegOnes: int, k: int\n    ) -> int:\n        if numOnes >= k:\n            return k\n        if numZeros >= k - numOnes:\n            return numOnes\n        return numOnes - (k - numOnes - numZeros)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers for numOnes, numZeros, and numNegOnes\n    numOnes = random.randint(0, 10)\n    numZeros = random.randint(0, 10)\n    numNegOnes = random.randint(0, 10)\n    \n    # Generate a random k value\n    k = random.randint(0, numOnes + numZeros + numNegOnes)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.kItemsWithMaximumSum(numOnes, numZeros, numNegOnes, k)\n\n    return numOnes, numZeros, numNegOnes, k, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        numOnes, numZeros, numNegOnes, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.kItemsWithMaximumSum(numOnes, numZeros, numNegOnes, k) == expected_result\n        print(f\"assert solution.kItemsWithMaximumSum({numOnes}, {numZeros}, {numNegOnes}, {k}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.kItemsWithMaximumSum({numOnes}, {numZeros}, {numNegOnes}, {k}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.kItemsWithMaximumSum(8, 10, 8, 10) == 8\nassert solution.kItemsWithMaximumSum(6, 3, 9, 15) == 0\nassert solution.kItemsWithMaximumSum(3, 4, 5, 11) == -1\nassert solution.kItemsWithMaximumSum(1, 4, 7, 3) == 1\nassert solution.kItemsWithMaximumSum(9, 2, 6, 11) == 9\nassert solution.kItemsWithMaximumSum(1, 3, 10, 3) == 1\nassert solution.kItemsWithMaximumSum(6, 3, 3, 2) == 2\nassert solution.kItemsWithMaximumSum(6, 10, 5, 2) == 2\nassert solution.kItemsWithMaximumSum(7, 0, 5, 12) == 2\nassert solution.kItemsWithMaximumSum(3, 6, 1, 3) == 3\nassert solution.kItemsWithMaximumSum(8, 6, 5, 10) == 8\nassert solution.kItemsWithMaximumSum(8, 1, 3, 4) == 4\nassert solution.kItemsWithMaximumSum(5, 10, 7, 21) == -1\nassert solution.kItemsWithMaximumSum(6, 3, 10, 15) == 0\nassert solution.kItemsWithMaximumSum(8, 2, 5, 11) == 7\nassert solution.kItemsWithMaximumSum(4, 10, 6, 19) == -1\nassert solution.kItemsWithMaximumSum(9, 3, 8, 5) == 5\nassert solution.kItemsWithMaximumSum(5, 2, 4, 9) == 3\nassert solution.kItemsWithMaximumSum(10, 5, 5, 15) == 10\nassert solution.kItemsWithMaximumSum(7, 3, 0, 8) == 7\nassert solution.kItemsWithMaximumSum(7, 10, 10, 24) == 0\nassert solution.kItemsWithMaximumSum(1, 0, 2, 0) == 0\nassert solution.kItemsWithMaximumSum(9, 6, 5, 8) == 8\nassert solution.kItemsWithMaximumSum(8, 10, 10, 8) == 8\nassert solution.kItemsWithMaximumSum(0, 4, 6, 10) == -6\nassert solution.kItemsWithMaximumSum(6, 0, 10, 5) == 5\nassert solution.kItemsWithMaximumSum(2, 7, 6, 3) == 2\nassert solution.kItemsWithMaximumSum(2, 1, 10, 3) == 2\nassert solution.kItemsWithMaximumSum(4, 2, 6, 11) == -1\nassert solution.kItemsWithMaximumSum(9, 5, 4, 10) == 9\nassert solution.kItemsWithMaximumSum(10, 1, 3, 5) == 5\nassert solution.kItemsWithMaximumSum(5, 3, 4, 2) == 2\nassert solution.kItemsWithMaximumSum(9, 0, 3, 0) == 0\nassert solution.kItemsWithMaximumSum(5, 3, 1, 3) == 3\nassert solution.kItemsWithMaximumSum(4, 1, 7, 0) == 0\nassert solution.kItemsWithMaximumSum(9, 6, 4, 7) == 7\nassert solution.kItemsWithMaximumSum(1, 5, 10, 0) == 0\nassert solution.kItemsWithMaximumSum(6, 4, 5, 14) == 2\nassert solution.kItemsWithMaximumSum(10, 2, 1, 12) == 10\nassert solution.kItemsWithMaximumSum(1, 8, 7, 11) == -1\nassert solution.kItemsWithMaximumSum(2, 1, 5, 2) == 2\nassert solution.kItemsWithMaximumSum(4, 4, 6, 3) == 3\nassert solution.kItemsWithMaximumSum(5, 0, 2, 7) == 3\nassert solution.kItemsWithMaximumSum(8, 9, 7, 13) == 8\nassert solution.kItemsWithMaximumSum(2, 2, 7, 1) == 1\nassert solution.kItemsWithMaximumSum(6, 8, 1, 4) == 4\nassert solution.kItemsWithMaximumSum(0, 6, 0, 6) == 0\nassert solution.kItemsWithMaximumSum(5, 5, 5, 4) == 4\nassert solution.kItemsWithMaximumSum(5, 3, 5, 12) == 1\nassert solution.kItemsWithMaximumSum(4, 2, 3, 8) == 2\nassert solution.kItemsWithMaximumSum(9, 2, 4, 6) == 6\nassert solution.kItemsWithMaximumSum(4, 5, 7, 5) == 4\nassert solution.kItemsWithMaximumSum(1, 5, 7, 8) == -1\nassert solution.kItemsWithMaximumSum(0, 4, 9, 6) == -2\nassert solution.kItemsWithMaximumSum(0, 2, 7, 4) == -2\nassert solution.kItemsWithMaximumSum(7, 2, 3, 8) == 7\nassert solution.kItemsWithMaximumSum(4, 3, 7, 12) == -1\nassert solution.kItemsWithMaximumSum(6, 1, 6, 5) == 5\nassert solution.kItemsWithMaximumSum(9, 10, 1, 8) == 8\nassert solution.kItemsWithMaximumSum(1, 4, 3, 7) == -1\nassert solution.kItemsWithMaximumSum(8, 7, 3, 5) == 5\nassert solution.kItemsWithMaximumSum(8, 10, 8, 15) == 8\nassert solution.kItemsWithMaximumSum(5, 6, 5, 12) == 4\nassert solution.kItemsWithMaximumSum(10, 4, 1, 5) == 5\nassert solution.kItemsWithMaximumSum(10, 6, 2, 3) == 3\nassert solution.kItemsWithMaximumSum(7, 0, 3, 8) == 6\nassert solution.kItemsWithMaximumSum(1, 3, 7, 2) == 1\nassert solution.kItemsWithMaximumSum(9, 9, 6, 13) == 9\nassert solution.kItemsWithMaximumSum(3, 0, 7, 9) == -3\nassert solution.kItemsWithMaximumSum(4, 0, 0, 3) == 3\nassert solution.kItemsWithMaximumSum(9, 4, 8, 16) == 6\nassert solution.kItemsWithMaximumSum(10, 5, 5, 13) == 10\nassert solution.kItemsWithMaximumSum(9, 10, 10, 22) == 6\nassert solution.kItemsWithMaximumSum(8, 0, 0, 0) == 0\nassert solution.kItemsWithMaximumSum(5, 5, 4, 10) == 5\nassert solution.kItemsWithMaximumSum(10, 8, 0, 9) == 9\nassert solution.kItemsWithMaximumSum(7, 0, 6, 7) == 7\nassert solution.kItemsWithMaximumSum(2, 6, 6, 5) == 2\nassert solution.kItemsWithMaximumSum(3, 3, 4, 10) == -1\nassert solution.kItemsWithMaximumSum(2, 10, 4, 6) == 2\nassert solution.kItemsWithMaximumSum(5, 6, 3, 2) == 2\nassert solution.kItemsWithMaximumSum(4, 10, 6, 5) == 4\nassert solution.kItemsWithMaximumSum(10, 7, 2, 16) == 10\nassert solution.kItemsWithMaximumSum(6, 9, 8, 0) == 0\nassert solution.kItemsWithMaximumSum(6, 4, 4, 2) == 2\nassert solution.kItemsWithMaximumSum(7, 3, 8, 11) == 6\nassert solution.kItemsWithMaximumSum(2, 5, 5, 7) == 2\nassert solution.kItemsWithMaximumSum(10, 3, 4, 13) == 10\nassert solution.kItemsWithMaximumSum(7, 8, 6, 2) == 2\nassert solution.kItemsWithMaximumSum(9, 1, 5, 5) == 5\nassert solution.kItemsWithMaximumSum(1, 4, 5, 6) == 0\nassert solution.kItemsWithMaximumSum(8, 1, 0, 5) == 5\nassert solution.kItemsWithMaximumSum(9, 3, 9, 18) == 3\nassert solution.kItemsWithMaximumSum(7, 9, 2, 5) == 5\nassert solution.kItemsWithMaximumSum(0, 9, 8, 16) == -7\nassert solution.kItemsWithMaximumSum(10, 3, 2, 2) == 2\nassert solution.kItemsWithMaximumSum(7, 5, 10, 21) == -2\nassert solution.kItemsWithMaximumSum(4, 6, 7, 10) == 4\nassert solution.kItemsWithMaximumSum(4, 4, 6, 12) == 0\nassert solution.kItemsWithMaximumSum(3, 0, 6, 5) == 1",
        "small_test_cases": "\nsolution = Solution()\n# Test Case 1\nassert solution.kItemsWithMaximumSum(3, 2, 0, 2) == 2\n# Test Case 2\nassert solution.kItemsWithMaximumSum(3, 2, 0, 4) == 3\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Easy"
    },
    {
        "problem_idx": 2015,
        "task_name": "Average Height of Buildings in Each Segment",
        "description": "\n\n<p>A perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array <code>buildings</code>, where <code>buildings[i] = [start<sub>i</sub>, end<sub>i</sub>, height<sub>i</sub>]</code>. This means that there is a building with <code>height<sub>i</sub></code> in the <strong>half-closed segment</strong> <code>[start<sub>i</sub>, end<sub>i</sub>)</code>.</p>\n\n<p>You want to <strong>describe</strong> the heights of the buildings on the street with the <strong>minimum</strong> number of non-overlapping <strong>segments</strong>. The street can be represented by the 2D integer array <code>street</code> where <code>street[j] = [left<sub>j</sub>, right<sub>j</sub>, average<sub>j</sub>]</code> describes a <strong>half-closed segment</strong> <code>[left<sub>j</sub>, right<sub>j</sub>)</code> of the road where the <strong>average</strong> heights of the buildings in the<strong> segment</strong> is <code>average<sub>j</sub></code>.</p>\n\n<ul>\n\t<li>For example, if <code>buildings = [[1,5,2],[3,10,4]],</code> the street could be represented by <code>street = [[1,3,2],[3,5,3],[5,10,4]]</code> because:\n    <ul>\n    \t<li>From 1 to 3, there is only the first building with an average height of <code>2 / 1 = 2</code>.</li>\n    \t<li>From 3 to 5, both the first and the second building are there with an average height of <code>(2+4) / 2 = 3</code>.</li>\n    \t<li>From 5 to 10, there is only the second building with an average height of <code>4 / 1 = 4</code>.</li>\n    </ul>\n    </li>\n</ul>\n\n<p>Given <code>buildings</code>, return <em>the 2D integer array </em><code>street</code><em> as described above (<strong>excluding</strong> any areas of the street where there are no buldings). You may return the array in <strong>any order</strong></em>.</p>\n\n<p>The <strong>average</strong> of <code>n</code> elements is the <strong>sum</strong> of the <code>n</code> elements divided (<strong>integer division</strong>) by <code>n</code>.</p>\n\n<p>A <strong>half-closed segment</strong> <code>[a, b)</code> is the section of the number line between points <code>a</code> and <code>b</code> <strong>including</strong> point <code>a</code> and <strong>not including</strong> point <code>b</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2015.Average%20Height%20of%20Buildings%20in%20Each%20Segment/images/image-20210921224001-2.png\" style=\"width: 500px; height: 349px;\" />\n<pre>\n<strong>Input:</strong> buildings = [[1,4,2],[3,9,4]]\n<strong>Output:</strong> [[1,3,2],[3,4,3],[4,9,4]]\n<strong>Explanation:</strong>\nFrom 1 to 3, there is only the first building with an average height of 2 / 1 = 2.\nFrom 3 to 4, both the first and the second building are there with an average height of (2+4) / 2 = 3.\nFrom 4 to 9, there is only the second building with an average height of 4 / 1 = 4.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[1,3,2],[2,5,3],[2,8,3]]\n<strong>Output:</strong> [[1,3,2],[3,8,3]]\n<strong>Explanation:</strong>\nFrom 1 to 2, there is only the first building with an average height of 2 / 1 = 2.\nFrom 2 to 3, all three buildings are there with an average height of (2+3+3) / 3 = 2.\nFrom 3 to 5, both the second and the third building are there with an average height of (3+3) / 2 = 3.\nFrom 5 to 8, there is only the last building with an average height of 3 / 1 = 3.\nThe average height from 1 to 3 is the same so we can group them into one segment.\nThe average height from 3 to 8 is the same so we can group them into one segment.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> buildings = [[1,2,1],[5,6,1]]\n<strong>Output:</strong> [[1,2,1],[5,6,1]]\n<strong>Explanation:</strong>\nFrom 1 to 2, there is only the first building with an average height of 1 / 1 = 1.\nFrom 2 to 5, there are no buildings, so it is not included in the output.\nFrom 5 to 6, there is only the second building with an average height of 1 / 1 = 1.\nWe cannot group the segments together because an empty space with no buildings seperates the segments.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= buildings.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>buildings[i].length == 3</code></li>\n\t<li><code>0 &lt;= start<sub>i</sub> &lt; end<sub>i</sub> &lt;= 10<sup>8</sup></code></li>\n\t<li><code>1 &lt;= height<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nA perfectly straight street is represented by a number line. The street has building(s) on it and is represented by a 2D integer array `buildings`, where `buildings[i] = [starti, endi, heighti]`. This means that there is a building with `heighti` in the **half-closed segment** `[starti, endi)`.\n\n\nYou want to **describe** the heights of the buildings on the street with the **minimum** number of non-overlapping **segments**. The street can be represented by the 2D integer array `street` where `street[j] = [leftj, rightj, averagej]` describes a **half-closed segment** `[leftj, rightj)` of the road where the **average** heights of the buildings in the **segment** is `averagej`.\n\n\n* For example, if `buildings = [[1,5,2],[3,10,4]],` the street could be represented by `street = [[1,3,2],[3,5,3],[5,10,4]]` because:\n\t+ From 1 to 3, there is only the first building with an average height of `2 / 1 = 2`.\n\t+ From 3 to 5, both the first and the second building are there with an average height of `(2+4) / 2 = 3`.\n\t+ From 5 to 10, there is only the second building with an average height of `4 / 1 = 4`.\n\n\nGiven `buildings`, return *the 2D integer array* `street` *as described above (**excluding** any areas of the street where there are no buldings). You may return the array in **any order***.\n\n\nThe **average** of `n` elements is the **sum** of the `n` elements divided (**integer division**) by `n`.\n\n\nA **half-closed segment** `[a, b)` is the section of the number line between points `a` and `b` **including** point `a` and **not including** point `b`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2000-2099/2015.Average%20Height%20of%20Buildings%20in%20Each%20Segment/images/image-20210921224001-2.png)\n\n```\n\n**Input:** buildings = [[1,4,2],[3,9,4]]\n**Output:** [[1,3,2],[3,4,3],[4,9,4]]\n**Explanation:**\nFrom 1 to 3, there is only the first building with an average height of 2 / 1 = 2.\nFrom 3 to 4, both the first and the second building are there with an average height of (2+4) / 2 = 3.\nFrom 4 to 9, there is only the second building with an average height of 4 / 1 = 4.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** buildings = [[1,3,2],[2,5,3],[2,8,3]]\n**Output:** [[1,3,2],[3,8,3]]\n**Explanation:**\nFrom 1 to 2, there is only the first building with an average height of 2 / 1 = 2.\nFrom 2 to 3, all three buildings are there with an average height of (2+3+3) / 3 = 2.\nFrom 3 to 5, both the second and the third building are there with an average height of (3+3) / 2 = 3.\nFrom 5 to 8, there is only the last building with an average height of 3 / 1 = 3.\nThe average height from 1 to 3 is the same so we can group them into one segment.\nThe average height from 3 to 8 is the same so we can group them into one segment.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** buildings = [[1,2,1],[5,6,1]]\n**Output:** [[1,2,1],[5,6,1]]\n**Explanation:**\nFrom 1 to 2, there is only the first building with an average height of 1 / 1 = 1.\nFrom 2 to 5, there are no buildings, so it is not included in the output.\nFrom 5 to 6, there is only the second building with an average height of 1 / 1 = 1.\nWe cannot group the segments together because an empty space with no buildings seperates the segments.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= buildings.length <= 105`\n* `buildings[i].length == 3`\n* `0 <= starti < endi <= 108`\n* `1 <= heighti <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def averageHeightOfBuildings(self, buildings: List[List[int]]) -> List[List[int]]:\n        height = defaultdict(int)\n        cnt = defaultdict(int)\n        for s, e, h in buildings:\n            cnt[s] += 1\n            cnt[e] -= 1\n            height[s] += h\n            height[e] -= h\n        ans = []\n        i = h = n = 0\n        for j in sorted(cnt.keys()):\n            if n:\n                t = [i, j, h // n]\n                if ans and ans[-1][1] == i and ans[-1][2] == t[-1]:\n                    ans[-1][1] = j\n                else:\n                    ans.append(t)\n            i = j\n            h += height[j]\n            n += cnt[j]\n        return ans\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def averageHeightOfBuildings(self, buildings):\n        height = defaultdict(int)\n        cnt = defaultdict(int)\n        for s, e, h in buildings:\n            cnt[s] += 1\n            cnt[e] -= 1\n            height[s] += h\n            height[e] -= h\n        ans = []\n        i = h = n = 0\n        for j in sorted(cnt.keys()):\n            if n:\n                t = [i, j, h // n]\n                if ans and ans[-1][1] == i and ans[-1][2] == t[-1]:\n                    ans[-1][1] = j\n                else:\n                    ans.append(t)\n            i = j\n            h += height[j]\n            n += cnt[j]\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random buildings\n    buildings = []\n    for _ in range(random.randint(1, 5)):\n        start = random.randint(1, 10)\n        end = start + random.randint(1, 10)\n        height = random.randint(1, 10)\n        buildings.append([start, end, height])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.averageHeightOfBuildings(buildings)\n\n    return buildings, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        buildings, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.averageHeightOfBuildings(buildings) == expected_result\n        print(f\"assert solution.averageHeightOfBuildings({buildings}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.averageHeightOfBuildings({buildings}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.averageHeightOfBuildings([[7, 12, 7], [6, 8, 5]]) == [[6, 7, 5], [7, 8, 6], [8, 12, 7]]\nassert solution.averageHeightOfBuildings([[3, 9, 2], [10, 15, 4], [3, 9, 1], [7, 12, 3]]) == [[3, 7, 1], [7, 9, 2], [9, 12, 3], [12, 15, 4]]\nassert solution.averageHeightOfBuildings([[1, 11, 10], [7, 14, 1]]) == [[1, 7, 10], [7, 11, 5], [11, 14, 1]]\nassert solution.averageHeightOfBuildings([[8, 15, 1], [2, 10, 4], [8, 14, 8], [6, 15, 9], [9, 19, 6]]) == [[2, 6, 4], [6, 8, 6], [8, 10, 5], [10, 14, 6], [14, 15, 5], [15, 19, 6]]\nassert solution.averageHeightOfBuildings([[3, 9, 2], [3, 12, 1], [9, 12, 3]]) == [[3, 9, 1], [9, 12, 2]]\nassert solution.averageHeightOfBuildings([[9, 12, 3], [9, 10, 4], [4, 9, 4], [5, 7, 5]]) == [[4, 9, 4], [9, 12, 3]]\nassert solution.averageHeightOfBuildings([[3, 8, 2], [7, 9, 7], [5, 15, 2], [3, 9, 7], [2, 7, 3]]) == [[2, 3, 3], [3, 5, 4], [5, 7, 3], [7, 8, 4], [8, 9, 5], [9, 15, 2]]\nassert solution.averageHeightOfBuildings([[8, 16, 1], [8, 9, 4]]) == [[8, 9, 2], [9, 16, 1]]\nassert solution.averageHeightOfBuildings([[4, 8, 1]]) == [[4, 8, 1]]\nassert solution.averageHeightOfBuildings([[6, 10, 6], [6, 16, 2]]) == [[6, 10, 4], [10, 16, 2]]\nassert solution.averageHeightOfBuildings([[5, 14, 10], [6, 14, 7], [3, 10, 10], [8, 15, 10]]) == [[3, 6, 10], [6, 14, 9], [14, 15, 10]]\nassert solution.averageHeightOfBuildings([[7, 14, 3], [10, 12, 4], [8, 9, 5], [3, 6, 6]]) == [[3, 6, 6], [7, 8, 3], [8, 9, 4], [9, 14, 3]]\nassert solution.averageHeightOfBuildings([[1, 2, 3], [10, 12, 1]]) == [[1, 2, 3], [10, 12, 1]]\nassert solution.averageHeightOfBuildings([[1, 5, 5]]) == [[1, 5, 5]]\nassert solution.averageHeightOfBuildings([[4, 9, 5], [3, 13, 8], [2, 10, 1]]) == [[2, 3, 1], [3, 10, 4], [10, 13, 8]]\nassert solution.averageHeightOfBuildings([[5, 13, 4], [4, 10, 8]]) == [[4, 5, 8], [5, 10, 6], [10, 13, 4]]\nassert solution.averageHeightOfBuildings([[3, 12, 10], [1, 3, 7], [10, 19, 8]]) == [[1, 3, 7], [3, 10, 10], [10, 12, 9], [12, 19, 8]]\nassert solution.averageHeightOfBuildings([[6, 8, 7], [2, 5, 7], [5, 12, 8], [10, 17, 6], [7, 11, 10]]) == [[2, 5, 7], [5, 6, 8], [6, 7, 7], [7, 8, 8], [8, 10, 9], [10, 11, 8], [11, 12, 7], [12, 17, 6]]\nassert solution.averageHeightOfBuildings([[3, 13, 5], [6, 14, 10]]) == [[3, 6, 5], [6, 13, 7], [13, 14, 10]]\nassert solution.averageHeightOfBuildings([[4, 11, 2]]) == [[4, 11, 2]]\nassert solution.averageHeightOfBuildings([[10, 14, 9], [1, 6, 7], [5, 15, 1]]) == [[1, 5, 7], [5, 6, 4], [6, 10, 1], [10, 14, 5], [14, 15, 1]]\nassert solution.averageHeightOfBuildings([[9, 16, 7]]) == [[9, 16, 7]]\nassert solution.averageHeightOfBuildings([[10, 12, 9], [1, 8, 4], [10, 19, 4]]) == [[1, 8, 4], [10, 12, 6], [12, 19, 4]]\nassert solution.averageHeightOfBuildings([[6, 10, 7], [10, 20, 10], [4, 7, 1]]) == [[4, 6, 1], [6, 7, 4], [7, 10, 7], [10, 20, 10]]\nassert solution.averageHeightOfBuildings([[1, 10, 9], [7, 14, 10], [3, 8, 9], [10, 15, 3], [1, 11, 4]]) == [[1, 3, 6], [3, 7, 7], [7, 8, 8], [8, 10, 7], [10, 11, 5], [11, 14, 6], [14, 15, 3]]\nassert solution.averageHeightOfBuildings([[1, 9, 2], [3, 11, 8]]) == [[1, 3, 2], [3, 9, 5], [9, 11, 8]]\nassert solution.averageHeightOfBuildings([[10, 15, 7], [6, 9, 8], [2, 5, 6], [8, 18, 8]]) == [[2, 5, 6], [6, 10, 8], [10, 15, 7], [15, 18, 8]]\nassert solution.averageHeightOfBuildings([[10, 16, 5]]) == [[10, 16, 5]]\nassert solution.averageHeightOfBuildings([[5, 15, 3], [5, 6, 2], [10, 18, 7]]) == [[5, 6, 2], [6, 10, 3], [10, 15, 5], [15, 18, 7]]\nassert solution.averageHeightOfBuildings([[6, 16, 6], [6, 13, 2], [7, 8, 6], [3, 6, 8], [6, 16, 2]]) == [[3, 6, 8], [6, 7, 3], [7, 8, 4], [8, 13, 3], [13, 16, 4]]\nassert solution.averageHeightOfBuildings([[6, 8, 10], [9, 11, 10], [5, 11, 6], [6, 8, 10]]) == [[5, 6, 6], [6, 8, 8], [8, 9, 6], [9, 11, 8]]\nassert solution.averageHeightOfBuildings([[9, 17, 7], [5, 6, 9], [1, 7, 1], [10, 11, 5], [4, 10, 1]]) == [[1, 5, 1], [5, 6, 3], [6, 9, 1], [9, 10, 4], [10, 11, 6], [11, 17, 7]]\nassert solution.averageHeightOfBuildings([[6, 14, 5], [8, 10, 10], [2, 6, 3], [4, 8, 8], [10, 17, 9]]) == [[2, 4, 3], [4, 6, 5], [6, 8, 6], [8, 14, 7], [14, 17, 9]]\nassert solution.averageHeightOfBuildings([[10, 12, 9], [1, 10, 7]]) == [[1, 10, 7], [10, 12, 9]]\nassert solution.averageHeightOfBuildings([[1, 8, 2], [7, 10, 9], [8, 15, 9], [2, 12, 7], [10, 18, 1]]) == [[1, 2, 2], [2, 7, 4], [7, 8, 6], [8, 10, 8], [10, 15, 5], [15, 18, 1]]\nassert solution.averageHeightOfBuildings([[2, 3, 7]]) == [[2, 3, 7]]\nassert solution.averageHeightOfBuildings([[10, 14, 1], [9, 15, 8], [10, 13, 5], [9, 15, 7]]) == [[9, 10, 7], [10, 14, 5], [14, 15, 7]]\nassert solution.averageHeightOfBuildings([[6, 12, 9], [8, 17, 2], [6, 13, 10]]) == [[6, 8, 9], [8, 12, 7], [12, 13, 6], [13, 17, 2]]\nassert solution.averageHeightOfBuildings([[10, 18, 2], [9, 15, 10], [2, 4, 4]]) == [[2, 4, 4], [9, 10, 10], [10, 15, 6], [15, 18, 2]]\nassert solution.averageHeightOfBuildings([[3, 6, 5]]) == [[3, 6, 5]]\nassert solution.averageHeightOfBuildings([[1, 2, 9], [6, 8, 5]]) == [[1, 2, 9], [6, 8, 5]]\nassert solution.averageHeightOfBuildings([[3, 11, 8], [10, 14, 1], [9, 18, 2], [10, 14, 10], [7, 13, 8]]) == [[3, 9, 8], [9, 10, 6], [10, 13, 5], [13, 14, 4], [14, 18, 2]]\nassert solution.averageHeightOfBuildings([[8, 11, 1], [4, 5, 3], [6, 8, 3]]) == [[4, 5, 3], [6, 8, 3], [8, 11, 1]]\nassert solution.averageHeightOfBuildings([[2, 9, 3], [10, 17, 4], [10, 20, 7]]) == [[2, 9, 3], [10, 17, 5], [17, 20, 7]]\nassert solution.averageHeightOfBuildings([[10, 16, 7], [10, 12, 10]]) == [[10, 12, 8], [12, 16, 7]]\nassert solution.averageHeightOfBuildings([[3, 9, 8], [1, 4, 5], [9, 11, 7], [5, 10, 10], [8, 14, 2]]) == [[1, 3, 5], [3, 4, 6], [4, 5, 8], [5, 8, 9], [8, 10, 6], [10, 11, 4], [11, 14, 2]]\nassert solution.averageHeightOfBuildings([[2, 12, 3], [10, 13, 3]]) == [[2, 13, 3]]\nassert solution.averageHeightOfBuildings([[9, 10, 4], [8, 16, 7], [1, 6, 8], [3, 9, 2], [7, 11, 10]]) == [[1, 3, 8], [3, 6, 5], [6, 7, 2], [7, 9, 6], [9, 10, 7], [10, 11, 8], [11, 16, 7]]\nassert solution.averageHeightOfBuildings([[5, 14, 2], [7, 14, 6], [6, 8, 8], [7, 8, 6], [5, 13, 7]]) == [[5, 6, 4], [6, 13, 5], [13, 14, 4]]\nassert solution.averageHeightOfBuildings([[10, 15, 9], [2, 12, 1], [6, 14, 7], [10, 18, 2], [9, 12, 9]]) == [[2, 6, 1], [6, 9, 4], [9, 12, 5], [12, 14, 6], [14, 15, 5], [15, 18, 2]]\nassert solution.averageHeightOfBuildings([[10, 12, 6], [5, 12, 9], [7, 11, 5]]) == [[5, 7, 9], [7, 10, 7], [10, 11, 6], [11, 12, 7]]\nassert solution.averageHeightOfBuildings([[10, 13, 8], [4, 14, 5], [10, 20, 1], [10, 20, 3], [7, 12, 3]]) == [[4, 7, 5], [7, 13, 4], [13, 14, 3], [14, 20, 2]]\nassert solution.averageHeightOfBuildings([[7, 15, 2], [3, 4, 9], [9, 17, 9], [6, 11, 9], [9, 12, 9]]) == [[3, 4, 9], [6, 7, 9], [7, 9, 5], [9, 11, 7], [11, 12, 6], [12, 15, 5], [15, 17, 9]]\nassert solution.averageHeightOfBuildings([[8, 13, 4], [3, 12, 8], [2, 6, 9], [5, 9, 6]]) == [[2, 3, 9], [3, 5, 8], [5, 8, 7], [8, 12, 6], [12, 13, 4]]\nassert solution.averageHeightOfBuildings([[7, 16, 5]]) == [[7, 16, 5]]\nassert solution.averageHeightOfBuildings([[8, 10, 4], [3, 10, 7], [8, 17, 3]]) == [[3, 8, 7], [8, 10, 4], [10, 17, 3]]\nassert solution.averageHeightOfBuildings([[6, 9, 9], [3, 8, 8]]) == [[3, 8, 8], [8, 9, 9]]\nassert solution.averageHeightOfBuildings([[4, 14, 3], [10, 19, 4]]) == [[4, 14, 3], [14, 19, 4]]\nassert solution.averageHeightOfBuildings([[4, 13, 8], [10, 19, 7], [6, 10, 2], [6, 16, 9], [7, 17, 9]]) == [[4, 6, 8], [6, 7, 6], [7, 10, 7], [10, 17, 8], [17, 19, 7]]\nassert solution.averageHeightOfBuildings([[7, 8, 10], [9, 19, 6], [2, 12, 5], [10, 19, 3], [5, 9, 1]]) == [[2, 5, 5], [5, 7, 3], [7, 8, 5], [8, 9, 3], [9, 10, 5], [10, 19, 4]]\nassert solution.averageHeightOfBuildings([[6, 13, 10], [4, 13, 3], [9, 15, 8], [4, 10, 3], [6, 9, 4]]) == [[4, 6, 3], [6, 9, 5], [9, 10, 6], [10, 13, 7], [13, 15, 8]]\nassert solution.averageHeightOfBuildings([[3, 4, 6], [5, 14, 6], [2, 9, 6], [8, 10, 6], [7, 14, 9]]) == [[2, 7, 6], [7, 8, 7], [8, 9, 6], [9, 14, 7]]\nassert solution.averageHeightOfBuildings([[10, 19, 10], [10, 14, 1]]) == [[10, 14, 5], [14, 19, 10]]\nassert solution.averageHeightOfBuildings([[7, 12, 2], [5, 6, 9]]) == [[5, 6, 9], [7, 12, 2]]\nassert solution.averageHeightOfBuildings([[1, 3, 9], [3, 10, 7], [3, 11, 1], [8, 18, 5]]) == [[1, 3, 9], [3, 10, 4], [10, 11, 3], [11, 18, 5]]\nassert solution.averageHeightOfBuildings([[2, 7, 2], [9, 10, 9], [9, 13, 9]]) == [[2, 7, 2], [9, 13, 9]]\nassert solution.averageHeightOfBuildings([[6, 8, 2], [6, 8, 5], [1, 6, 9], [3, 9, 8], [5, 15, 1]]) == [[1, 3, 9], [3, 5, 8], [5, 6, 6], [6, 9, 4], [9, 15, 1]]\nassert solution.averageHeightOfBuildings([[5, 11, 3], [5, 14, 5], [4, 9, 7], [5, 15, 2], [3, 7, 4]]) == [[3, 4, 4], [4, 5, 5], [5, 9, 4], [9, 14, 3], [14, 15, 2]]\nassert solution.averageHeightOfBuildings([[7, 17, 10], [1, 2, 8], [9, 14, 1]]) == [[1, 2, 8], [7, 9, 10], [9, 14, 5], [14, 17, 10]]\nassert solution.averageHeightOfBuildings([[9, 15, 4], [10, 16, 2]]) == [[9, 10, 4], [10, 15, 3], [15, 16, 2]]\nassert solution.averageHeightOfBuildings([[1, 10, 10], [7, 10, 4], [9, 10, 5], [8, 14, 8]]) == [[1, 7, 10], [7, 9, 7], [9, 10, 6], [10, 14, 8]]\nassert solution.averageHeightOfBuildings([[8, 9, 2]]) == [[8, 9, 2]]\nassert solution.averageHeightOfBuildings([[6, 16, 2], [5, 12, 9], [3, 8, 10], [6, 14, 4], [1, 8, 4]]) == [[1, 3, 4], [3, 6, 7], [6, 12, 5], [12, 14, 3], [14, 16, 2]]\nassert solution.averageHeightOfBuildings([[2, 5, 9], [6, 14, 6], [3, 8, 3]]) == [[2, 3, 9], [3, 5, 6], [5, 6, 3], [6, 8, 4], [8, 14, 6]]\nassert solution.averageHeightOfBuildings([[2, 9, 6]]) == [[2, 9, 6]]\nassert solution.averageHeightOfBuildings([[9, 17, 10]]) == [[9, 17, 10]]\nassert solution.averageHeightOfBuildings([[7, 8, 7], [4, 9, 5]]) == [[4, 7, 5], [7, 8, 6], [8, 9, 5]]\nassert solution.averageHeightOfBuildings([[9, 16, 6], [4, 13, 9], [3, 9, 3], [9, 15, 1]]) == [[3, 4, 3], [4, 9, 6], [9, 13, 5], [13, 15, 3], [15, 16, 6]]\nassert solution.averageHeightOfBuildings([[8, 18, 3], [10, 18, 4]]) == [[8, 18, 3]]\nassert solution.averageHeightOfBuildings([[10, 13, 5], [7, 9, 7], [4, 9, 8]]) == [[4, 7, 8], [7, 9, 7], [10, 13, 5]]\nassert solution.averageHeightOfBuildings([[1, 6, 6], [6, 12, 1]]) == [[1, 6, 6], [6, 12, 1]]\nassert solution.averageHeightOfBuildings([[2, 5, 8], [9, 17, 9], [2, 10, 6]]) == [[2, 5, 7], [5, 9, 6], [9, 10, 7], [10, 17, 9]]\nassert solution.averageHeightOfBuildings([[3, 12, 5], [5, 10, 3], [3, 9, 8]]) == [[3, 5, 6], [5, 9, 5], [9, 10, 4], [10, 12, 5]]\nassert solution.averageHeightOfBuildings([[8, 15, 3], [10, 12, 9], [3, 12, 2], [5, 11, 7]]) == [[3, 5, 2], [5, 10, 4], [10, 11, 5], [11, 12, 4], [12, 15, 3]]\nassert solution.averageHeightOfBuildings([[2, 5, 4], [2, 8, 5]]) == [[2, 5, 4], [5, 8, 5]]\nassert solution.averageHeightOfBuildings([[1, 8, 1], [9, 14, 2], [8, 18, 8]]) == [[1, 8, 1], [8, 9, 8], [9, 14, 5], [14, 18, 8]]\nassert solution.averageHeightOfBuildings([[1, 8, 2], [10, 14, 4], [5, 9, 5], [7, 10, 6]]) == [[1, 5, 2], [5, 7, 3], [7, 8, 4], [8, 9, 5], [9, 10, 6], [10, 14, 4]]\nassert solution.averageHeightOfBuildings([[5, 8, 3], [3, 10, 8]]) == [[3, 5, 8], [5, 8, 5], [8, 10, 8]]\nassert solution.averageHeightOfBuildings([[7, 8, 6], [6, 9, 10], [5, 6, 5], [1, 3, 9]]) == [[1, 3, 9], [5, 6, 5], [6, 7, 10], [7, 8, 8], [8, 9, 10]]\nassert solution.averageHeightOfBuildings([[3, 10, 6], [2, 12, 10], [5, 14, 3], [9, 14, 7], [4, 5, 10]]) == [[2, 3, 10], [3, 5, 8], [5, 12, 6], [12, 14, 5]]\nassert solution.averageHeightOfBuildings([[4, 14, 6], [9, 19, 5], [8, 16, 8], [7, 15, 4], [10, 15, 9]]) == [[4, 7, 6], [7, 8, 5], [8, 9, 6], [9, 10, 5], [10, 16, 6], [16, 19, 5]]\nassert solution.averageHeightOfBuildings([[8, 16, 10]]) == [[8, 16, 10]]\nassert solution.averageHeightOfBuildings([[8, 12, 2]]) == [[8, 12, 2]]\nassert solution.averageHeightOfBuildings([[10, 11, 8], [5, 15, 5]]) == [[5, 10, 5], [10, 11, 6], [11, 15, 5]]\nassert solution.averageHeightOfBuildings([[5, 13, 5], [2, 12, 5], [2, 6, 7]]) == [[2, 5, 6], [5, 13, 5]]\nassert solution.averageHeightOfBuildings([[4, 5, 10]]) == [[4, 5, 10]]\nassert solution.averageHeightOfBuildings([[7, 10, 3], [2, 3, 5], [4, 7, 2]]) == [[2, 3, 5], [4, 7, 2], [7, 10, 3]]\nassert solution.averageHeightOfBuildings([[1, 5, 4], [10, 17, 3], [2, 3, 3], [2, 9, 1]]) == [[1, 2, 4], [2, 5, 2], [5, 9, 1], [10, 17, 3]]\nassert solution.averageHeightOfBuildings([[9, 13, 5], [1, 7, 9], [1, 10, 7], [9, 14, 9], [10, 15, 4]]) == [[1, 7, 8], [7, 10, 7], [10, 14, 6], [14, 15, 4]]\nassert solution.averageHeightOfBuildings([[9, 16, 9], [5, 15, 6]]) == [[5, 9, 6], [9, 15, 7], [15, 16, 9]]",
        "small_test_cases": "\nsolution = Solution()\n# From the provided Example 1\nassert solution.averageHeightOfBuildings([[1,4,2],[3,9,4]]) == [[1,3,2],[3,4,3],[4,9,4]]\n# From the provided Example 2\nassert solution.averageHeightOfBuildings([[1,3,2],[2,5,3],[2,8,3]]) == [[1,3,2],[3,8,3]]\n# From the provided Example 3\nassert solution.averageHeightOfBuildings([[1,2,1],[5,6,1]]) == [[1,2,1],[5,6,1]]\n",
        "algorithms": [
            "greedy",
            "sorting"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 1996,
        "task_name": "The Number of Weak Characters in the Game",
        "description": "\n\n<p>You are playing a game that contains multiple characters, and each of the characters has <strong>two</strong> main properties: <strong>attack</strong> and <strong>defense</strong>. You are given a 2D integer array <code>properties</code> where <code>properties[i] = [attack<sub>i</sub>, defense<sub>i</sub>]</code> represents the properties of the <code>i<sup>th</sup></code> character in the game.</p>\n\n<p>A character is said to be <strong>weak</strong> if any other character has <strong>both</strong> attack and defense levels <strong>strictly greater</strong> than this character&#39;s attack and defense levels. More formally, a character <code>i</code> is said to be <strong>weak</strong> if there exists another character <code>j</code> where <code>attack<sub>j</sub> &gt; attack<sub>i</sub></code> and <code>defense<sub>j</sub> &gt; defense<sub>i</sub></code>.</p>\n\n<p>Return <em>the number of <strong>weak</strong> characters</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> properties = [[5,5],[6,3],[3,6]]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> No character has strictly greater attack and defense than the other.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> properties = [[2,2],[3,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The first character is weak because the second character has a strictly greater attack and defense.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> properties = [[1,5],[10,4],[4,3]]\n<strong>Output:</strong> 1\n<strong>Explanation:</strong> The third character is weak because the second character has a strictly greater attack and defense.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= properties.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>properties[i].length == 2</code></li>\n\t<li><code>1 &lt;= attack<sub>i</sub>, defense<sub>i</sub> &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are playing a game that contains multiple characters, and each of the characters has **two** main properties: **attack** and **defense**. You are given a 2D integer array `properties` where `properties[i] = [attacki, defensei]` represents the properties of the `ith` character in the game.\n\n\nA character is said to be **weak** if any other character has **both** attack and defense levels **strictly greater** than this character's attack and defense levels. More formally, a character `i` is said to be **weak** if there exists another character `j` where `attackj > attacki` and `defensej > defensei`.\n\n\nReturn *the number of **weak** characters*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** properties = [[5,5],[6,3],[3,6]]\n**Output:** 0\n**Explanation:** No character has strictly greater attack and defense than the other.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** properties = [[2,2],[3,3]]\n**Output:** 1\n**Explanation:** The first character is weak because the second character has a strictly greater attack and defense.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** properties = [[1,5],[10,4],[4,3]]\n**Output:** 1\n**Explanation:** The third character is weak because the second character has a strictly greater attack and defense.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `2 <= properties.length <= 105`\n* `properties[i].length == 2`\n* `1 <= attacki, defensei <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n        properties.sort(key=lambda x: (-x[0], x[1]))\n        ans = mx = 0\n        for _, x in properties:\n            ans += x < mx\n            mx = max(mx, x)\n        return ans\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def numberOfWeakCharacters(self, properties: List[List[int]]) -> int:\n        properties.sort(key=lambda x: (-x[0], x[1]))\n        ans = mx = 0\n        for _, x in properties:\n            ans += x < mx\n            mx = max(mx, x)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random properties list\n    n = random.randint(2, 101)\n    properties = []\n    for _ in range(n):\n        attack = random.randint(1, 101)\n        defense = random.randint(1, 101)\n        properties.append([attack, defense])\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.numberOfWeakCharacters(properties)\n\n    return properties, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        properties, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.numberOfWeakCharacters(properties) == expected_result\n        print(f\"assert solution.numberOfWeakCharacters({properties}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.numberOfWeakCharacters({properties}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.numberOfWeakCharacters([[101, 74], [100, 82], [99, 23], [98, 100], [97, 22], [96, 4], [95, 101], [93, 90], [91, 4], [90, 74], [89, 82], [84, 12], [83, 1], [81, 4], [81, 11], [80, 4], [79, 1], [77, 22], [75, 25], [71, 10], [71, 39], [70, 21], [70, 28], [70, 90], [69, 87], [63, 23], [61, 98], [56, 10], [56, 44], [55, 51], [55, 58], [52, 71], [51, 43], [51, 67], [51, 90], [50, 77], [46, 6], [45, 69], [43, 70], [41, 5], [41, 28], [41, 45], [41, 71], [40, 45], [40, 47], [40, 80], [39, 40], [39, 87], [38, 16], [36, 28], [35, 24], [33, 57], [33, 62], [32, 36], [31, 37], [30, 22], [30, 24], [28, 56], [27, 87], [26, 46], [24, 43], [24, 47], [23, 50], [22, 16], [22, 25], [21, 56], [20, 85], [19, 7], [18, 57], [17, 69], [13, 8], [12, 65], [11, 97], [11, 98], [10, 88], [10, 91], [8, 33], [8, 41], [4, 95], [2, 43], [1, 37]]) == 77\nassert solution.numberOfWeakCharacters([[101, 88], [99, 39], [98, 91], [95, 47], [93, 76], [90, 40], [87, 2], [87, 28], [87, 61], [85, 34], [83, 92], [80, 57], [76, 35], [71, 45], [69, 30], [67, 30], [67, 72], [65, 84], [63, 73], [63, 77], [61, 4], [61, 72], [59, 4], [57, 40], [57, 93], [56, 92], [54, 25], [48, 34], [47, 89], [46, 6], [46, 48], [45, 44], [44, 43], [43, 6], [43, 16], [43, 92], [40, 41], [39, 13], [39, 78], [37, 82], [34, 83], [33, 92], [32, 87], [29, 41], [28, 14], [28, 18], [23, 26], [23, 81], [21, 11], [21, 97], [18, 30], [18, 90], [15, 30], [8, 87], [4, 8], [3, 26]]) == 51\nassert solution.numberOfWeakCharacters([[100, 30], [98, 17], [97, 99], [92, 101], [89, 101], [84, 17], [78, 89], [76, 44], [65, 86], [51, 85], [40, 101], [39, 38], [39, 60], [34, 48], [33, 24], [28, 91], [19, 65], [2, 43]]) == 13\nassert solution.numberOfWeakCharacters([[95, 84], [93, 62], [90, 10], [80, 52], [78, 6], [64, 15], [61, 99], [58, 86], [54, 23], [51, 75], [51, 100], [49, 45], [47, 45], [46, 68], [43, 90], [38, 28], [36, 79], [34, 80], [31, 31], [31, 72], [31, 76], [30, 31], [18, 100], [15, 95], [14, 8], [13, 37], [11, 69], [8, 37], [6, 10], [6, 55], [3, 49], [2, 32]]) == 28\nassert solution.numberOfWeakCharacters([[93, 12], [83, 40], [83, 83], [79, 34], [76, 28], [74, 60], [72, 51], [67, 7], [64, 59], [57, 36], [56, 49], [50, 33], [50, 73], [49, 14], [49, 26], [48, 4], [44, 31], [34, 72], [31, 21], [27, 6], [27, 9], [25, 88], [22, 7], [19, 65], [15, 52], [13, 49], [13, 79], [6, 11], [6, 36], [6, 52], [6, 67], [4, 43], [1, 63]]) == 29\nassert solution.numberOfWeakCharacters([[59, 71], [44, 40], [38, 101]]) == 1\nassert solution.numberOfWeakCharacters([[101, 21], [100, 31], [98, 75], [98, 100], [97, 47], [96, 71], [95, 1], [95, 17], [94, 29], [92, 76], [92, 94], [91, 97], [90, 33], [87, 7], [87, 56], [86, 83], [84, 55], [84, 60], [80, 44], [79, 8], [79, 93], [78, 2], [78, 35], [76, 1], [76, 51], [74, 8], [74, 66], [72, 10], [72, 10], [72, 44], [70, 41], [70, 83], [69, 28], [64, 58], [63, 25], [63, 63], [62, 13], [62, 92], [61, 97], [60, 24], [54, 50], [53, 23], [52, 1], [52, 6], [51, 97], [50, 67], [48, 49], [47, 25], [47, 94], [43, 38], [41, 3], [41, 18], [39, 1], [39, 43], [39, 75], [39, 77], [38, 30], [35, 4], [35, 68], [35, 85], [34, 46], [34, 83], [33, 5], [33, 34], [33, 61], [32, 12], [32, 21], [31, 33], [31, 59], [31, 90], [30, 67], [30, 100], [29, 24], [29, 59], [28, 30], [27, 51], [26, 8], [25, 33], [25, 59], [22, 26], [21, 1], [21, 26], [21, 38], [20, 91], [19, 91], [17, 63], [17, 98], [15, 93], [14, 30], [14, 80], [12, 25], [12, 60], [10, 44], [9, 25], [9, 45], [8, 37], [7, 82], [5, 88], [3, 43], [3, 78], [2, 93]]) == 96\nassert solution.numberOfWeakCharacters([[101, 3], [100, 40], [96, 34], [82, 8], [75, 61], [75, 92], [75, 100], [73, 47], [72, 61], [70, 19], [66, 43], [65, 55], [61, 33], [55, 62], [46, 38], [30, 80], [28, 98], [22, 83], [18, 29], [12, 53], [6, 22], [5, 63]]) == 17\nassert solution.numberOfWeakCharacters([[101, 76], [98, 97], [95, 100], [90, 95], [88, 59], [81, 2], [80, 72], [77, 35], [76, 1], [67, 76], [65, 8], [64, 85], [57, 28], [56, 22], [52, 32], [45, 27], [45, 71], [44, 34], [42, 19], [36, 58], [34, 60], [25, 14], [24, 24], [24, 83], [18, 83], [17, 9], [5, 91], [4, 72], [4, 93]]) == 26\nassert solution.numberOfWeakCharacters([[94, 18], [88, 5]]) == 1\nassert solution.numberOfWeakCharacters([[101, 25], [97, 53], [97, 86], [95, 5], [92, 26], [90, 1], [90, 96], [89, 92], [84, 48], [78, 6], [70, 84], [65, 100], [64, 69], [58, 12], [58, 42], [56, 58], [45, 20], [44, 67], [43, 54], [39, 32], [39, 89], [33, 41], [32, 18], [32, 23], [30, 84], [30, 86], [27, 78], [24, 45], [23, 43], [19, 12], [18, 82], [14, 69], [13, 81], [12, 48], [11, 66], [11, 87], [7, 46], [7, 94], [6, 20], [5, 10]]) == 35\nassert solution.numberOfWeakCharacters([[97, 31], [91, 58], [91, 78], [90, 58], [90, 70], [88, 96], [86, 51], [84, 17], [82, 12], [80, 101], [78, 89], [77, 37], [75, 6], [74, 54], [72, 26], [71, 43], [69, 32], [67, 54], [66, 56], [65, 79], [64, 13], [63, 34], [63, 79], [61, 29], [60, 17], [59, 10], [58, 88], [57, 92], [54, 84], [53, 101], [50, 93], [47, 28], [44, 36], [44, 80], [43, 90], [38, 38], [36, 100], [34, 61], [27, 9], [27, 19], [25, 72], [24, 20], [20, 21], [20, 68], [18, 73], [18, 93], [13, 38], [8, 94], [6, 16], [6, 51], [6, 100], [1, 6]]) == 46\nassert solution.numberOfWeakCharacters([[99, 73], [96, 87], [88, 5], [88, 47], [86, 96], [85, 6], [85, 18], [84, 91], [80, 23], [78, 63], [76, 39], [74, 27], [74, 58], [70, 26], [68, 13], [67, 51], [66, 30], [66, 33], [61, 66], [58, 25], [58, 49], [58, 97], [57, 82], [50, 95], [48, 11], [48, 23], [43, 44], [42, 90], [40, 71], [40, 93], [39, 19], [37, 21], [37, 91], [34, 81], [29, 60], [26, 48], [25, 34], [19, 101], [18, 56], [18, 97], [14, 61], [5, 75], [5, 97], [2, 97], [1, 59], [1, 63]]) == 41\nassert solution.numberOfWeakCharacters([[80, 1], [68, 5], [55, 98], [19, 64], [7, 96], [2, 4]]) == 3\nassert solution.numberOfWeakCharacters([[101, 65], [100, 56], [99, 29], [99, 62], [99, 64], [98, 2], [95, 37], [94, 31], [94, 54], [94, 61], [89, 68], [87, 8], [87, 53], [87, 99], [85, 74], [84, 4], [84, 37], [84, 60], [83, 5], [81, 66], [81, 75], [78, 38], [78, 81], [77, 20], [76, 13], [76, 99], [74, 35], [74, 66], [74, 89], [73, 49], [73, 99], [72, 60], [71, 5], [71, 16], [71, 40], [71, 88], [68, 51], [65, 4], [65, 46], [62, 97], [61, 40], [60, 96], [58, 2], [58, 8], [57, 24], [56, 100], [54, 68], [54, 73], [53, 7], [53, 50], [53, 76], [48, 29], [48, 85], [47, 74], [47, 97], [46, 6], [44, 2], [44, 24], [41, 3], [39, 32], [38, 20], [38, 21], [38, 26], [36, 6], [36, 101], [35, 8], [35, 22], [33, 73], [27, 24], [26, 53], [25, 35], [25, 37], [24, 10], [23, 13], [23, 79], [22, 48], [22, 73], [20, 40], [19, 43], [15, 30], [15, 98], [12, 39], [12, 73], [11, 1], [11, 68], [9, 82], [6, 95], [4, 32], [3, 65], [3, 84], [1, 54]]) == 84\nassert solution.numberOfWeakCharacters([[98, 88], [96, 86], [95, 24], [93, 39], [92, 13], [91, 52], [91, 75], [91, 85], [89, 15], [88, 13], [87, 10], [85, 24], [84, 9], [84, 100], [83, 10], [77, 10], [76, 1], [76, 42], [73, 59], [69, 48], [66, 42], [65, 53], [64, 4], [61, 87], [60, 13], [57, 56], [57, 77], [55, 73], [55, 81], [54, 1], [54, 43], [54, 62], [52, 65], [51, 61], [50, 6], [50, 94], [49, 53], [49, 72], [48, 22], [48, 95], [47, 39], [46, 42], [45, 35], [44, 6], [42, 101], [41, 66], [40, 36], [40, 86], [39, 79], [38, 12], [38, 66], [36, 3], [36, 41], [36, 59], [35, 83], [35, 94], [34, 46], [34, 48], [34, 97], [33, 57], [33, 62], [32, 38], [27, 52], [26, 24], [25, 59], [22, 41], [22, 94], [21, 39], [20, 26], [14, 16], [13, 12], [13, 63], [13, 89], [12, 40], [12, 69], [10, 27], [10, 57], [9, 52], [8, 75], [8, 86], [5, 3], [5, 62], [4, 65], [4, 99], [3, 23], [3, 76], [3, 96]]) == 84\nassert solution.numberOfWeakCharacters([[101, 67], [98, 56], [96, 89], [91, 88], [90, 7], [90, 76], [88, 34], [88, 93], [85, 54], [81, 68], [79, 41], [78, 37], [77, 98], [75, 30], [73, 85], [72, 40], [71, 3], [68, 81], [67, 8], [63, 94], [61, 56], [61, 73], [58, 96], [56, 21], [54, 52], [51, 91], [50, 96], [46, 96], [31, 2], [29, 66], [28, 2], [27, 72], [26, 18], [25, 26], [25, 48], [24, 9], [23, 12], [21, 53], [20, 50], [19, 36], [17, 64], [16, 28], [10, 39], [6, 13], [6, 77], [3, 75], [2, 16]]) == 43\nassert solution.numberOfWeakCharacters([[101, 3], [100, 27], [98, 24], [98, 75], [98, 101], [96, 51], [95, 6], [95, 74], [94, 11], [93, 66], [93, 98], [92, 37], [87, 56], [84, 9], [82, 88], [80, 3], [80, 4], [80, 12], [80, 65], [79, 46], [79, 96], [77, 37], [75, 87], [74, 49], [74, 60], [73, 46], [73, 92], [70, 72], [69, 69], [68, 84], [67, 13], [65, 29], [65, 44], [65, 76], [64, 66], [64, 78], [63, 5], [63, 81], [62, 47], [62, 84], [60, 11], [59, 45], [57, 17], [57, 34], [57, 69], [54, 98], [52, 59], [51, 46], [49, 64], [48, 11], [48, 91], [47, 55], [46, 51], [43, 44], [42, 18], [42, 23], [42, 77], [41, 20], [41, 22], [41, 67], [40, 23], [39, 54], [34, 47], [33, 35], [31, 47], [30, 38], [28, 90], [27, 78], [24, 2], [21, 2], [21, 70], [20, 44], [20, 75], [18, 62], [17, 30], [16, 14], [15, 97], [14, 94], [13, 31], [11, 38], [10, 56], [9, 81], [9, 101], [8, 78], [6, 2], [6, 57], [5, 96], [3, 64]]) == 83\nassert solution.numberOfWeakCharacters([[101, 69], [100, 69], [97, 13], [96, 90], [95, 89], [93, 23], [88, 17], [86, 15], [85, 58], [83, 65], [83, 73], [82, 62], [82, 91], [81, 12], [79, 4], [78, 39], [74, 6], [74, 34], [74, 44], [73, 22], [72, 47], [72, 89], [71, 101], [67, 75], [66, 84], [65, 59], [62, 94], [61, 47], [60, 17], [60, 23], [60, 67], [60, 72], [59, 17], [58, 8], [55, 73], [52, 24], [51, 12], [51, 51], [50, 36], [49, 75], [47, 62], [47, 94], [47, 96], [46, 19], [44, 17], [44, 18], [40, 20], [35, 93], [33, 33], [33, 66], [33, 93], [31, 69], [30, 12], [30, 73], [25, 36], [24, 59], [22, 35], [22, 76], [21, 29], [20, 20], [20, 76], [20, 101], [19, 51], [19, 52], [19, 68], [18, 18], [18, 18], [17, 20], [14, 4], [12, 46], [11, 52], [9, 70], [8, 7], [6, 75], [6, 100], [5, 28], [5, 65], [5, 72], [5, 97], [4, 53], [3, 38], [3, 58], [2, 96], [1, 43]]) == 78\nassert solution.numberOfWeakCharacters([[101, 11], [99, 93], [96, 24], [96, 82], [91, 41], [89, 39], [87, 9], [87, 75], [82, 21], [81, 30], [80, 32], [69, 99], [67, 7], [67, 75], [60, 76], [57, 62], [57, 74], [55, 49], [55, 59], [54, 18], [52, 92], [50, 11], [48, 98], [46, 15], [45, 51], [45, 59], [45, 87], [36, 12], [34, 64], [31, 46], [27, 24], [26, 64], [21, 64], [21, 65], [18, 8], [14, 77], [12, 54], [12, 58], [12, 65], [8, 38], [7, 49], [1, 10]]) == 39\nassert solution.numberOfWeakCharacters([[101, 9], [101, 59], [99, 97], [94, 17], [94, 41], [89, 3], [88, 92], [87, 11], [87, 73], [87, 83], [85, 23], [85, 91], [85, 95], [83, 101], [80, 22], [79, 33], [76, 23], [76, 90], [75, 22], [75, 85], [74, 23], [74, 36], [74, 45], [74, 82], [74, 97], [71, 8], [71, 11], [70, 63], [65, 44], [64, 54], [64, 62], [63, 69], [60, 48], [60, 54], [58, 4], [58, 87], [58, 98], [56, 8], [56, 11], [56, 25], [55, 26], [54, 70], [53, 26], [50, 3], [50, 34], [49, 81], [48, 30], [45, 1], [45, 2], [45, 52], [45, 82], [44, 37], [44, 76], [43, 42], [43, 89], [43, 95], [40, 86], [39, 6], [39, 14], [38, 55], [36, 9], [36, 15], [36, 17], [35, 25], [33, 6], [33, 45], [32, 44], [31, 96], [29, 92], [28, 12], [28, 68], [27, 88], [26, 45], [23, 24], [23, 51], [22, 47], [21, 32], [21, 51], [20, 22], [19, 51], [16, 66], [15, 7], [10, 8], [10, 78], [8, 27], [5, 39], [5, 90], [3, 29], [2, 32], [1, 16]]) == 86\nassert solution.numberOfWeakCharacters([[100, 14], [100, 85], [99, 46], [99, 47], [97, 30], [94, 38], [92, 22], [90, 74], [90, 92], [86, 62], [85, 27], [84, 20], [83, 50], [82, 77], [79, 26], [78, 12], [78, 88], [77, 21], [76, 69], [75, 38], [75, 39], [74, 74], [74, 79], [73, 3], [73, 73], [70, 85], [68, 92], [67, 73], [66, 63], [63, 23], [63, 52], [63, 54], [62, 28], [62, 71], [62, 99], [58, 71], [57, 40], [57, 73], [57, 94], [56, 26], [56, 50], [56, 78], [55, 75], [54, 81], [54, 87], [53, 100], [50, 18], [50, 82], [47, 57], [47, 101], [46, 44], [45, 36], [44, 33], [43, 26], [42, 83], [41, 41], [41, 94], [40, 9], [40, 30], [40, 41], [38, 39], [34, 11], [33, 78], [31, 61], [31, 91], [29, 95], [28, 33], [28, 49], [27, 45], [27, 96], [27, 101], [25, 69], [25, 87], [24, 54], [24, 74], [23, 22], [22, 37], [21, 39], [20, 101], [19, 68], [18, 62], [18, 70], [17, 66], [16, 63], [14, 47], [12, 22], [12, 24], [9, 54], [8, 94], [4, 13], [1, 57]]) == 82\nassert solution.numberOfWeakCharacters([[100, 53], [100, 59], [100, 74], [97, 43], [95, 20], [95, 66], [89, 72], [83, 78], [78, 33], [73, 23], [69, 16], [68, 89], [68, 94], [67, 6], [61, 76], [59, 15], [58, 21], [45, 17], [44, 38], [39, 74], [35, 85], [29, 85], [29, 101], [24, 54], [23, 32], [23, 37], [20, 63], [19, 75], [19, 84], [17, 92], [16, 7], [15, 91], [14, 59], [13, 93], [9, 43], [7, 45], [6, 54], [3, 99], [2, 24], [1, 86]]) == 33\nassert solution.numberOfWeakCharacters([[96, 99], [94, 91], [91, 85], [87, 75], [80, 49], [77, 50], [77, 58], [70, 96], [69, 64], [64, 43], [61, 8], [60, 35], [56, 12], [56, 91], [54, 30], [46, 63], [41, 20], [32, 95], [29, 38], [28, 52], [24, 48], [19, 24], [18, 43], [6, 88], [3, 16]]) == 24\nassert solution.numberOfWeakCharacters([[99, 73], [99, 82], [98, 82], [97, 80], [96, 14], [96, 30], [94, 42], [89, 8], [81, 57], [70, 89], [65, 52], [61, 37], [57, 20], [57, 53], [56, 13], [56, 58], [56, 88], [55, 79], [53, 54], [52, 61], [51, 45], [51, 90], [49, 61], [45, 78], [40, 81], [38, 38], [30, 10], [29, 58], [25, 85], [24, 14], [20, 41], [19, 43], [17, 98], [14, 12], [13, 28], [11, 62], [10, 58], [7, 7], [5, 81]]) == 33\nassert solution.numberOfWeakCharacters([[101, 96], [98, 22], [98, 101], [95, 81], [90, 40], [87, 29], [84, 24], [82, 67], [82, 94], [79, 44], [71, 37], [69, 11], [69, 81], [65, 56], [65, 63], [64, 8], [63, 75], [61, 44], [56, 76], [55, 30], [54, 17], [51, 41], [44, 33], [44, 65], [39, 77], [33, 41], [30, 100], [26, 18], [23, 38], [23, 45], [19, 32], [18, 14], [17, 82], [14, 22], [7, 9], [6, 3], [5, 8], [5, 24], [3, 52], [2, 98]]) == 38\nassert solution.numberOfWeakCharacters([[100, 7], [99, 30], [97, 47], [95, 73], [94, 87], [92, 71], [90, 42], [90, 52], [89, 98], [88, 98], [85, 49], [83, 47], [82, 65], [81, 41], [81, 79], [79, 5], [78, 12], [78, 97], [75, 56], [75, 62], [74, 53], [74, 70], [73, 10], [73, 20], [71, 19], [69, 27], [69, 69], [63, 88], [61, 13], [61, 61], [57, 59], [55, 63], [54, 19], [54, 46], [54, 64], [53, 21], [52, 62], [49, 27], [49, 27], [49, 98], [45, 29], [45, 59], [45, 60], [42, 48], [42, 82], [40, 30], [38, 77], [37, 65], [35, 43], [34, 58], [33, 41], [32, 58], [32, 60], [31, 26], [29, 72], [26, 47], [26, 59], [25, 76], [22, 60], [21, 84], [20, 33], [20, 78], [19, 40], [16, 8], [16, 89], [15, 92], [14, 86], [13, 32], [12, 36], [11, 3], [11, 9], [11, 61], [8, 68], [8, 70], [8, 81], [7, 4], [6, 68], [5, 11], [5, 32], [5, 67], [4, 81], [2, 56], [1, 80]]) == 75\nassert solution.numberOfWeakCharacters([[100, 98], [95, 86], [90, 99], [86, 86], [85, 97], [79, 55], [78, 21], [71, 27], [68, 16], [63, 26], [62, 10], [61, 46], [60, 67], [54, 47], [49, 58], [49, 67], [48, 14], [47, 41], [45, 49], [45, 88], [44, 21], [43, 89], [40, 88], [39, 86], [38, 24], [31, 48], [30, 99], [29, 60], [23, 25], [23, 77], [21, 59], [18, 58], [16, 34], [15, 38], [10, 54], [8, 16], [7, 59], [3, 52], [3, 62]]) == 36\nassert solution.numberOfWeakCharacters([[100, 79], [96, 92], [95, 43], [95, 53], [94, 51], [93, 81], [91, 56], [88, 18], [88, 68], [87, 45], [87, 93], [86, 19], [86, 69], [83, 34], [82, 86], [81, 15], [80, 34], [80, 75], [80, 79], [79, 5], [78, 86], [76, 6], [74, 22], [73, 53], [73, 62], [73, 80], [72, 53], [71, 15], [69, 21], [69, 71], [67, 8], [67, 49], [67, 50], [65, 81], [64, 65], [63, 41], [63, 81], [62, 63], [60, 63], [59, 100], [58, 28], [54, 77], [54, 83], [54, 86], [52, 7], [50, 31], [46, 75], [46, 91], [46, 91], [43, 12], [43, 71], [42, 55], [42, 57], [38, 31], [37, 21], [35, 48], [34, 9], [34, 76], [34, 101], [32, 100], [29, 54], [28, 1], [28, 34], [27, 80], [24, 92], [22, 82], [21, 44], [19, 3], [19, 33], [19, 38], [19, 69], [18, 61], [16, 63], [15, 17], [15, 18], [14, 2], [14, 15], [14, 93], [8, 1], [8, 4], [8, 10], [8, 31], [7, 28], [6, 58], [6, 84], [6, 95], [5, 57], [5, 78], [3, 83], [1, 55]]) == 85\nassert solution.numberOfWeakCharacters([[100, 92], [92, 45], [90, 9], [90, 49], [83, 10], [78, 29], [73, 68], [66, 34], [60, 48], [60, 81], [59, 19], [55, 44], [52, 40], [48, 26], [44, 22], [44, 22], [41, 35], [39, 70], [27, 90], [26, 3], [23, 67], [23, 95], [18, 10], [18, 85], [17, 48], [12, 11], [9, 2]]) == 25\nassert solution.numberOfWeakCharacters([[101, 98], [100, 22], [99, 89], [97, 4], [97, 44], [97, 93], [96, 11], [93, 92], [93, 95], [92, 55], [91, 84], [90, 31], [90, 70], [87, 1], [85, 74], [85, 101], [83, 16], [83, 70], [82, 4], [82, 67], [81, 36], [80, 32], [79, 15], [78, 20], [78, 52], [77, 36], [76, 2], [75, 11], [75, 44], [75, 90], [74, 81], [73, 50], [72, 54], [71, 17], [71, 74], [68, 21], [68, 39], [68, 97], [63, 4], [63, 23], [62, 28], [62, 72], [60, 8], [60, 14], [59, 9], [59, 33], [59, 34], [58, 44], [57, 99], [56, 35], [55, 54], [52, 45], [51, 29], [51, 70], [48, 11], [46, 101], [43, 99], [42, 32], [39, 7], [39, 42], [38, 91], [37, 53], [35, 29], [34, 39], [34, 97], [33, 39], [33, 55], [33, 99], [33, 99], [32, 18], [30, 100], [29, 3], [28, 56], [26, 29], [22, 43], [22, 77], [21, 31], [16, 27], [16, 28], [16, 65], [16, 78], [14, 18], [14, 35], [14, 91], [13, 87], [11, 36], [9, 24], [9, 78], [7, 24], [6, 57], [6, 71], [4, 1], [3, 45], [2, 50], [1, 86]]) == 92\nassert solution.numberOfWeakCharacters([[101, 64], [94, 19], [93, 3], [93, 31], [89, 39], [88, 8], [86, 72], [85, 32], [84, 80], [83, 73], [82, 101], [81, 6], [78, 7], [78, 49], [76, 12], [76, 18], [70, 3], [65, 94], [64, 79], [63, 98], [59, 74], [58, 20], [55, 40], [50, 67], [46, 59], [46, 95], [44, 29], [44, 96], [43, 54], [43, 67], [43, 83], [43, 96], [42, 12], [42, 13], [41, 85], [39, 80], [37, 15], [36, 83], [35, 16], [35, 18], [35, 71], [32, 51], [31, 89], [30, 12], [25, 8], [23, 70], [23, 75], [22, 31], [22, 65], [20, 13], [20, 101], [18, 3], [18, 37], [17, 87], [16, 5], [15, 34], [15, 88], [14, 43], [14, 48], [11, 15], [11, 87], [9, 35], [8, 13], [6, 90], [5, 58], [3, 92], [1, 50]]) == 62\nassert solution.numberOfWeakCharacters([[101, 100], [100, 63], [100, 91], [98, 54], [98, 84], [94, 4], [93, 11], [92, 55], [89, 64], [87, 9], [85, 45], [84, 8], [81, 81], [78, 74], [77, 50], [74, 44], [70, 25], [64, 51], [62, 51], [61, 83], [59, 69], [57, 36], [57, 98], [55, 34], [55, 80], [54, 38], [54, 75], [50, 36], [48, 70], [46, 5], [46, 81], [42, 85], [37, 7], [37, 86], [36, 88], [35, 53], [35, 54], [35, 70], [34, 51], [33, 79], [29, 80], [28, 76], [26, 25], [26, 29], [26, 42], [25, 28], [24, 27], [24, 75], [22, 76], [21, 73], [19, 42], [16, 10], [16, 52], [14, 100], [13, 34], [13, 76], [11, 25], [11, 56], [11, 72], [11, 94], [10, 34], [9, 91], [8, 91], [7, 56], [7, 94], [6, 67], [5, 72], [1, 17]]) == 66\nassert solution.numberOfWeakCharacters([[89, 67], [83, 33], [82, 16], [79, 68], [60, 14], [59, 65], [55, 18], [43, 14], [42, 54], [36, 97], [24, 78], [15, 18], [14, 38], [14, 97], [10, 38], [1, 35]]) == 12\nassert solution.numberOfWeakCharacters([[100, 11], [98, 13], [97, 65], [97, 96], [97, 100], [95, 24], [92, 17], [92, 82], [92, 85], [86, 76], [85, 63], [84, 9], [84, 71], [81, 64], [81, 97], [77, 100], [75, 14], [70, 1], [70, 32], [67, 84], [66, 19], [65, 60], [62, 32], [60, 43], [58, 101], [57, 63], [56, 29], [55, 72], [52, 72], [49, 78], [42, 83], [41, 76], [41, 81], [34, 26], [34, 52], [34, 84], [33, 33], [31, 92], [29, 86], [28, 30], [26, 53], [23, 50], [22, 21], [17, 54], [17, 88], [15, 18], [14, 48], [14, 72], [12, 33], [8, 71], [7, 31], [1, 4]]) == 45\nassert solution.numberOfWeakCharacters([[101, 74], [98, 12], [96, 63], [90, 28], [90, 64], [88, 89], [86, 52], [86, 94], [78, 101], [74, 16], [74, 62], [72, 90], [68, 100], [66, 90], [64, 37], [60, 59], [58, 28], [51, 86], [46, 53], [46, 86], [40, 62], [38, 51], [29, 86], [22, 7], [21, 50], [1, 57]]) == 22\nassert solution.numberOfWeakCharacters([[97, 28], [95, 8], [89, 15], [85, 89], [81, 78], [81, 100], [77, 33], [66, 41], [63, 9], [63, 88], [59, 27], [59, 83], [58, 13], [58, 67], [45, 69], [39, 10], [37, 57], [35, 12], [34, 22], [33, 78], [32, 64], [31, 23], [28, 2], [28, 86], [27, 3], [27, 31], [25, 45], [24, 27], [23, 21], [23, 60], [22, 69], [21, 62], [20, 96], [18, 19], [17, 30], [17, 82], [14, 85], [11, 23], [11, 28], [10, 52], [8, 1], [6, 2], [6, 10], [6, 33], [5, 97], [4, 50], [3, 8]]) == 44\nassert solution.numberOfWeakCharacters([[100, 30], [100, 50], [99, 11], [99, 29], [99, 29], [99, 33], [99, 79], [98, 78], [97, 11], [96, 38], [94, 54], [93, 74], [93, 93], [89, 5], [89, 43], [89, 47], [88, 27], [88, 90], [87, 3], [82, 72], [78, 84], [77, 24], [77, 45], [77, 66], [76, 2], [74, 33], [71, 57], [70, 7], [69, 23], [68, 23], [68, 24], [68, 89], [66, 41], [66, 68], [64, 92], [63, 60], [63, 84], [62, 33], [62, 58], [62, 94], [61, 84], [60, 46], [59, 101], [55, 34], [55, 48], [53, 69], [53, 97], [52, 60], [50, 38], [50, 70], [46, 28], [46, 69], [43, 35], [41, 41], [40, 5], [39, 17], [38, 50], [37, 36], [36, 24], [36, 27], [36, 79], [34, 43], [33, 50], [31, 10], [30, 60], [27, 33], [26, 30], [25, 21], [25, 72], [21, 54], [19, 82], [18, 85], [16, 7], [16, 19], [16, 48], [14, 83], [13, 9], [12, 68], [11, 70], [7, 17], [6, 48], [4, 44], [2, 21], [1, 17]]) == 78\nassert solution.numberOfWeakCharacters([[100, 35], [96, 91], [94, 54], [94, 78], [79, 98], [78, 78], [77, 84], [76, 22], [73, 35], [70, 66], [68, 76], [66, 70], [65, 15], [63, 14], [63, 46], [63, 54], [62, 77], [61, 6], [61, 46], [58, 89], [58, 98], [56, 80], [55, 93], [52, 52], [50, 5], [50, 97], [48, 42], [47, 68], [46, 27], [44, 54], [42, 18], [42, 46], [42, 60], [38, 5], [37, 41], [36, 51], [35, 47], [34, 97], [32, 33], [29, 85], [28, 39], [28, 78], [23, 16], [23, 57], [23, 69], [15, 55], [15, 77], [15, 88], [14, 86], [13, 50], [12, 46], [12, 97], [8, 14], [2, 93], [1, 43]]) == 51\nassert solution.numberOfWeakCharacters([[99, 65], [98, 24], [95, 63], [93, 28], [93, 75], [90, 6], [90, 11], [90, 50], [88, 28], [88, 47], [87, 84], [81, 71], [80, 61], [78, 17], [78, 71], [77, 84], [75, 30], [64, 12], [61, 91], [59, 10], [59, 12], [56, 26], [52, 75], [50, 17], [40, 17], [35, 49], [30, 92], [28, 39], [27, 18], [25, 76], [19, 81], [18, 99], [15, 29], [13, 8], [12, 83]]) == 28\nassert solution.numberOfWeakCharacters([[101, 75], [100, 37], [100, 58], [100, 101], [98, 2], [91, 19], [90, 5], [90, 39], [89, 67], [88, 48], [87, 25], [87, 101], [86, 36], [85, 77], [84, 13], [84, 36], [84, 83], [82, 53], [81, 86], [80, 9], [80, 51], [80, 100], [79, 62], [79, 100], [76, 84], [73, 81], [71, 26], [71, 80], [68, 62], [67, 40], [66, 34], [66, 38], [65, 43], [62, 80], [61, 66], [60, 28], [60, 71], [59, 80], [57, 63], [57, 83], [56, 35], [56, 52], [54, 8], [54, 31], [52, 75], [52, 92], [51, 88], [50, 20], [50, 66], [50, 98], [49, 33], [48, 43], [48, 89], [45, 4], [44, 44], [44, 56], [44, 72], [43, 99], [42, 44], [40, 46], [40, 82], [38, 1], [38, 13], [38, 48], [38, 75], [37, 24], [36, 8], [36, 25], [36, 52], [36, 98], [35, 25], [35, 38], [35, 40], [29, 21], [27, 51], [27, 79], [24, 50], [23, 16], [20, 36], [17, 29], [17, 64], [16, 18], [14, 39], [14, 62], [13, 34], [12, 12], [12, 63], [11, 66], [10, 20], [10, 44], [10, 93], [8, 77], [8, 85], [6, 43], [5, 64], [3, 34], [3, 82], [2, 8], [1, 92]]) == 96\nassert solution.numberOfWeakCharacters([[99, 36], [94, 79], [92, 86], [91, 16], [91, 76], [87, 32], [85, 3], [85, 12], [85, 17], [84, 70], [83, 56], [83, 68], [81, 87], [80, 86], [79, 101], [75, 50], [75, 58], [74, 3], [74, 26], [71, 12], [71, 72], [69, 32], [66, 3], [66, 9], [65, 12], [64, 90], [63, 91], [62, 77], [61, 36], [59, 98], [58, 29], [57, 79], [56, 13], [55, 49], [55, 82], [53, 71], [52, 15], [50, 13], [49, 24], [47, 19], [44, 7], [44, 50], [43, 44], [41, 79], [40, 42], [40, 64], [39, 6], [39, 63], [38, 64], [37, 32], [37, 38], [36, 82], [34, 84], [28, 28], [27, 28], [26, 5], [26, 54], [26, 79], [25, 2], [24, 59], [20, 63], [14, 57], [14, 64], [9, 89], [3, 29], [2, 10], [2, 78]]) == 62\nassert solution.numberOfWeakCharacters([[99, 66], [98, 74], [97, 71], [94, 18], [93, 78], [92, 68], [91, 58], [89, 15], [89, 88], [83, 10], [81, 29], [80, 101], [78, 27], [74, 21], [70, 5], [70, 51], [70, 66], [68, 64], [65, 30], [62, 43], [62, 46], [61, 82], [59, 23], [59, 99], [59, 101], [57, 54], [57, 56], [57, 99], [56, 44], [55, 68], [54, 88], [49, 18], [49, 23], [48, 44], [48, 62], [46, 22], [46, 93], [44, 30], [43, 24], [43, 33], [43, 78], [43, 82], [43, 93], [41, 47], [39, 77], [38, 8], [35, 40], [31, 22], [27, 93], [26, 21], [26, 97], [25, 9], [21, 5], [21, 95], [18, 22], [16, 8], [16, 65], [13, 7], [13, 51], [5, 19]]) == 54\nassert solution.numberOfWeakCharacters([[101, 6], [97, 31], [96, 68], [95, 27], [83, 30], [74, 77], [73, 71], [70, 34], [67, 10], [66, 97], [64, 73], [63, 35], [61, 28], [59, 86], [58, 36], [58, 80], [58, 81], [57, 60], [55, 1], [46, 31], [40, 39], [39, 100], [36, 38], [27, 20], [25, 9], [15, 48], [8, 62]]) == 21\nassert solution.numberOfWeakCharacters([[101, 66], [100, 25], [92, 6], [92, 96], [89, 54], [89, 68], [87, 72], [86, 85], [83, 52], [81, 60], [80, 10], [78, 92], [77, 72], [76, 90], [65, 52], [60, 76], [57, 9], [57, 85], [55, 27], [55, 74], [54, 79], [52, 74], [51, 39], [51, 94], [50, 93], [47, 3], [47, 91], [43, 3], [43, 90], [40, 16], [37, 55], [37, 80], [29, 46], [28, 76], [27, 82], [26, 54], [26, 78], [24, 92], [20, 1], [20, 35], [18, 48], [16, 6], [16, 101], [15, 33], [13, 92], [12, 9], [12, 27], [11, 96], [9, 26], [9, 75], [7, 31], [6, 5]]) == 49\nassert solution.numberOfWeakCharacters([[96, 96], [81, 64], [76, 100], [67, 47], [66, 64], [60, 28], [59, 46], [45, 6], [42, 62], [42, 72], [32, 45], [30, 6], [13, 21], [9, 46]]) == 12\nassert solution.numberOfWeakCharacters([[100, 69], [100, 77], [99, 47], [98, 15], [92, 96], [81, 44], [81, 56], [73, 9], [72, 14], [66, 39], [64, 17], [63, 61], [62, 32], [61, 8], [60, 53], [59, 93], [59, 97], [52, 19], [51, 57], [48, 67], [47, 40], [46, 39], [45, 7], [43, 49], [42, 4], [40, 18], [31, 28], [28, 9], [25, 8], [23, 66], [21, 18], [19, 11], [19, 69], [18, 76], [18, 90], [13, 87], [12, 40], [11, 22], [11, 30], [7, 18], [7, 32], [5, 87], [2, 21], [2, 83], [2, 94]]) == 41\nassert solution.numberOfWeakCharacters([[91, 74], [85, 4], [85, 99], [82, 58], [81, 68], [80, 6], [80, 62], [77, 72], [76, 84], [73, 61], [72, 82], [70, 25], [69, 81], [67, 99], [66, 42], [65, 1], [65, 44], [64, 30], [61, 21], [57, 58], [55, 48], [54, 13], [54, 57], [52, 36], [52, 91], [46, 36], [46, 91], [45, 92], [42, 85], [41, 74], [36, 8], [34, 39], [33, 21], [33, 24], [32, 101], [27, 40], [24, 4], [21, 38], [21, 68], [20, 34], [18, 31], [13, 4], [12, 85], [11, 13], [11, 64], [11, 90], [9, 23], [5, 59]]) == 44\nassert solution.numberOfWeakCharacters([[101, 72], [98, 97], [97, 80], [93, 4], [93, 80], [91, 35], [90, 63], [87, 85], [85, 14], [78, 24], [76, 56], [71, 92], [70, 11], [68, 96], [67, 83], [65, 81], [65, 94], [63, 68], [63, 82], [62, 66], [61, 3], [59, 7], [58, 19], [55, 77], [54, 90], [53, 95], [50, 64], [50, 82], [48, 10], [47, 77], [41, 12], [37, 8], [35, 96], [32, 35], [31, 24], [30, 13], [29, 73], [29, 92], [26, 15], [26, 18], [26, 50], [22, 78], [21, 9], [20, 4], [20, 74], [19, 92], [18, 4], [17, 72], [14, 97], [12, 73], [8, 57], [8, 89], [7, 2], [2, 10], [2, 50], [1, 23]]) == 53\nassert solution.numberOfWeakCharacters([[100, 69], [99, 20], [97, 24], [96, 29], [96, 68], [95, 52], [94, 11], [94, 11], [94, 40], [90, 27], [90, 51], [89, 50], [87, 4], [87, 76], [87, 80], [87, 98], [86, 4], [83, 14], [81, 99], [79, 14], [77, 8], [77, 63], [76, 68], [72, 56], [71, 6], [67, 43], [67, 57], [63, 96], [62, 80], [61, 3], [61, 93], [60, 2], [57, 96], [56, 5], [56, 83], [55, 21], [55, 83], [54, 23], [52, 20], [51, 54], [47, 26], [42, 50], [40, 85], [39, 54], [38, 46], [35, 74], [34, 70], [34, 81], [32, 56], [29, 10], [29, 63], [28, 75], [26, 61], [26, 94], [24, 12], [24, 45], [20, 12], [19, 69], [16, 83], [12, 14], [12, 44], [11, 68], [9, 11], [9, 68], [5, 12], [4, 70], [2, 62]]) == 62\nassert solution.numberOfWeakCharacters([[101, 99], [99, 87], [95, 39], [95, 68], [94, 58], [94, 67], [94, 72], [93, 5], [93, 35], [93, 57], [90, 99], [89, 7], [89, 92], [88, 17], [88, 18], [84, 59], [84, 71], [83, 7], [83, 46], [83, 75], [82, 12], [82, 12], [82, 39], [82, 48], [82, 72], [82, 77], [79, 58], [79, 65], [77, 22], [73, 32], [73, 100], [72, 9], [72, 18], [72, 32], [72, 99], [71, 41], [68, 38], [67, 36], [66, 10], [65, 62], [65, 72], [64, 97], [61, 39], [60, 19], [59, 38], [58, 13], [56, 52], [56, 60], [54, 64], [54, 81], [53, 18], [52, 4], [52, 25], [48, 8], [48, 89], [47, 94], [44, 100], [43, 51], [43, 89], [42, 87], [36, 96], [31, 29], [31, 85], [26, 98], [25, 48], [21, 42], [21, 78], [21, 92], [19, 62], [18, 10], [17, 82], [15, 70], [14, 63], [11, 54], [10, 10], [10, 15], [9, 17], [9, 34], [9, 36], [9, 49], [8, 5], [7, 77], [4, 35], [3, 27], [2, 73], [2, 94]]) == 82\nassert solution.numberOfWeakCharacters([[100, 31], [100, 79], [96, 27], [95, 25], [93, 38], [91, 69], [91, 94], [80, 72], [75, 99], [74, 11], [74, 76], [73, 63], [68, 89], [66, 9], [63, 43], [61, 22], [61, 59], [53, 49], [50, 47], [48, 27], [48, 54], [48, 88], [45, 14], [35, 52], [33, 79], [31, 18], [29, 23], [27, 47], [26, 98], [25, 39], [25, 75], [24, 55], [17, 94], [13, 84], [11, 26], [6, 20], [5, 23], [3, 40], [1, 16], [1, 53]]) == 36\nassert solution.numberOfWeakCharacters([[101, 15], [101, 76], [100, 13], [100, 21], [98, 8], [98, 94], [94, 15], [92, 82], [86, 11], [86, 29], [85, 41], [84, 14], [84, 17], [81, 50], [78, 22], [78, 91], [76, 82], [74, 57], [74, 83], [72, 5], [72, 19], [71, 65], [71, 95], [69, 50], [68, 77], [68, 98], [65, 64], [61, 8], [60, 37], [60, 72], [60, 96], [59, 97], [58, 45], [53, 31], [53, 37], [53, 50], [52, 22], [49, 32], [46, 50], [44, 83], [42, 2], [42, 71], [39, 65], [38, 4], [34, 45], [33, 32], [31, 29], [31, 95], [29, 29], [28, 35], [26, 67], [26, 94], [25, 1], [25, 31], [22, 82], [21, 72], [20, 57], [19, 52], [16, 23], [16, 44], [15, 41], [15, 64], [12, 23], [11, 56], [9, 6], [9, 78], [6, 49], [6, 72], [5, 30], [4, 15], [4, 51], [2, 7], [1, 55], [1, 79]]) == 69\nassert solution.numberOfWeakCharacters([[101, 45], [100, 93], [98, 2], [98, 38], [96, 1], [96, 41], [95, 52], [95, 98], [94, 36], [89, 56], [89, 85], [87, 66], [86, 7], [86, 7], [86, 74], [85, 7], [84, 42], [83, 17], [83, 68], [81, 70], [81, 82], [80, 101], [75, 19], [75, 38], [74, 6], [74, 64], [74, 86], [73, 4], [73, 40], [73, 91], [70, 48], [69, 3], [69, 41], [67, 21], [67, 86], [66, 17], [65, 56], [64, 72], [63, 44], [63, 80], [63, 86], [62, 6], [62, 50], [62, 100], [61, 5], [61, 45], [60, 50], [59, 29], [59, 53], [58, 43], [57, 15], [56, 66], [56, 96], [54, 15], [54, 33], [54, 96], [53, 12], [53, 45], [50, 84], [50, 100], [49, 74], [48, 89], [47, 85], [46, 52], [46, 66], [45, 70], [42, 17], [36, 70], [34, 72], [33, 20], [33, 38], [32, 37], [32, 76], [32, 84], [30, 24], [29, 37], [29, 96], [27, 68], [26, 35], [26, 56], [26, 87], [25, 27], [24, 84], [24, 91], [21, 50], [21, 79], [20, 49], [19, 42], [18, 5], [18, 12], [18, 94], [17, 76], [16, 96], [15, 57], [15, 64], [12, 84], [12, 86], [10, 82], [9, 28], [9, 48], [8, 81]]) == 97\nassert solution.numberOfWeakCharacters([[100, 6], [99, 50], [99, 99], [97, 76], [96, 4], [96, 34], [95, 20], [94, 35], [93, 25], [90, 54], [89, 77], [88, 59], [86, 4], [86, 5], [86, 14], [85, 66], [82, 49], [82, 67], [82, 72], [81, 22], [81, 74], [80, 81], [80, 98], [77, 10], [76, 101], [74, 12], [74, 24], [74, 85], [70, 53], [69, 5], [69, 69], [68, 64], [67, 5], [66, 34], [64, 8], [63, 24], [63, 89], [62, 48], [58, 19], [56, 2], [55, 36], [53, 45], [51, 6], [51, 92], [49, 93], [48, 73], [47, 1], [46, 51], [45, 11], [44, 85], [44, 94], [43, 84], [38, 28], [37, 79], [35, 46], [35, 51], [33, 76], [30, 84], [29, 80], [29, 83], [27, 68], [26, 25], [26, 83], [25, 59], [24, 37], [24, 90], [23, 53], [21, 71], [21, 78], [21, 98], [20, 27], [17, 54], [16, 99], [15, 42], [15, 66], [13, 33], [12, 43], [11, 9], [10, 46], [10, 59], [7, 77], [7, 86], [6, 8], [6, 51], [5, 82], [2, 84], [2, 100], [1, 92], [1, 100], [1, 100]]) == 86\nassert solution.numberOfWeakCharacters([[101, 10], [101, 38], [101, 61], [101, 73], [97, 81], [97, 101], [96, 63], [92, 40], [92, 84], [90, 97], [89, 40], [85, 62], [82, 79], [78, 50], [78, 93], [77, 50], [76, 77], [75, 69], [74, 17], [73, 79], [73, 90], [72, 50], [71, 30], [70, 58], [67, 1], [67, 55], [66, 1], [66, 89], [66, 99], [65, 6], [65, 20], [64, 21], [64, 38], [63, 11], [63, 90], [62, 8], [61, 7], [58, 27], [58, 81], [57, 99], [56, 5], [56, 67], [55, 6], [54, 38], [52, 2], [52, 18], [52, 27], [51, 63], [50, 60], [47, 3], [43, 24], [43, 46], [43, 98], [41, 81], [39, 35], [38, 45], [38, 100], [37, 49], [36, 6], [35, 57], [35, 87], [33, 12], [33, 32], [33, 67], [32, 59], [31, 67], [29, 94], [28, 76], [27, 23], [27, 24], [25, 73], [21, 29], [21, 31], [21, 32], [20, 31], [17, 60], [16, 16], [16, 19], [16, 85], [15, 25], [13, 33], [13, 73], [11, 94], [10, 75], [9, 22], [9, 76], [8, 39], [6, 8], [6, 9], [5, 3], [3, 92]]) == 85\nassert solution.numberOfWeakCharacters([[99, 31], [97, 23], [97, 52], [92, 31], [88, 72], [86, 21], [81, 50], [81, 95], [79, 8], [79, 57], [77, 8], [76, 11], [72, 46], [69, 31], [64, 39], [58, 62], [57, 43], [56, 87], [51, 47], [50, 46], [42, 1], [34, 81], [21, 48], [17, 15], [13, 43], [11, 49], [5, 60], [1, 73]]) == 24\nassert solution.numberOfWeakCharacters([[101, 79], [100, 16], [99, 16], [96, 30], [93, 78], [91, 26], [89, 26], [89, 30], [88, 17], [88, 46], [88, 73], [87, 90], [86, 1], [86, 5], [86, 26], [86, 35], [86, 77], [84, 32], [82, 87], [81, 75], [80, 1], [80, 71], [79, 7], [78, 14], [78, 92], [78, 98], [77, 50], [77, 82], [74, 70], [73, 44], [73, 52], [73, 59], [73, 83], [72, 16], [72, 81], [65, 7], [63, 18], [62, 64], [62, 75], [61, 20], [61, 35], [61, 38], [61, 81], [56, 15], [56, 83], [54, 5], [54, 77], [53, 30], [53, 60], [53, 93], [46, 90], [45, 33], [44, 83], [42, 18], [41, 44], [41, 100], [39, 12], [39, 30], [39, 100], [37, 90], [36, 40], [35, 2], [35, 25], [35, 65], [32, 7], [31, 15], [30, 10], [30, 73], [29, 70], [28, 78], [27, 93], [22, 27], [22, 42], [22, 66], [21, 1], [19, 42], [18, 28], [16, 39], [13, 99], [12, 9], [12, 81], [11, 50], [11, 80], [11, 93], [10, 92], [9, 29], [9, 80], [8, 73], [7, 19], [7, 45], [7, 55], [6, 92], [3, 23], [3, 30], [2, 17]]) == 89\nassert solution.numberOfWeakCharacters([[80, 31], [68, 99], [66, 24], [65, 28], [61, 39], [41, 23], [36, 23], [34, 91], [22, 92], [17, 43]]) == 8\nassert solution.numberOfWeakCharacters([[100, 86], [97, 45], [85, 60], [82, 61], [82, 81], [78, 70], [77, 50], [75, 19], [73, 93], [72, 57], [70, 85], [67, 95], [66, 79], [60, 100], [59, 83], [57, 97], [56, 3], [56, 18], [54, 49], [43, 79], [39, 52], [36, 27], [36, 27], [36, 98], [35, 63], [35, 82], [35, 91], [32, 100], [29, 7], [27, 1], [25, 28], [21, 80], [20, 60], [20, 100], [19, 66], [17, 75], [14, 6], [14, 89], [13, 28], [12, 88], [8, 73], [4, 24], [3, 98]]) == 37\nassert solution.numberOfWeakCharacters([[101, 80], [100, 61], [97, 43], [90, 97], [87, 91], [86, 67], [84, 32], [83, 85], [82, 100], [79, 20], [78, 70], [77, 33], [77, 75], [76, 5], [76, 39], [74, 84], [66, 51], [64, 91], [61, 11], [57, 44], [57, 71], [56, 15], [54, 18], [53, 56], [51, 15], [49, 19], [45, 80], [44, 34], [42, 4], [41, 6], [33, 65], [30, 25], [29, 30], [23, 10], [21, 62], [19, 63], [15, 8], [15, 81], [12, 80], [4, 75], [1, 25]]) == 38\nassert solution.numberOfWeakCharacters([[101, 97], [99, 65], [97, 32], [94, 97], [93, 19], [93, 87], [92, 22], [90, 2], [90, 4], [90, 91], [86, 12], [85, 34], [84, 92], [79, 23], [75, 29], [74, 31], [73, 91], [69, 27], [69, 52], [69, 76], [67, 38], [58, 17], [58, 32], [58, 45], [54, 66], [53, 84], [50, 74], [42, 33], [41, 85], [40, 89], [39, 51], [38, 96], [35, 25], [33, 56], [32, 50], [29, 52], [27, 71], [25, 70], [25, 80], [23, 9], [23, 83], [15, 35], [14, 14], [11, 32], [10, 84], [7, 1], [7, 9], [2, 44], [1, 8], [1, 101]]) == 47\nassert solution.numberOfWeakCharacters([[101, 38], [101, 88], [94, 74], [92, 13], [90, 84], [85, 43], [84, 78], [83, 42], [81, 59], [77, 29], [77, 53], [76, 91], [74, 16], [71, 30], [71, 86], [70, 10], [67, 5], [66, 16], [64, 59], [63, 18], [63, 47], [59, 22], [59, 60], [59, 70], [58, 17], [57, 55], [56, 38], [53, 97], [52, 97], [51, 50], [50, 84], [48, 26], [45, 18], [45, 37], [44, 45], [41, 42], [40, 6], [38, 77], [37, 60], [37, 95], [28, 3], [28, 24], [24, 22], [24, 33], [24, 52], [19, 20], [16, 38], [16, 76], [15, 10], [10, 66], [7, 59], [6, 13], [6, 100], [1, 16]]) == 48\nassert solution.numberOfWeakCharacters([[100, 46], [99, 76], [94, 26], [93, 4], [93, 34], [92, 57], [91, 66], [90, 42], [89, 55], [87, 54], [84, 42], [83, 43], [81, 1], [79, 77], [76, 5], [65, 12], [65, 48], [65, 89], [58, 98], [53, 66], [52, 85], [48, 96], [47, 42], [46, 74], [43, 2], [42, 27], [40, 10], [37, 91], [35, 35], [29, 41], [29, 100], [27, 81], [26, 48], [18, 66], [17, 84], [16, 60], [16, 63], [13, 77], [7, 83], [4, 44], [2, 100]]) == 34\nassert solution.numberOfWeakCharacters([[101, 86], [96, 48], [95, 15], [92, 15], [89, 74], [82, 61], [79, 83], [78, 101], [75, 89], [73, 81], [71, 61], [67, 36], [64, 80], [63, 9], [62, 1], [62, 37], [61, 93], [59, 41], [59, 84], [55, 66], [51, 42], [47, 49], [46, 18], [46, 88], [35, 93], [27, 84], [7, 45], [2, 74]]) == 26\nassert solution.numberOfWeakCharacters([[101, 87], [100, 88], [100, 101], [99, 81], [95, 45], [94, 16], [91, 85], [91, 87], [88, 14], [85, 74], [82, 46], [79, 30], [74, 64], [73, 50], [70, 57], [70, 79], [69, 19], [64, 97], [55, 30], [55, 66], [48, 5], [39, 62], [38, 36], [37, 86], [35, 3], [35, 64], [34, 8], [33, 63], [33, 74], [31, 65], [31, 66], [31, 87], [30, 52], [20, 46], [19, 47], [18, 30], [14, 78], [10, 25], [8, 14], [8, 89], [6, 95], [3, 53], [1, 57]]) == 40\nassert solution.numberOfWeakCharacters([[77, 49], [73, 14], [60, 27], [55, 63], [51, 71], [39, 15], [39, 68], [7, 92]]) == 4\nassert solution.numberOfWeakCharacters([[96, 7], [96, 13], [90, 71], [84, 78], [80, 17], [76, 47], [73, 37], [73, 97], [68, 89], [64, 72], [59, 54], [59, 98], [57, 58], [57, 86], [56, 62], [55, 40], [54, 97], [52, 55], [50, 61], [46, 14], [42, 54], [42, 74], [41, 58], [40, 58], [39, 21], [39, 60], [38, 100], [37, 42], [36, 49], [33, 51], [22, 75], [12, 54], [12, 90], [7, 98], [3, 53], [1, 80]]) == 29\nassert solution.numberOfWeakCharacters([[101, 64], [101, 77], [99, 23], [99, 70], [98, 101], [96, 53], [94, 28], [90, 27], [89, 83], [88, 2], [88, 20], [87, 90], [86, 50], [86, 51], [86, 59], [84, 56], [83, 40], [81, 2], [81, 27], [80, 86], [79, 13], [79, 33], [79, 46], [78, 89], [77, 83], [76, 1], [76, 17], [76, 87], [75, 40], [74, 7], [73, 86], [72, 7], [72, 59], [71, 57], [70, 10], [67, 72], [65, 20], [65, 26], [64, 83], [64, 96], [63, 29], [63, 51], [62, 98], [58, 66], [54, 65], [53, 32], [52, 22], [49, 39], [49, 81], [47, 25], [46, 42], [45, 54], [45, 68], [38, 5], [37, 20], [34, 31], [32, 14], [31, 1], [30, 78], [28, 27], [27, 93], [24, 9], [24, 101], [22, 20], [22, 31], [22, 81], [20, 63], [20, 63], [18, 68], [17, 54], [17, 75], [16, 15], [15, 96], [14, 15], [12, 93], [12, 98], [8, 27], [8, 42], [7, 22], [6, 1], [6, 46], [5, 82], [4, 41], [3, 24], [3, 56], [2, 31]]) == 82\nassert solution.numberOfWeakCharacters([[101, 14], [99, 51], [98, 35], [96, 98], [94, 19], [92, 20], [91, 89], [91, 90], [90, 81], [89, 76], [88, 84], [86, 72], [85, 3], [85, 7], [85, 48], [84, 38], [84, 79], [83, 51], [80, 38], [80, 80], [79, 94], [77, 5], [75, 56], [74, 46], [74, 63], [71, 23], [70, 8], [70, 9], [70, 72], [69, 2], [68, 13], [61, 25], [61, 55], [56, 38], [56, 87], [55, 4], [54, 58], [48, 6], [48, 98], [47, 41], [45, 16], [45, 82], [43, 20], [42, 93], [40, 1], [38, 77], [36, 84], [35, 10], [35, 39], [32, 12], [29, 96], [27, 27], [24, 97], [24, 98], [23, 74], [22, 78], [21, 5], [21, 100], [20, 43], [19, 18], [15, 7], [15, 27], [13, 33], [12, 18], [12, 31], [12, 32], [11, 25], [11, 76], [10, 21], [10, 84], [8, 60], [7, 13], [7, 78], [3, 75], [2, 53]]) == 69\nassert solution.numberOfWeakCharacters([[90, 93], [88, 29], [79, 67], [74, 16], [58, 53], [39, 79], [36, 13], [34, 75], [5, 86], [3, 4]]) == 9\nassert solution.numberOfWeakCharacters([[101, 48], [96, 74], [88, 81], [73, 33], [71, 101], [70, 37], [69, 51], [68, 18], [62, 77], [54, 44], [52, 22], [48, 12], [39, 60], [38, 90], [32, 19], [28, 77], [19, 68], [18, 47], [15, 46], [13, 47], [9, 85], [8, 30], [7, 86], [1, 36], [1, 87]]) == 21\nassert solution.numberOfWeakCharacters([[101, 8], [101, 19], [101, 28], [100, 2], [100, 48], [100, 71], [99, 23], [99, 33], [99, 97], [98, 78], [97, 5], [95, 8], [95, 83], [94, 50], [92, 33], [92, 49], [92, 50], [91, 13], [90, 54], [89, 90], [84, 70], [80, 20], [78, 95], [76, 98], [75, 28], [75, 30], [75, 82], [74, 24], [74, 34], [74, 85], [73, 84], [72, 10], [69, 44], [68, 35], [68, 35], [67, 80], [67, 101], [65, 21], [65, 37], [61, 53], [61, 101], [60, 13], [60, 43], [60, 46], [60, 90], [59, 21], [58, 4], [58, 92], [56, 32], [55, 16], [54, 15], [49, 64], [46, 46], [46, 81], [46, 94], [45, 29], [45, 53], [45, 89], [44, 76], [43, 99], [42, 8], [42, 64], [41, 45], [39, 74], [38, 39], [35, 71], [33, 26], [32, 82], [31, 50], [30, 99], [29, 81], [27, 25], [27, 34], [27, 51], [27, 94], [26, 13], [26, 89], [26, 94], [25, 4], [25, 79], [24, 86], [23, 26], [23, 93], [22, 34], [22, 89], [21, 56], [21, 61], [20, 11], [20, 79], [18, 7], [16, 87], [15, 7], [15, 67], [13, 54], [10, 67], [10, 78], [7, 46], [7, 73], [5, 9], [5, 25], [3, 77]]) == 92\nassert solution.numberOfWeakCharacters([[101, 17], [100, 68], [100, 81], [99, 18], [99, 33], [98, 51], [98, 99], [97, 3], [97, 51], [97, 78], [97, 81], [95, 27], [95, 58], [92, 74], [91, 57], [89, 57], [87, 62], [86, 71], [85, 57], [84, 3], [84, 40], [83, 50], [83, 98], [82, 32], [82, 82], [82, 93], [80, 58], [80, 95], [78, 49], [78, 93], [77, 34], [77, 85], [74, 88], [72, 83], [69, 9], [68, 24], [67, 46], [66, 65], [66, 97], [64, 34], [62, 37], [62, 56], [62, 73], [61, 36], [61, 93], [59, 64], [58, 51], [57, 70], [53, 36], [51, 93], [50, 85], [50, 91], [50, 100], [49, 3], [47, 70], [46, 60], [44, 81], [40, 33], [37, 32], [37, 75], [36, 49], [33, 8], [33, 38], [33, 48], [33, 89], [33, 91], [30, 1], [30, 32], [29, 76], [28, 31], [26, 24], [26, 44], [24, 20], [23, 1], [23, 14], [22, 31], [19, 79], [17, 100], [15, 25], [15, 98], [14, 82], [12, 1], [12, 43], [11, 90], [8, 15], [8, 36], [8, 66], [8, 101], [7, 56], [7, 90], [7, 92], [6, 99], [4, 77], [2, 41]]) == 87\nassert solution.numberOfWeakCharacters([[71, 24], [31, 88], [3, 11]]) == 1\nassert solution.numberOfWeakCharacters([[101, 13], [100, 57], [100, 69], [97, 90], [95, 9], [95, 24], [94, 96], [93, 45], [93, 48], [93, 54], [93, 92], [92, 30], [92, 54], [91, 81], [87, 14], [87, 34], [87, 39], [85, 75], [82, 48], [82, 85], [81, 4], [81, 31], [81, 37], [79, 4], [79, 78], [74, 3], [74, 96], [72, 41], [69, 76], [69, 100], [67, 65], [66, 37], [66, 52], [63, 53], [62, 87], [60, 31], [60, 85], [59, 87], [59, 90], [58, 73], [57, 47], [56, 13], [56, 99], [55, 55], [54, 101], [53, 51], [52, 23], [52, 25], [52, 85], [51, 58], [49, 28], [48, 29], [48, 34], [47, 46], [43, 13], [43, 58], [42, 31], [41, 46], [41, 57], [39, 98], [38, 9], [38, 24], [37, 14], [37, 78], [35, 6], [34, 31], [32, 97], [31, 6], [31, 30], [30, 66], [30, 82], [29, 2], [28, 51], [24, 20], [22, 36], [21, 81], [20, 39], [20, 66], [19, 51], [19, 90], [16, 59], [15, 83], [14, 14], [14, 47], [14, 88], [13, 8], [12, 24], [10, 83], [6, 23], [5, 7], [5, 59], [4, 29], [2, 19], [2, 60], [1, 8]]) == 87\nassert solution.numberOfWeakCharacters([[97, 96], [96, 41], [96, 80], [90, 26], [90, 63], [89, 14], [89, 86], [86, 31], [86, 32], [86, 77], [85, 51], [84, 62], [83, 37], [82, 58], [82, 91], [80, 52], [80, 55], [79, 17], [78, 55], [78, 81], [77, 44], [77, 101], [76, 5], [76, 12], [74, 40], [73, 3], [72, 60], [72, 99], [71, 95], [70, 97], [69, 64], [68, 41], [65, 40], [65, 94], [62, 80], [61, 91], [59, 9], [58, 10], [57, 58], [56, 13], [56, 34], [55, 51], [55, 99], [53, 3], [51, 1], [50, 50], [49, 33], [49, 77], [48, 84], [44, 101], [42, 17], [42, 23], [39, 59], [38, 96], [37, 69], [31, 58], [31, 92], [30, 57], [30, 91], [29, 9], [29, 64], [23, 32], [22, 62], [21, 6], [20, 49], [19, 57], [18, 20], [17, 82], [13, 20], [13, 56], [13, 69], [13, 95], [10, 41], [4, 75], [1, 21]]) == 72\nassert solution.numberOfWeakCharacters([[101, 78], [96, 21], [93, 3], [93, 66], [91, 29], [91, 78], [90, 71], [89, 85], [85, 14], [85, 33], [84, 23], [83, 78], [81, 32], [81, 92], [77, 5], [76, 44], [76, 96], [72, 47], [67, 28], [66, 16], [66, 17], [66, 35], [65, 29], [65, 63], [63, 17], [52, 76], [49, 24], [48, 1], [48, 40], [46, 42], [46, 69], [44, 48], [44, 64], [41, 49], [38, 14], [38, 87], [33, 70], [32, 48], [31, 9], [28, 91], [27, 93], [19, 65], [18, 28], [15, 41], [14, 20], [13, 88], [11, 16], [11, 26], [9, 71], [9, 73], [7, 40], [5, 31], [2, 13]]) == 48\nassert solution.numberOfWeakCharacters([[101, 38], [100, 12], [99, 77], [98, 26], [98, 26], [94, 99], [93, 5], [93, 31], [93, 63], [91, 6], [91, 54], [80, 65], [72, 36], [67, 6], [67, 85], [63, 8], [63, 56], [56, 77], [52, 28], [48, 38], [42, 17], [35, 33], [34, 66], [33, 15], [28, 6], [21, 100], [20, 74], [17, 92], [8, 45], [6, 12]]) == 26\nassert solution.numberOfWeakCharacters([[101, 85], [97, 54], [96, 70], [96, 70], [95, 47], [93, 97], [92, 16], [91, 43], [91, 84], [88, 5], [87, 3], [87, 16], [87, 17], [87, 69], [87, 74], [85, 58], [85, 95], [84, 33], [83, 9], [82, 7], [82, 22], [81, 7], [80, 85], [80, 98], [79, 38], [79, 76], [77, 62], [77, 79], [76, 36], [76, 43], [75, 12], [75, 52], [75, 61], [75, 81], [74, 57], [72, 40], [72, 77], [71, 38], [71, 59], [71, 93], [71, 101], [68, 67], [67, 10], [67, 88], [66, 33], [64, 23], [64, 63], [63, 92], [62, 4], [61, 91], [60, 10], [60, 100], [59, 13], [59, 52], [59, 52], [58, 1], [58, 37], [57, 62], [56, 99], [55, 23], [55, 68], [54, 31], [52, 39], [52, 87], [51, 87], [48, 91], [46, 60], [45, 2], [45, 35], [45, 85], [44, 19], [35, 41], [34, 43], [33, 45], [31, 67], [30, 101], [27, 57], [27, 70], [27, 82], [26, 42], [24, 64], [23, 64], [19, 73], [17, 15], [17, 71], [17, 84], [12, 86], [11, 82], [10, 65], [10, 72], [8, 73], [8, 82], [6, 93], [5, 22], [3, 47], [2, 64], [2, 98], [1, 18]]) == 93\nassert solution.numberOfWeakCharacters([[100, 42], [99, 21], [99, 73], [99, 87], [98, 90], [98, 97], [97, 35], [97, 49], [97, 86], [97, 95], [96, 48], [96, 50], [90, 65], [89, 27], [89, 62], [89, 91], [88, 60], [86, 35], [86, 50], [85, 74], [81, 74], [81, 77], [80, 18], [80, 48], [79, 3], [79, 89], [77, 89], [76, 2], [75, 8], [74, 79], [74, 81], [73, 70], [72, 8], [69, 53], [67, 89], [64, 8], [64, 13], [64, 68], [64, 71], [62, 51], [59, 31], [59, 94], [55, 6], [55, 97], [53, 21], [51, 6], [48, 55], [47, 7], [46, 7], [46, 78], [39, 40], [37, 55], [35, 14], [35, 27], [34, 10], [34, 35], [33, 80], [32, 34], [31, 93], [30, 33], [27, 5], [26, 54], [25, 53], [25, 53], [24, 61], [22, 39], [22, 61], [21, 47], [21, 53], [17, 13], [16, 8], [16, 78], [16, 84], [16, 85], [13, 39], [13, 96], [12, 20], [9, 10], [8, 37], [7, 24], [7, 34], [3, 12], [3, 81], [3, 89], [2, 21], [2, 33]]) == 80\nassert solution.numberOfWeakCharacters([[99, 4], [95, 26], [95, 38], [94, 7], [94, 46], [92, 83], [90, 94], [88, 44], [87, 92], [86, 21], [84, 51], [83, 56], [83, 85], [80, 34], [80, 37], [78, 33], [77, 54], [77, 67], [70, 9], [70, 65], [69, 15], [69, 22], [68, 74], [67, 41], [63, 87], [60, 31], [59, 33], [54, 64], [52, 73], [52, 88], [51, 36], [51, 74], [49, 53], [44, 23], [44, 59], [43, 68], [40, 34], [39, 35], [39, 101], [36, 1], [36, 60], [35, 90], [34, 65], [33, 42], [29, 40], [27, 65], [27, 66], [24, 41], [23, 45], [22, 56], [22, 97], [21, 30], [17, 44], [17, 77], [15, 49], [11, 30], [11, 44], [9, 45], [9, 77], [7, 52]]) == 53\nassert solution.numberOfWeakCharacters([[101, 78], [95, 44], [89, 99], [85, 98], [73, 69], [62, 56], [58, 46], [47, 47], [43, 81], [36, 31], [34, 12], [27, 67], [26, 43], [21, 43], [21, 58], [18, 66], [10, 46], [6, 72], [5, 78]]) == 17\nassert solution.numberOfWeakCharacters([[99, 48], [99, 53], [99, 79], [98, 62], [93, 96], [82, 38], [69, 81], [68, 30], [67, 74], [67, 94], [60, 63], [58, 15], [57, 95], [55, 65], [54, 97], [51, 36], [50, 47], [48, 23], [47, 95], [43, 100], [42, 96], [41, 64], [39, 54], [36, 88], [34, 57], [34, 71], [34, 86], [33, 23], [27, 42], [16, 97], [15, 91], [14, 24], [6, 50], [6, 70], [5, 13], [3, 96], [2, 50], [1, 96]]) == 32\nassert solution.numberOfWeakCharacters([[100, 2], [99, 67], [99, 95], [97, 75], [93, 30], [90, 30], [86, 89], [86, 91], [84, 54], [83, 30], [82, 58], [81, 46], [78, 8], [76, 84], [75, 8], [75, 47], [75, 89], [64, 69], [64, 73], [60, 1], [58, 82], [57, 56], [54, 24], [52, 54], [50, 85], [48, 61], [47, 54], [44, 53], [44, 78], [42, 43], [41, 82], [40, 91], [39, 64], [35, 80], [35, 97], [32, 17], [27, 64], [25, 47], [24, 87], [19, 74], [11, 71], [10, 13], [4, 21]]) == 39\nassert solution.numberOfWeakCharacters([[100, 13], [100, 42], [99, 66], [96, 16], [86, 75], [80, 83], [78, 2], [78, 97], [77, 97], [61, 69], [48, 35], [46, 68], [33, 80], [28, 58], [25, 9], [17, 75], [8, 27], [3, 37], [2, 75]]) == 12\nassert solution.numberOfWeakCharacters([[91, 24], [90, 14], [88, 61], [84, 26], [83, 100], [65, 1], [57, 100], [40, 89], [27, 35]]) == 5\nassert solution.numberOfWeakCharacters([[97, 14], [97, 26], [97, 51], [97, 98], [86, 53], [83, 15], [83, 45], [82, 45], [80, 26], [74, 17], [74, 61], [74, 84], [73, 43], [70, 22], [67, 95], [66, 47], [56, 40], [54, 85], [54, 96], [51, 88], [45, 10], [44, 81], [41, 57], [30, 51], [30, 62], [23, 27], [22, 3], [22, 71], [20, 7], [19, 5], [18, 40], [17, 9], [9, 64]]) == 29\nassert solution.numberOfWeakCharacters([[101, 23], [97, 37], [97, 72], [96, 24], [93, 95], [92, 40], [89, 10], [89, 39], [89, 99], [87, 5], [81, 4], [81, 80], [79, 27], [79, 28], [78, 69], [78, 74], [78, 87], [77, 22], [74, 98], [70, 83], [69, 12], [66, 67], [66, 86], [63, 43], [63, 76], [63, 85], [62, 78], [62, 79], [59, 2], [53, 46], [52, 9], [51, 19], [51, 66], [50, 15], [49, 84], [48, 49], [46, 33], [45, 52], [45, 74], [43, 84], [43, 101], [42, 84], [39, 82], [39, 86], [38, 52], [37, 14], [35, 38], [35, 89], [35, 94], [33, 92], [32, 19], [32, 82], [30, 45], [30, 72], [29, 78], [25, 30], [21, 36], [20, 6], [19, 18], [19, 21], [19, 72], [16, 9], [16, 37], [13, 36], [13, 56], [13, 88], [10, 64], [7, 76], [5, 80], [3, 27], [2, 86], [2, 94]]) == 66\nassert solution.numberOfWeakCharacters([[92, 24], [90, 62], [85, 69], [82, 19], [81, 58], [81, 75], [80, 14], [76, 46], [75, 92], [66, 19], [65, 72], [62, 57], [59, 37], [57, 10], [57, 17], [49, 5], [49, 29], [41, 42], [38, 6], [37, 41], [36, 29], [36, 67], [35, 53], [34, 69], [30, 1], [23, 58], [21, 50], [17, 77], [13, 32], [10, 37], [6, 36], [4, 88]]) == 27\nassert solution.numberOfWeakCharacters([[100, 29], [100, 61], [100, 84], [98, 79], [97, 73], [97, 96], [96, 10], [95, 20], [93, 75], [92, 91], [91, 79], [90, 19], [89, 97], [87, 47], [84, 2], [81, 13], [79, 26], [78, 84], [76, 24], [75, 12], [74, 26], [74, 55], [74, 93], [71, 96], [68, 4], [67, 7], [67, 37], [67, 52], [67, 79], [66, 81], [65, 2], [64, 12], [64, 36], [63, 1], [63, 53], [62, 17], [60, 54], [60, 94], [58, 47], [57, 57], [57, 90], [55, 83], [53, 15], [53, 96], [52, 9], [48, 18], [41, 60], [40, 30], [39, 60], [37, 3], [36, 47], [35, 52], [31, 64], [27, 39], [26, 39], [26, 100], [24, 8], [22, 43], [21, 57], [21, 87], [18, 59], [16, 90], [15, 39], [15, 73], [14, 71], [13, 19], [10, 67], [7, 3], [6, 37], [5, 52], [4, 57], [2, 100], [1, 43], [1, 66]]) == 67\nassert solution.numberOfWeakCharacters([[100, 77], [99, 4], [98, 10], [98, 26], [96, 26], [94, 68], [89, 33], [89, 74], [88, 34], [87, 12], [87, 39], [87, 54], [83, 21], [82, 76], [81, 8], [78, 8], [78, 46], [76, 88], [76, 92], [74, 38], [72, 84], [70, 60], [68, 23], [67, 67], [63, 48], [61, 29], [58, 42], [55, 92], [53, 11], [49, 5], [45, 63], [44, 16], [43, 18], [43, 72], [40, 6], [39, 93], [38, 14], [38, 28], [38, 51], [37, 82], [36, 89], [35, 56], [26, 64], [25, 40], [25, 53], [22, 98], [20, 95], [19, 85], [17, 31], [16, 100], [13, 39], [13, 70], [11, 77], [7, 34], [4, 97], [3, 101]]) == 48\nassert solution.numberOfWeakCharacters([[98, 74], [91, 48], [90, 68], [85, 10], [84, 81], [82, 1], [77, 34], [75, 96], [73, 29], [59, 69], [52, 1], [48, 19], [47, 39], [43, 41], [42, 2], [39, 58], [35, 89], [32, 64], [28, 24], [24, 40], [22, 31], [18, 68], [11, 2], [11, 43], [10, 64], [9, 13], [4, 50]]) == 24\nassert solution.numberOfWeakCharacters([[94, 71], [73, 78], [38, 97], [21, 15], [12, 4], [8, 44]]) == 3\nassert solution.numberOfWeakCharacters([[100, 36], [100, 63], [100, 81], [97, 46], [96, 32], [95, 29], [95, 40], [94, 48], [93, 48], [91, 4], [90, 66], [87, 20], [86, 60], [85, 87], [82, 38], [81, 12], [81, 51], [81, 73], [80, 90], [77, 89], [76, 64], [75, 2], [74, 28], [73, 67], [70, 59], [69, 54], [69, 59], [68, 85], [68, 92], [66, 88], [65, 33], [65, 48], [65, 99], [64, 79], [63, 45], [61, 15], [60, 60], [60, 74], [59, 27], [59, 69], [58, 83], [57, 50], [56, 44], [55, 100], [53, 43], [52, 22], [51, 63], [51, 70], [43, 21], [43, 46], [42, 63], [40, 40], [39, 16], [37, 38], [37, 52], [36, 59], [35, 56], [33, 74], [31, 38], [30, 48], [25, 3], [25, 22], [25, 25], [25, 57], [23, 53], [23, 81], [22, 40], [21, 36], [21, 93], [19, 78], [18, 26], [17, 21], [15, 10], [12, 95], [10, 30], [10, 64], [10, 76], [6, 23], [5, 61], [4, 15], [4, 85], [2, 46], [1, 70]]) == 75\nassert solution.numberOfWeakCharacters([[101, 99], [96, 27], [90, 95], [89, 66], [86, 41], [86, 45], [85, 67], [82, 2], [81, 95], [78, 72], [76, 57], [76, 61], [73, 3], [73, 9], [68, 96], [65, 26], [64, 89], [59, 29], [58, 43], [57, 6], [57, 33], [57, 48], [56, 91], [54, 17], [51, 78], [46, 88], [44, 27], [43, 58], [35, 47], [32, 38], [32, 82], [32, 101], [31, 21], [27, 45], [26, 5], [24, 11], [15, 74], [12, 41], [8, 16], [7, 45], [7, 67], [4, 82], [2, 8]]) == 41\nassert solution.numberOfWeakCharacters([[93, 79], [91, 73], [90, 41], [85, 62], [82, 59], [77, 85], [74, 90], [72, 98], [70, 64], [69, 48], [61, 42], [54, 4], [54, 35], [53, 70], [50, 30], [50, 75], [48, 94], [46, 40], [46, 78], [42, 94], [40, 19], [39, 55], [38, 48], [33, 75], [30, 37], [30, 74], [30, 94], [20, 65], [19, 9], [19, 31], [19, 43], [16, 99], [9, 13], [2, 97]]) == 29\nassert solution.numberOfWeakCharacters([[100, 23], [98, 101], [97, 2], [97, 61], [94, 50], [93, 51], [92, 78], [91, 42], [90, 58], [88, 41], [88, 87], [87, 1], [83, 64], [83, 75], [83, 93], [80, 83], [77, 2], [77, 47], [71, 26], [71, 30], [71, 37], [69, 45], [68, 30], [67, 63], [67, 89], [64, 55], [64, 69], [62, 24], [62, 90], [61, 4], [61, 66], [59, 91], [58, 26], [58, 70], [57, 100], [56, 94], [54, 10], [54, 29], [51, 7], [51, 70], [48, 89], [46, 72], [46, 86], [43, 5], [43, 16], [42, 39], [42, 62], [42, 82], [41, 44], [41, 54], [41, 74], [40, 92], [38, 35], [38, 62], [36, 22], [35, 41], [32, 97], [30, 7], [27, 95], [24, 41], [23, 54], [21, 38], [21, 58], [20, 27], [19, 18], [18, 15], [18, 84], [14, 55], [13, 8], [10, 32], [8, 18], [8, 22], [7, 65], [5, 50], [5, 56], [4, 76], [3, 44], [3, 88], [2, 61]]) == 77\nassert solution.numberOfWeakCharacters([[101, 5], [101, 92], [100, 50], [97, 3], [96, 36], [95, 61], [94, 49], [93, 79], [91, 69], [90, 92], [85, 24], [84, 12], [84, 90], [83, 38], [83, 54], [82, 29], [79, 46], [76, 6], [76, 20], [75, 99], [73, 32], [72, 32], [72, 45], [71, 93], [70, 6], [68, 42], [67, 73], [65, 81], [64, 53], [62, 80], [61, 77], [60, 5], [60, 29], [60, 65], [60, 90], [56, 82], [55, 76], [54, 7], [54, 22], [54, 24], [54, 44], [53, 70], [52, 74], [49, 13], [49, 25], [48, 93], [47, 99], [46, 54], [46, 99], [45, 10], [40, 50], [39, 7], [39, 27], [39, 88], [38, 40], [38, 54], [37, 74], [36, 39], [36, 83], [33, 39], [32, 1], [32, 79], [31, 7], [30, 9], [30, 80], [28, 13], [26, 71], [25, 83], [24, 14], [24, 76], [22, 88], [17, 47], [17, 61], [17, 93], [16, 64], [14, 54], [13, 18], [13, 93], [12, 64], [11, 63], [11, 88], [11, 90], [6, 45], [5, 13], [2, 29]]) == 79\nassert solution.numberOfWeakCharacters([[101, 72], [97, 44], [93, 86], [92, 100], [91, 12], [90, 16], [87, 6], [87, 9], [86, 41], [85, 97], [84, 19], [84, 78], [83, 27], [82, 74], [82, 75], [80, 25], [80, 59], [79, 72], [78, 90], [77, 72], [74, 45], [74, 88], [72, 69], [69, 82], [66, 55], [65, 20], [62, 15], [61, 91], [60, 79], [60, 96], [58, 7], [56, 51], [55, 4], [51, 50], [48, 6], [41, 2], [41, 58], [38, 72], [37, 68], [32, 82], [29, 33], [29, 40], [27, 53], [26, 72], [24, 44], [22, 82], [21, 67], [14, 6], [13, 5], [13, 85], [11, 70], [8, 11], [8, 60], [7, 42], [7, 58], [5, 28], [4, 4], [4, 35], [4, 64], [4, 86], [3, 51], [2, 41], [1, 4], [1, 28], [1, 96]]) == 62",
        "small_test_cases": "\nsolution = Solution()\nassert solution.numberOfWeakCharacters([[5,5],[6,3],[3,6]]) == 0\nassert solution.numberOfWeakCharacters([[2,2],[3,3]]) == 1\nassert solution.numberOfWeakCharacters([[1,5],[10,4],[4,3]]) == 1\n",
        "algorithms": [
            "greedy",
            "sorting"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 2170,
        "task_name": "Minimum Operations to Make the Array Alternating",
        "description": "\n\n<p>You are given a <strong>0-indexed</strong> array <code>nums</code> consisting of <code>n</code> positive integers.</p>\n\n<p>The array <code>nums</code> is called <strong>alternating</strong> if:</p>\n\n<ul>\n\t<li><code>nums[i - 2] == nums[i]</code>, where <code>2 &lt;= i &lt;= n - 1</code>.</li>\n\t<li><code>nums[i - 1] != nums[i]</code>, where <code>1 &lt;= i &lt;= n - 1</code>.</li>\n</ul>\n\n<p>In one <strong>operation</strong>, you can choose an index <code>i</code> and <strong>change</strong> <code>nums[i]</code> into <strong>any</strong> positive integer.</p>\n\n<p>Return <em>the <strong>minimum number of operations</strong> required to make the array alternating</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,1,3,2,4,3]\n<strong>Output:</strong> 3\n<strong>Explanation:</strong>\nOne way to make the array alternating is by converting it to [3,1,3,<u><strong>1</strong></u>,<u><strong>3</strong></u>,<u><strong>1</strong></u>].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,2,2,2]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOne way to make the array alternating is by converting it to [1,2,<u><strong>1</strong></u>,2,<u><strong>1</strong></u>].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [<u><strong>2</strong></u>,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given a **0-indexed** array `nums` consisting of `n` positive integers.\n\n\nThe array `nums` is called **alternating** if:\n\n\n* `nums[i - 2] == nums[i]`, where `2 <= i <= n - 1`.\n* `nums[i - 1] != nums[i]`, where `1 <= i <= n - 1`.\n\n\nIn one **operation**, you can choose an index `i` and **change** `nums[i]` into **any** positive integer.\n\n\nReturn *the **minimum number of operations** required to make the array alternating*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,1,3,2,4,3]\n**Output:** 3\n**Explanation:**\nOne way to make the array alternating is by converting it to [3,1,3,**1**,**3**,**1**].\nThe number of operations required in this case is 3.\nIt can be proven that it is not possible to make the array alternating in less than 3 operations. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,2,2,2]\n**Output:** 2\n**Explanation:**\nOne way to make the array alternating is by converting it to [1,2,**1**,2,**1**].\nThe number of operations required in this case is 2.\nNote that the array cannot be converted to [**2**,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def minimumOperations(self, nums: List[int]) -> int:\n        def get(i):\n            c = Counter(nums[i::2]).most_common(2)\n            if not c:\n                return [(0, 0), (0, 0)]\n            if len(c) == 1:\n                return [c[0], (0, 0)]\n            return c\n\n        n = len(nums)\n        return min(n - (n1 + n2) for a, n1 in get(0) for b, n2 in get(1) if a != b)\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def minimumOperations(self, nums):\n        def get(i):\n            c = Counter(nums[i::2]).most_common(2)\n            if not c:\n                return [(0, 0), (0, 0)]\n            if len(c) == 1:\n                return [c[0], (0, 0)]\n            return c\n\n        n = len(nums)\n        return min(n - (n1 + n2) for a, n1 in get(0) for b, n2 in get(1) if a != b)\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minimumOperations(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minimumOperations(nums) == expected_result\n        print(f\"assert solution.minimumOperations({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minimumOperations({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minimumOperations([19, 61, 82]) == 1\nassert solution.minimumOperations([84, 10, 52, 5, 21, 98, 59, 73]) == 6\nassert solution.minimumOperations([44, 4, 41, 73]) == 2\nassert solution.minimumOperations([63, 76, 31]) == 1\nassert solution.minimumOperations([90, 98, 66, 69, 41, 100, 72]) == 5\nassert solution.minimumOperations([50, 76, 93]) == 1\nassert solution.minimumOperations([71, 94, 100, 84, 46, 51]) == 4\nassert solution.minimumOperations([23, 12, 94, 49, 13, 55, 52, 87, 79]) == 7\nassert solution.minimumOperations([14, 18, 90, 59, 73, 50, 21, 24, 54, 85]) == 8\nassert solution.minimumOperations([46, 6, 52, 58, 53, 81]) == 4\nassert solution.minimumOperations([55, 46, 11]) == 1\nassert solution.minimumOperations([80, 27, 26, 57, 7, 14, 67, 20, 87, 77]) == 8\nassert solution.minimumOperations([13, 45, 51]) == 1\nassert solution.minimumOperations([95, 49, 81, 39, 42, 34, 23, 21, 65, 58]) == 8\nassert solution.minimumOperations([30, 62, 94, 13, 10, 68, 63, 96, 23]) == 7\nassert solution.minimumOperations([48, 51, 64, 40, 86, 62, 22]) == 5\nassert solution.minimumOperations([68, 18, 11, 39, 61, 34]) == 4\nassert solution.minimumOperations([79, 29, 9, 67, 72, 85]) == 4\nassert solution.minimumOperations([91, 63]) == 0\nassert solution.minimumOperations([43, 76, 100, 40, 87]) == 3\nassert solution.minimumOperations([51, 70, 58, 57, 48]) == 3\nassert solution.minimumOperations([78, 11, 49, 75]) == 2\nassert solution.minimumOperations([97, 2]) == 0\nassert solution.minimumOperations([6, 20, 88]) == 1\nassert solution.minimumOperations([85, 64]) == 0\nassert solution.minimumOperations([92, 88, 26, 87, 40]) == 3\nassert solution.minimumOperations([1, 62, 83, 97, 44, 39]) == 4\nassert solution.minimumOperations([27, 39, 35, 10, 85, 79, 61, 49]) == 6\nassert solution.minimumOperations([54, 8, 93, 98, 47]) == 3\nassert solution.minimumOperations([52, 75, 11, 57, 10, 93, 42, 43, 53, 21]) == 8\nassert solution.minimumOperations([13, 29, 8, 91, 22, 6, 67, 58, 43]) == 7\nassert solution.minimumOperations([84, 8, 13, 54, 43, 96, 46, 75, 9, 74]) == 8\nassert solution.minimumOperations([16, 41, 35]) == 1\nassert solution.minimumOperations([76, 15]) == 0\nassert solution.minimumOperations([65, 55, 31, 50, 96, 24, 21, 14, 58, 40]) == 8\nassert solution.minimumOperations([50, 45, 94, 38, 97, 99, 23, 39, 75, 20]) == 8\nassert solution.minimumOperations([34, 22, 93, 37, 62, 51]) == 4\nassert solution.minimumOperations([13, 52, 75, 17, 85, 54, 71, 60]) == 6\nassert solution.minimumOperations([44, 58, 8, 46, 10, 41, 70, 78, 98]) == 7\nassert solution.minimumOperations([77, 18, 36]) == 1\nassert solution.minimumOperations([60, 44, 48]) == 1\nassert solution.minimumOperations([18, 98, 47, 11, 60, 31]) == 4\nassert solution.minimumOperations([9, 39, 26, 15]) == 2\nassert solution.minimumOperations([32, 25, 82, 39, 68, 58, 21, 63]) == 6\nassert solution.minimumOperations([73, 4]) == 0\nassert solution.minimumOperations([42, 95, 21, 78, 68, 57, 11, 43]) == 6\nassert solution.minimumOperations([79, 86, 71, 73, 34, 72, 85, 22]) == 6\nassert solution.minimumOperations([23, 33, 63, 90, 36, 22, 16, 1, 53]) == 7\nassert solution.minimumOperations([40, 97, 15, 14, 32, 87, 37, 7, 77, 45]) == 8\nassert solution.minimumOperations([22, 69, 38, 81, 84]) == 3\nassert solution.minimumOperations([63, 8, 10, 19]) == 2\nassert solution.minimumOperations([18, 33]) == 0\nassert solution.minimumOperations([34, 79, 84, 58, 29, 66, 40]) == 5\nassert solution.minimumOperations([96, 46]) == 0\nassert solution.minimumOperations([30, 80, 26, 51, 8, 66, 69, 53]) == 6\nassert solution.minimumOperations([72, 70, 47, 100]) == 2\nassert solution.minimumOperations([88, 98, 91]) == 1\nassert solution.minimumOperations([33, 84, 3, 21, 80, 48, 52, 15, 29, 62]) == 8\nassert solution.minimumOperations([10, 2, 6, 79, 95, 57, 34, 88]) == 6\nassert solution.minimumOperations([95, 30, 100, 91, 34, 79, 63, 1, 50]) == 7\nassert solution.minimumOperations([33, 13, 76, 41, 91, 6]) == 4\nassert solution.minimumOperations([83, 35, 18, 72, 97, 99, 64, 71, 34, 70]) == 8\nassert solution.minimumOperations([65, 29]) == 0\nassert solution.minimumOperations([66, 23]) == 0\nassert solution.minimumOperations([71, 80, 78, 40, 49, 90]) == 4\nassert solution.minimumOperations([53, 52, 76, 8, 39, 6, 74, 99]) == 6\nassert solution.minimumOperations([22, 4]) == 0\nassert solution.minimumOperations([88, 83]) == 0\nassert solution.minimumOperations([80, 60, 71, 26, 63, 28, 32, 8, 30, 37]) == 8\nassert solution.minimumOperations([61, 36, 50, 38, 90]) == 3\nassert solution.minimumOperations([83, 58]) == 0\nassert solution.minimumOperations([8, 13]) == 0\nassert solution.minimumOperations([8, 7]) == 0\nassert solution.minimumOperations([61, 25, 44, 15, 43, 87]) == 4\nassert solution.minimumOperations([73, 36, 4, 41, 46, 48]) == 4\nassert solution.minimumOperations([83, 77, 71, 41, 5, 63, 74]) == 5\nassert solution.minimumOperations([58, 82, 48, 99, 29, 59, 44, 1, 11]) == 7\nassert solution.minimumOperations([3, 32]) == 0\nassert solution.minimumOperations([24, 51, 15, 84, 49, 100, 73, 92, 45]) == 7\nassert solution.minimumOperations([43, 86, 26, 7, 70, 29, 68, 27, 96, 73]) == 8\nassert solution.minimumOperations([57, 49, 68, 47, 62]) == 3\nassert solution.minimumOperations([39, 31, 11]) == 1\nassert solution.minimumOperations([38, 22, 73, 36, 46]) == 3\nassert solution.minimumOperations([14, 19, 44, 65, 1, 53, 63, 79, 58]) == 7\nassert solution.minimumOperations([83, 99, 87]) == 1\nassert solution.minimumOperations([30, 77, 83, 14, 67, 87]) == 4\nassert solution.minimumOperations([41, 45, 90, 82, 29, 21]) == 4\nassert solution.minimumOperations([79, 75, 54, 50, 27, 94, 68, 59, 7, 19]) == 8\nassert solution.minimumOperations([94, 28, 31, 67, 15, 57, 32, 38]) == 6\nassert solution.minimumOperations([26, 17, 71, 56, 89]) == 3\nassert solution.minimumOperations([35, 19, 41, 49]) == 2\nassert solution.minimumOperations([87, 64, 77, 70, 13, 52, 80, 38]) == 6\nassert solution.minimumOperations([59, 16, 44, 64, 22, 28, 83, 75]) == 6\nassert solution.minimumOperations([41, 1, 14, 78, 33]) == 3\nassert solution.minimumOperations([68, 83, 40, 60, 3, 2, 51, 65]) == 6\nassert solution.minimumOperations([65, 75]) == 0\nassert solution.minimumOperations([65, 61, 99, 35]) == 2\nassert solution.minimumOperations([80, 26, 38, 11, 86, 79, 55]) == 5\nassert solution.minimumOperations([47, 44, 95, 93, 64, 82, 36]) == 5\nassert solution.minimumOperations([12, 63, 22, 19, 25, 50, 74, 61, 68]) == 7",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minimumOperations([3,1,3,2,4,3]) == 3\nassert solution.minimumOperations([1,2,2,2,2]) == 2\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 826,
        "task_name": "Most Profit Assigning Work",
        "description": "\n\n<p>You have <code>n</code> jobs and <code>m</code> workers. You are given three arrays: <code>difficulty</code>, <code>profit</code>, and <code>worker</code> where:</p>\n\n<ul>\n\t<li><code>difficulty[i]</code> and <code>profit[i]</code> are the difficulty and the profit of the <code>i<sup>th</sup></code> job, and</li>\n\t<li><code>worker[j]</code> is the ability of <code>j<sup>th</sup></code> worker (i.e., the <code>j<sup>th</sup></code> worker can only complete a job with difficulty at most <code>worker[j]</code>).</li>\n</ul>\n\n<p>Every worker can be assigned <strong>at most one job</strong>, but one job can be <strong>completed multiple times</strong>.</p>\n\n<ul>\n\t<li>For example, if three workers attempt the same job that pays <code>$1</code>, then the total profit will be <code>$3</code>. If a worker cannot complete any job, their profit is <code>$0</code>.</li>\n</ul>\n\n<p>Return the maximum profit we can achieve after assigning the workers to the jobs.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n<strong>Output:</strong> 100\n<strong>Explanation:</strong> Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\n<strong>Output:</strong> 0\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == difficulty.length</code></li>\n\t<li><code>n == profit.length</code></li>\n\t<li><code>m == worker.length</code></li>\n\t<li><code>1 &lt;= n, m &lt;= 10<sup>4</sup></code></li>\n\t<li><code>1 &lt;= difficulty[i], profit[i], worker[i] &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou have `n` jobs and `m` workers. You are given three arrays: `difficulty`, `profit`, and `worker` where:\n\n\n* `difficulty[i]` and `profit[i]` are the difficulty and the profit of the `ith` job, and\n* `worker[j]` is the ability of `jth` worker (i.e., the `jth` worker can only complete a job with difficulty at most `worker[j]`).\n\n\nEvery worker can be assigned **at most one job**, but one job can be **completed multiple times**.\n\n\n* For example, if three workers attempt the same job that pays `$1`, then the total profit will be `$3`. If a worker cannot complete any job, their profit is `$0`.\n\n\nReturn the maximum profit we can achieve after assigning the workers to the jobs.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]\n**Output:** 100\n**Explanation:** Workers are assigned jobs of difficulty [4,4,6,6] and they get a profit of [20,20,30,30] separately.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** difficulty = [85,47,57], profit = [24,66,99], worker = [40,25,25]\n**Output:** 0\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == difficulty.length`\n* `n == profit.length`\n* `m == worker.length`\n* `1 <= n, m <= 104`\n* `1 <= difficulty[i], profit[i], worker[i] <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def maxProfitAssignment(\n        self, difficulty: List[int], profit: List[int], worker: List[int]\n    ) -> int:\n        n = len(difficulty)\n        job = [(difficulty[i], profit[i]) for i in range(n)]\n        job.sort(key=lambda x: x[0])\n        worker.sort()\n        i = t = res = 0\n        for w in worker:\n            while i < n and job[i][0] <= w:\n                t = max(t, job[i][1])\n                i += 1\n            res += t\n        return res\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def maxProfitAssignment(self, difficulty, profit, worker):\n        n = len(difficulty)\n        job = [(difficulty[i], profit[i]) for i in range(n)]\n        job.sort(key=lambda x: x[0])\n        worker.sort()\n        i = t = res = 0\n        for w in worker:\n            while i < n and job[i][0] <= w:\n                t = max(t, job[i][1])\n                i += 1\n            res += t\n        return res\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random difficulty list\n    difficulty = random.choices(range(1, 100_001), k=random.randint(1, 10))\n    \n    # Generate random profit list\n    profit = random.choices(range(1, 100_001), k=len(difficulty))\n    \n    # Generate random worker list\n    worker = random.choices(range(1, 100_001), k=random.randint(1, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxProfitAssignment(difficulty, profit, worker)\n    \n    return difficulty, profit, worker, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        difficulty, profit, worker, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxProfitAssignment(difficulty, profit, worker) == expected_result\n        print(f\"assert solution.maxProfitAssignment({difficulty}, {profit}, {worker}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxProfitAssignment({difficulty}, {profit}, {worker}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.maxProfitAssignment([80608, 21881, 88399, 81269, 18256, 77890], [42988, 54269, 6735, 33154, 93369, 21957], [8546, 10074, 12011, 15735, 58316, 61580, 89932, 92995]) == 373476\nassert solution.maxProfitAssignment([51391, 9559, 34020, 33573, 65605, 27026, 57834, 30325], [42709, 4202, 18099, 17039, 24286, 9133, 19413, 56678], [33206, 54197]) == 113356\nassert solution.maxProfitAssignment([68139, 51074, 90405, 55865, 65189, 66363, 60405, 55705, 76384, 7709], [56824, 23981, 93806, 38456, 5013, 83577, 77074, 11574, 60646, 25976], [15975, 27077, 32227, 67627, 69024, 80743, 81839, 93217, 97509]) == 599848\nassert solution.maxProfitAssignment([30992, 6639, 58473, 47256, 86667, 53909, 46794, 95396], [1510, 35308, 53665, 69951, 92162, 53228, 96838, 29088], [17665, 22604, 59201, 62856, 64296, 73305, 86867, 96430, 98583, 99353]) == 845320\nassert solution.maxProfitAssignment([90602, 64493, 72317, 70851], [16178, 97800, 96727, 19011], [48918, 85729]) == 97800\nassert solution.maxProfitAssignment([79707, 77882, 78111, 19829, 48065, 21630, 90633, 20141, 5272], [3645, 91669, 4459, 87250, 71612, 2859, 74249, 20590, 88678], [19913, 87960]) == 180347\nassert solution.maxProfitAssignment([11851, 41017], [26620, 10153], [5505, 12105, 29622, 38616, 56500, 83039]) == 133100\nassert solution.maxProfitAssignment([62943, 98038, 80474, 70763, 47239], [37424, 4437, 88727, 66770, 25598], [1968, 19151, 25587, 54014, 85507, 85771, 86735, 91576, 97098]) == 469233\nassert solution.maxProfitAssignment([13682, 6555, 30053, 71537, 77801, 43438], [79423, 72792, 18366, 71127, 64103, 77401], [701, 3719, 4586, 8345, 19930, 68391, 88576]) == 311061\nassert solution.maxProfitAssignment([86840, 1136, 84113, 26657, 77925, 85690, 67612, 69183], [5971, 83032, 11671, 85333, 6434, 55201, 36592, 79473], [9944, 45683, 64065, 68571, 93618]) == 424364\nassert solution.maxProfitAssignment([9811, 38727, 26451, 53542, 33394, 97633, 26163, 58112], [65393, 13944, 48356, 72175, 84869, 4738, 26189, 89959], [15436, 22719, 57928, 76334, 87344, 92854, 96407, 99041]) == 665450\nassert solution.maxProfitAssignment([3518, 47135, 16441], [1269, 14872, 25711], [6206, 21727, 26356, 42068, 44601, 45604, 56632, 82719, 97617]) == 206957\nassert solution.maxProfitAssignment([30197, 28076], [34764, 15587], [23781, 27750, 49536, 66843, 67416, 82673, 82719, 87053, 93429, 94272]) == 278112\nassert solution.maxProfitAssignment([17345, 11789, 27772, 98883, 43713, 22728, 77066, 71812, 54812], [7614, 94360, 95179, 7440, 19331, 83657, 27087, 72997, 63461], [37376, 46957, 89052, 94829, 97524]) == 475895\nassert solution.maxProfitAssignment([46244], [87510], [26082, 40821, 57859, 82235]) == 175020\nassert solution.maxProfitAssignment([44787, 99012, 37111, 17947], [50655, 6065, 14314, 34346], [7149, 7292, 15157, 52931, 61522, 63011, 93395, 95482]) == 253275\nassert solution.maxProfitAssignment([98820, 42308, 31828, 86752, 20383, 92639, 28983, 38578, 17783, 20837], [18841, 57280, 57028, 63928, 51649, 99614, 80147, 83424, 17613, 11684], [30659]) == 80147\nassert solution.maxProfitAssignment([85121, 57263, 86497, 30499, 55654, 39725, 3818, 64649, 73687], [15748, 7843, 68313, 70707, 96948, 4874, 13589, 96536, 23958], [30808, 50439, 73069]) == 238362\nassert solution.maxProfitAssignment([75659, 35978, 30468, 60930, 37129, 42106, 61987, 59775, 99524, 52148], [82541, 66947, 79659, 29312, 23404, 32383, 97655, 47069, 76688, 59323], [40924, 45071, 55971, 72713, 80109, 80536, 92521]) == 629597\nassert solution.maxProfitAssignment([65631], [20592], [12892, 34663, 53917, 69131, 75858, 81368]) == 61776\nassert solution.maxProfitAssignment([88183, 62959, 60635, 42743, 66599, 12311, 27310], [70870, 6344, 34328, 53010, 69107, 34628, 97906], [7325, 34365, 63351, 90639, 96797]) == 391624\nassert solution.maxProfitAssignment([1286, 49717, 94376, 46100, 87916, 27185, 97145, 46322, 98730, 32137], [32616, 6694, 2739, 39400, 80636, 5389, 7624, 38370, 30909, 28109], [29304, 74305]) == 72016\nassert solution.maxProfitAssignment([52912, 41451, 13752, 35441, 43317, 53607, 5530, 81026, 67504], [68591, 38433, 94560, 56379, 46631, 77069, 18511, 78868, 5365], [1223, 48495, 60072, 70599, 71344, 76067, 98832]) == 567360\nassert solution.maxProfitAssignment([19027, 50049, 15377, 36172, 42716], [7127, 7265, 47939, 17497, 10358], [87210]) == 47939\nassert solution.maxProfitAssignment([75689, 44714, 866], [6269, 40759, 47295], [31286, 60968]) == 94590\nassert solution.maxProfitAssignment([76768, 24999], [29600, 45943], [42245, 55299, 55680, 82823]) == 183772\nassert solution.maxProfitAssignment([19654, 48600, 29747, 35999, 67406, 96275, 95912, 62486, 9592], [16634, 94163, 87916, 17964, 30990, 38969, 22119, 45383, 46393], [2398, 16871, 28622, 31297, 41746, 66174, 80722, 86400, 91419]) == 645270\nassert solution.maxProfitAssignment([47793, 9587, 71305, 68426, 60195, 66918, 14254, 17898, 48386, 64923], [87895, 25229, 16136, 22919, 66631, 98889, 78083, 54001, 76420, 33727], [5030, 9840, 36711, 55312, 60922, 74250, 99824, 99894]) == 575769\nassert solution.maxProfitAssignment([83683, 68004, 5342, 84531], [49618, 71028, 57932, 21059], [18716, 34036, 43188, 76443, 97193]) == 315852\nassert solution.maxProfitAssignment([2945, 78805, 63712, 35612, 8338], [37193, 64759, 20165, 68615, 809], [22031, 36967, 46021, 63654, 83782, 85181]) == 380268\nassert solution.maxProfitAssignment([94758, 23849, 63371, 61734, 90028, 24748, 98266], [3158, 21652, 16264, 45597, 98651, 53955, 9777], [1306, 41498, 45076, 58435, 70195]) == 215820\nassert solution.maxProfitAssignment([69831, 15872, 79264, 31990, 32054, 15201, 53656, 72305, 54395, 63059], [7603, 45254, 72382, 86147, 76881, 55223, 71845, 59058, 52212, 80198], [19934, 23689, 31447, 68460, 74148, 79181, 93458, 95583, 98911]) == 682551\nassert solution.maxProfitAssignment([71265, 86228, 27785, 46791, 57735, 10662, 12763, 99204, 56250, 97576], [66068, 27162, 37497, 20498, 40899, 31332, 2558, 55702, 98148, 36149], [10056, 13240, 47859, 47927, 58311]) == 204474\nassert solution.maxProfitAssignment([48032, 7455, 87117, 65485, 89922], [86151, 33948, 53331, 24148, 37058], [80583]) == 86151\nassert solution.maxProfitAssignment([3819, 62673, 59630, 28305, 39872], [39898, 35230, 50733, 22823, 59012], [2469, 31443]) == 39898\nassert solution.maxProfitAssignment([8139, 55213, 91228, 16696, 67366, 44522, 81899], [55446, 98920, 26476, 45501, 6445, 11637, 25755], [7682, 28634, 35432, 46037, 53701, 65535, 95637]) == 419624\nassert solution.maxProfitAssignment([62221, 37666, 81923, 44929], [82843, 27528, 73078, 53749], [46132, 62256, 94925]) == 219435\nassert solution.maxProfitAssignment([92739, 9737], [90740, 22280], [28003, 70431, 73483, 75506, 81147, 82508, 84800, 93027]) == 246700\nassert solution.maxProfitAssignment([20146, 69693, 49668, 3963, 68506], [91510, 83243, 51911, 63179, 95626], [16181, 60910]) == 154689\nassert solution.maxProfitAssignment([93767], [20903], [35359, 56728, 74578, 79877]) == 0\nassert solution.maxProfitAssignment([46160, 97052, 90419, 71347, 35757], [28294, 20130, 99427, 30635, 40025], [1320, 17187, 26232, 35906, 59286, 80876]) == 120075\nassert solution.maxProfitAssignment([17857, 149, 87033, 62922, 77304, 607, 66229], [99491, 48402, 8269, 94391, 73067, 43855, 58864], [6554, 11379, 24485, 48517, 56887, 59775, 65075, 79014, 98655]) == 793241\nassert solution.maxProfitAssignment([78965, 60860, 57775, 51554, 38541, 23051], [33937, 8748, 42083, 99721, 83366, 14745], [13458, 18227, 20218, 43145, 55602]) == 183087\nassert solution.maxProfitAssignment([28749, 22290, 5048, 14131], [46731, 29159, 40955, 29752], [1487, 2159, 2806, 21843, 24570, 31066, 38505, 38903, 92709, 96098]) == 315565\nassert solution.maxProfitAssignment([70582, 39082, 52164, 30430, 68793], [4245, 10600, 31857, 45348, 27605], [8733, 16443, 47894, 73923]) == 90696\nassert solution.maxProfitAssignment([88080, 76779, 10797, 14079, 204], [41376, 50984, 62462, 80687, 51995], [465, 2729, 43857, 65261, 89003, 96930]) == 426738\nassert solution.maxProfitAssignment([6808], [97795], [18976, 31699, 66933, 89798, 89976, 92451]) == 586770\nassert solution.maxProfitAssignment([40874, 27884, 20185, 23140], [56632, 54316, 50941, 33503], [17602]) == 0\nassert solution.maxProfitAssignment([42602, 37191, 9320], [67885, 77588, 60232], [36481, 55239, 98638]) == 215408\nassert solution.maxProfitAssignment([60241, 98827, 26926, 10635, 27379, 16089, 36451, 66377], [63698, 68754, 26779, 32812, 75485, 81577, 90978, 58286], [20841, 36353, 44308, 45730, 48529, 70143, 71554, 83175, 84366]) == 800000\nassert solution.maxProfitAssignment([17453, 45241, 84733, 51800, 60385, 7091, 60131], [13914, 8559, 50770, 66036, 97880, 91834, 39476], [25343, 91215]) == 189714\nassert solution.maxProfitAssignment([9082, 63295, 15357, 15998, 30713], [31869, 9629, 9202, 60149, 56943], [18835, 29278, 65873, 69432, 73949]) == 300745\nassert solution.maxProfitAssignment([515, 17616, 2852, 17898, 36952], [58419, 23625, 38899, 37459, 96955], [16810, 24283, 35682, 77513, 83473, 94564]) == 466122\nassert solution.maxProfitAssignment([30235, 78174, 95865, 58455, 29903], [35278, 29583, 86516, 40454, 93124], [17080, 21305, 42922, 75898]) == 186248\nassert solution.maxProfitAssignment([8289, 79838, 557, 18230], [8728, 80571, 31850, 11601], [57297]) == 31850\nassert solution.maxProfitAssignment([34782, 19010, 76719, 47141, 72672, 81688, 92036], [11937, 93564, 18401, 97392, 44905, 81603, 30794], [54965, 92570]) == 194784\nassert solution.maxProfitAssignment([4387, 2514, 9310, 33893, 290, 62063, 87699, 65685], [87424, 5136, 12527, 80012, 73604, 27178, 7119, 18084], [19978, 43541, 56037, 58033, 58337, 71005, 84369, 99376]) == 699392\nassert solution.maxProfitAssignment([65418, 89440, 90400, 26700, 12495, 48202, 54942, 60643], [69669, 1212, 23024, 26390, 98032, 59509, 66676, 77392], [39076, 48914, 70467]) == 294096\nassert solution.maxProfitAssignment([68054, 96294, 60274], [51558, 14908, 49459], [30691, 59550, 60073, 81601, 92263, 96065]) == 154674\nassert solution.maxProfitAssignment([37999, 29885, 89226, 32389, 92675, 17237, 87335, 37108], [75406, 83888, 15728, 17011, 30201, 3862, 5012, 34094], [858, 9193, 30554, 32956, 64388, 70023, 79711, 81880]) == 503328\nassert solution.maxProfitAssignment([89207, 33772, 80251, 65011, 1403, 94512], [78069, 77342, 97663, 11524, 62390, 8329], [22042, 32035, 49616, 51075]) == 279464\nassert solution.maxProfitAssignment([76800, 17692], [38214, 29645], [22556, 25042, 35163, 43188, 47815, 62520, 67311, 85690, 97460]) == 283943\nassert solution.maxProfitAssignment([44247, 3490, 63356], [80670, 45651, 92496], [2104, 7006, 44395, 60502, 72105, 74879, 86051, 89247]) == 576975\nassert solution.maxProfitAssignment([39026, 30582, 54443, 18814, 52266, 44809, 18012, 1216, 70112], [30659, 27360, 16354, 87676, 84345, 78141, 51470, 47373, 39447], [18064]) == 51470\nassert solution.maxProfitAssignment([18758, 96940, 89190], [23798, 23943, 43651], [22021, 31932, 32952, 77145, 98942]) == 138843\nassert solution.maxProfitAssignment([90446, 49705, 45573, 34808, 36521, 42494, 56671, 97688, 65217, 24667], [60081, 3702, 30132, 1243, 11297, 44146, 81821, 84447, 37349, 97151], [29484, 56328]) == 194302\nassert solution.maxProfitAssignment([22264, 64951, 32985, 9844, 588, 22884, 50086, 15050, 78490], [45536, 43647, 14401, 12651, 81542, 17906, 37165, 66653, 37862], [12769, 14590, 15856, 23601, 24332, 32828, 38853, 50847, 67097, 76044]) == 815420\nassert solution.maxProfitAssignment([8049, 40285, 77123, 82018, 27171, 79861, 15626, 71040], [49017, 9714, 83293, 65744, 99403, 37986, 5534, 7183], [22365, 45297, 52079, 54190, 63423, 81099, 96050]) == 645435\nassert solution.maxProfitAssignment([14560, 86454, 14928, 67084, 83237], [14695, 11549, 73115, 79957, 87992], [61227, 73072, 77828]) == 233029\nassert solution.maxProfitAssignment([8265], [69990], [37446, 81437]) == 139980\nassert solution.maxProfitAssignment([30743, 29531, 20148, 63757, 30121, 53111, 4630, 75986, 78433, 54567], [53941, 28045, 5400, 71368, 24411, 64097, 27926, 14024, 77997, 19908], [14958, 19578, 33424, 39576, 48379, 72493, 77733, 79236, 89634, 98627]) == 594402\nassert solution.maxProfitAssignment([3462, 66430, 35003, 2465, 74519, 98192, 39204, 53962, 98172, 41841], [2763, 72121, 49793, 1161, 24238, 47250, 89809, 95317, 17235, 76823], [20466, 21871, 82118, 93625]) == 196160\nassert solution.maxProfitAssignment([43088, 31176, 95347, 82945, 35323, 23968], [90782, 59868, 30306, 89151, 85779, 36627], [21621, 87695]) == 90782\nassert solution.maxProfitAssignment([71099, 64059, 44716, 72289, 53688, 93205, 95682, 56289], [28864, 82583, 93212, 90148, 948, 39961, 11211, 51402], [12151, 21891, 31461, 34678, 36353, 37842, 53929, 58903, 90310, 90846]) == 372848\nassert solution.maxProfitAssignment([20820, 72488, 52183, 78344, 6519, 16924], [6066, 12718, 55128, 67241, 3430, 8089], [3494, 5551, 17703, 37135, 42674, 48228, 56841, 63676, 86609, 86921]) == 277094\nassert solution.maxProfitAssignment([83773], [71090], [32455, 43079, 45772, 52516, 59420, 59487, 72276, 80490, 92499, 99288]) == 142180\nassert solution.maxProfitAssignment([86219, 52865, 23389], [86715, 77704, 20059], [4025, 52803, 59888, 62418, 75144]) == 253171\nassert solution.maxProfitAssignment([76773, 78787, 34067, 67965, 38171], [66721, 5747, 10289, 80760, 12526], [93688]) == 80760\nassert solution.maxProfitAssignment([35689, 43783, 13810, 45347, 35880], [17392, 55133, 92423, 10722, 59692], [18235, 38129, 63660, 88152, 92446]) == 462115\nassert solution.maxProfitAssignment([5427, 25159, 78517, 32743, 67634, 17500, 28487, 71096], [1052, 86058, 53373, 41995, 72918, 91514, 69236, 18501], [12802, 42542, 50585, 54829, 60377, 79074, 82070, 83679, 88251]) == 733164\nassert solution.maxProfitAssignment([40874, 94458, 7481, 66565], [37189, 50510, 42236, 40689], [2985, 29477, 41094, 43034, 44126, 44817, 49230, 90903, 91034]) == 337888\nassert solution.maxProfitAssignment([7293, 32120, 77803], [4183, 84202, 74867], [33563, 77221, 86727, 92187, 92238, 96271]) == 505212\nassert solution.maxProfitAssignment([16290, 38029, 92224, 26835, 91599, 45862, 48308, 70823], [16247, 44245, 61707, 73144, 74867, 89127, 41600, 98056], [1407, 3189, 16273, 39793, 53177, 58166, 70603, 72204, 94389]) == 536637\nassert solution.maxProfitAssignment([16238, 18902, 65065, 60393, 5468, 28802], [64565, 91441, 58687, 16389, 37955, 41205], [71050]) == 91441\nassert solution.maxProfitAssignment([94763, 14957, 53085, 54837, 93742, 62993], [37066, 36054, 97318, 23030, 37622, 57903], [34669, 36030]) == 72108\nassert solution.maxProfitAssignment([53371, 55722, 95522, 71838, 24648, 33040, 90788], [56923, 10215, 80835, 81066, 3393, 95870, 53829], [285, 1471, 5917, 13930, 56541, 56587, 87113, 95614, 99440]) == 479350\nassert solution.maxProfitAssignment([4226], [63600], [12610, 39732, 65024, 95869]) == 254400\nassert solution.maxProfitAssignment([56634, 49897, 43894, 80617, 93521, 81493, 17937, 90551, 80882, 66140], [8606, 21150, 18399, 145, 16083, 89311, 84831, 90079, 33738, 94367], [529, 48049, 48362, 55541, 55954, 57869, 78414]) == 518522\nassert solution.maxProfitAssignment([11498, 32737, 2963, 92288], [58911, 74186, 40760, 71388], [2223, 24684, 43882, 53259, 93243, 96859]) == 355655\nassert solution.maxProfitAssignment([50868, 10813, 93093, 59114, 56502, 89548, 31297, 35518, 93990], [36561, 8742, 34456, 87103, 4166, 22638, 9114, 34149, 46595], [28654, 56488]) == 45303\nassert solution.maxProfitAssignment([92505, 75295, 11043, 40962, 21383, 98285, 26534, 12855, 8179, 33297], [19299, 29213, 37030, 41884, 49500, 56573, 63277, 80529, 15835, 96855], [13967, 22975, 23665, 54137, 67325, 70190, 84762, 89576]) == 725862\nassert solution.maxProfitAssignment([39879], [43234], [17921, 26027, 59197]) == 43234\nassert solution.maxProfitAssignment([197, 75130], [99014, 15985], [162, 698, 725, 4786, 14853, 18262, 38037, 86265, 91050, 99933]) == 891126\nassert solution.maxProfitAssignment([68192], [81971], [15626, 26596, 47642, 66703, 88977]) == 81971\nassert solution.maxProfitAssignment([90919, 85105, 75224, 85267, 87649, 62373, 7586, 65876, 53477], [83746, 14750, 61734, 58073, 19487, 47000, 10466, 50083, 28586], [28640, 31337, 53010, 93111]) == 115144\nassert solution.maxProfitAssignment([47834, 33197, 5357, 29082, 87285], [47416, 52726, 34237, 87180, 58132], [22645, 25545, 43695, 54970, 56749, 63338, 77731, 84677, 88813]) == 678734\nassert solution.maxProfitAssignment([72218, 75561, 71799, 47458], [73852, 5393, 36355, 64240], [8359, 46096, 49742, 54121, 64307, 68470, 83652, 90804, 92770]) == 478516\nassert solution.maxProfitAssignment([4093, 37661, 26168], [35380, 19140, 76844], [1261, 1628, 14732, 18186, 38587, 51260, 60946, 71196, 72697]) == 454980\nassert solution.maxProfitAssignment([93243, 83995, 37440, 23876, 97716, 14217, 35290], [99339, 60399, 14164, 99598, 15239, 43874, 19884], [2260, 14954, 30354, 35719, 85640, 93838]) == 442266\nassert solution.maxProfitAssignment([13235, 10250, 47144, 29101], [65487, 77694, 55933, 95987], [5253, 32543, 40272, 40501, 70038, 76047, 98530]) == 575922",
        "small_test_cases": "\nsolution = Solution()\nassert solution.maxProfitAssignment([2, 4, 6, 8, 10], [10, 20, 30, 40, 50], [4, 5, 6, 7]) == 100\nassert solution.maxProfitAssignment([85, 47, 57], [24, 66, 99], [40, 25, 25]) == 0\n",
        "algorithms": [
            "greedy",
            "binary_search",
            "two_pointers",
            "sorting"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 2939,
        "task_name": "Maximum Xor Product",
        "description": "\n\n<p>Given three integers <code>a</code>, <code>b</code>, and <code>n</code>, return <em>the <strong>maximum value</strong> of</em> <code>(a XOR x) * (b XOR x)</code> <em>where</em> <code>0 &lt;= x &lt; 2<sup>n</sup></code>.</p>\n\n<p>Since the answer may be too large, return it <strong>modulo</strong> <code>10<sup>9 </sup>+ 7</code>.</p>\n\n<p><strong>Note</strong> that <code>XOR</code> is the bitwise XOR operation.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 12, b = 5, n = 4\n<strong>Output:</strong> 98\n<strong>Explanation:</strong> For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \nIt can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 &lt;= x &lt; 2<sup>n</sup><span style=\"font-size: 10.8333px;\">.</span>\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 6, b = 7 , n = 5\n<strong>Output:</strong> 930\n<strong>Explanation:</strong> For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\nIt can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 &lt;= x &lt; 2<sup>n</sup>.</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> a = 1, b = 6, n = 3\n<strong>Output:</strong> 12\n<strong>Explanation:</strong> For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\nIt can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 &lt;= x &lt; 2<sup>n</sup>.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= a, b &lt; 2<sup>50</sup></code></li>\n\t<li><code>0 &lt;= n &lt;= 50</code></li>\n</ul>\n\n",
        "markdown_description": "\nGiven three integers `a`, `b`, and `n`, return *the **maximum value** of* `(a XOR x) * (b XOR x)` *where* `0 <= x < 2n`.\n\n\nSince the answer may be too large, return it **modulo** `109 + 7`.\n\n\n**Note** that `XOR` is the bitwise XOR operation.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** a = 12, b = 5, n = 4\n**Output:** 98\n**Explanation:** For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. \nIt can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** a = 6, b = 7 , n = 5\n**Output:** 930\n**Explanation:** For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.\nIt can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** a = 1, b = 6, n = 3\n**Output:** 12\n**Explanation:** For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.\nIt can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `0 <= a, b < 250`\n* `0 <= n <= 50`\n\n\n",
        "canonical_solution": "class Solution:\n    def maximumXorProduct(self, a: int, b: int, n: int) -> int:\n        mod = 10**9 + 7\n        ax, bx = (a >> n) << n, (b >> n) << n\n        for i in range(n - 1, -1, -1):\n            x = a >> i & 1\n            y = b >> i & 1\n            if x == y:\n                ax |= 1 << i\n                bx |= 1 << i\n            elif ax > bx:\n                bx |= 1 << i\n            else:\n                ax |= 1 << i\n        return ax * bx % mod\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def maximumXorProduct(self, a: int, b: int, n: int) -> int:\n        mod = 10**9 + 7\n        ax, bx = (a >> n) << n, (b >> n) << n\n        for i in range(n - 1, -1, -1):\n            x = a >> i & 1\n            y = b >> i & 1\n            if x == y:\n                ax |= 1 << i\n                bx |= 1 << i\n            elif ax > bx:\n                bx |= 1 << i\n            else:\n                ax |= 1 << i\n        return ax * bx % mod\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random values for a, b, and n\n    a = random.randint(0, 2**50 - 1)\n    b = random.randint(0, 2**50 - 1)\n    n = random.randint(0, 50)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maximumXorProduct(a, b, n)\n\n    return a, b, n, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        a, b, n, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maximumXorProduct(a, b, n) == expected_result\n        print(f\"assert solution.maximumXorProduct({a}, {b}, {n}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maximumXorProduct({a}, {b}, {n}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.maximumXorProduct(1072297517651408, 437909297928259, 4) == 696951069\nassert solution.maximumXorProduct(1033502817572754, 488258145285387, 42) == 844189533\nassert solution.maximumXorProduct(518879363354668, 725525769136565, 20) == 181761524\nassert solution.maximumXorProduct(654900607063220, 466335341060603, 28) == 643919678\nassert solution.maximumXorProduct(826450770778027, 867136941188534, 12) == 415177565\nassert solution.maximumXorProduct(700678274300664, 769548099450701, 33) == 938654257\nassert solution.maximumXorProduct(397598115702457, 204672362163535, 26) == 987698790\nassert solution.maximumXorProduct(1097841846801464, 942725371171660, 50) == 345884015\nassert solution.maximumXorProduct(969452539351867, 332606312268392, 32) == 495917257\nassert solution.maximumXorProduct(29422950828494, 731762355234832, 39) == 304789559\nassert solution.maximumXorProduct(1101097809561480, 380213794675945, 5) == 6382931\nassert solution.maximumXorProduct(667915746854870, 450007859840576, 3) == 460504849\nassert solution.maximumXorProduct(787660584180687, 168444700260349, 35) == 756304458\nassert solution.maximumXorProduct(312375492019315, 490354229181653, 41) == 78272329\nassert solution.maximumXorProduct(391134531156899, 658855268414999, 16) == 370609176\nassert solution.maximumXorProduct(743426035010468, 807133177488047, 14) == 960093736\nassert solution.maximumXorProduct(560068222046417, 429285438627351, 22) == 419067783\nassert solution.maximumXorProduct(763480868153226, 946676677483128, 35) == 975250074\nassert solution.maximumXorProduct(420088758374810, 927989109200234, 41) == 778227856\nassert solution.maximumXorProduct(95645909735962, 10338370925609, 17) == 887043891\nassert solution.maximumXorProduct(796282827280100, 8874996766822, 27) == 900511890\nassert solution.maximumXorProduct(170775523879794, 314871106704711, 44) == 818229408\nassert solution.maximumXorProduct(627347861913805, 472629228650153, 7) == 999180965\nassert solution.maximumXorProduct(829781725833832, 450703023473662, 14) == 21742337\nassert solution.maximumXorProduct(788593490518101, 268237254433313, 10) == 714905339\nassert solution.maximumXorProduct(531658128965829, 325066226516685, 13) == 652676106\nassert solution.maximumXorProduct(100937327722561, 456658291463885, 23) == 983594444\nassert solution.maximumXorProduct(331200320885478, 271844955051261, 31) == 910418372\nassert solution.maximumXorProduct(843378067423714, 484310757596490, 25) == 506005389\nassert solution.maximumXorProduct(203760229129029, 1124825083343402, 27) == 951680397\nassert solution.maximumXorProduct(339834935828847, 321186460813546, 6) == 789221036\nassert solution.maximumXorProduct(612352393335707, 244516879877840, 15) == 815274715\nassert solution.maximumXorProduct(872543236915592, 179827392879336, 29) == 534406712\nassert solution.maximumXorProduct(803095300890258, 742568869089440, 21) == 45894424\nassert solution.maximumXorProduct(996374453396746, 404581895697689, 12) == 250225661\nassert solution.maximumXorProduct(874748174756546, 85857691856644, 44) == 916656125\nassert solution.maximumXorProduct(85116862200763, 578638427374268, 46) == 487235215\nassert solution.maximumXorProduct(544485660360036, 800422342219480, 9) == 486196567\nassert solution.maximumXorProduct(1108918416626529, 840723815837531, 32) == 268700939\nassert solution.maximumXorProduct(219316146094518, 1058828050792091, 3) == 194199083\nassert solution.maximumXorProduct(45610741644662, 233928383128931, 13) == 842237278\nassert solution.maximumXorProduct(1044804860709206, 1029760728921526, 12) == 13904422\nassert solution.maximumXorProduct(999764635623176, 847940243043950, 50) == 208965262\nassert solution.maximumXorProduct(688255673330577, 366502380713411, 3) == 829464240\nassert solution.maximumXorProduct(627398714169132, 269785264548658, 33) == 704657686\nassert solution.maximumXorProduct(238752995224281, 1035716933823171, 12) == 905275916\nassert solution.maximumXorProduct(1082347772288279, 274382888467673, 39) == 890086209\nassert solution.maximumXorProduct(983761301631143, 743385330301828, 43) == 700141527\nassert solution.maximumXorProduct(230098844144865, 990977388267374, 6) == 109852093\nassert solution.maximumXorProduct(1115260610028227, 977449122586201, 34) == 113425365\nassert solution.maximumXorProduct(1048838400405412, 186520597487547, 45) == 277644487\nassert solution.maximumXorProduct(569112426615430, 1083637526547606, 44) == 117014975\nassert solution.maximumXorProduct(547856503204782, 993461852275023, 11) == 392351443\nassert solution.maximumXorProduct(7437566012331, 80623093990443, 15) == 786843234\nassert solution.maximumXorProduct(750865566982240, 630017751646327, 2) == 475511493\nassert solution.maximumXorProduct(478310508852007, 38515044567465, 22) == 938731931\nassert solution.maximumXorProduct(937900527243321, 302777165626772, 35) == 564471231\nassert solution.maximumXorProduct(425082875245149, 343666146435417, 42) == 437809769\nassert solution.maximumXorProduct(337911447238655, 910177495456008, 8) == 881837588\nassert solution.maximumXorProduct(774639190894842, 529058968678775, 27) == 546989426\nassert solution.maximumXorProduct(722391364489478, 250980209963292, 19) == 145039622\nassert solution.maximumXorProduct(127240250267758, 835363975617236, 50) == 714337983\nassert solution.maximumXorProduct(1018182975829804, 278244705720631, 21) == 20126339\nassert solution.maximumXorProduct(427249603162522, 369512855813026, 45) == 226795484\nassert solution.maximumXorProduct(218573276037437, 1114114836184006, 17) == 159144030\nassert solution.maximumXorProduct(658161236352517, 681675346707992, 8) == 293049165\nassert solution.maximumXorProduct(468245781742769, 593867089900481, 45) == 160043908\nassert solution.maximumXorProduct(277209483026234, 1045349542272787, 30) == 44777918\nassert solution.maximumXorProduct(820404816926934, 497848987371104, 45) == 904807003\nassert solution.maximumXorProduct(122662763981566, 504185108856459, 28) == 174906514\nassert solution.maximumXorProduct(822109040580783, 936314864226149, 4) == 309879920\nassert solution.maximumXorProduct(452262842766477, 399200537286430, 1) == 230164959\nassert solution.maximumXorProduct(1024070885455763, 1047410006047987, 43) == 177118443\nassert solution.maximumXorProduct(389141855749614, 851979168434115, 46) == 791027632\nassert solution.maximumXorProduct(31712117393495, 994244727053476, 4) == 965744384\nassert solution.maximumXorProduct(686769374638043, 848424785551404, 8) == 483958242\nassert solution.maximumXorProduct(647629592894412, 1110900304191293, 10) == 607609690\nassert solution.maximumXorProduct(681457005585267, 879586462464566, 10) == 600116073\nassert solution.maximumXorProduct(197172691833528, 271836775067096, 4) == 776233285\nassert solution.maximumXorProduct(756174133285343, 789671286633870, 34) == 265272775\nassert solution.maximumXorProduct(348448535937691, 985920086216184, 9) == 596423755\nassert solution.maximumXorProduct(661113285321727, 47695205597191, 50) == 400164403\nassert solution.maximumXorProduct(18411385288982, 685688754172722, 40) == 806702368\nassert solution.maximumXorProduct(573270951294456, 1113186861771050, 42) == 175270245\nassert solution.maximumXorProduct(693138501105207, 946567840521116, 38) == 818209074\nassert solution.maximumXorProduct(675196341945111, 785945052238984, 21) == 893550384\nassert solution.maximumXorProduct(667575052463022, 459329314622523, 34) == 259101913\nassert solution.maximumXorProduct(736895470122350, 523379128444538, 20) == 958923572\nassert solution.maximumXorProduct(143264960187493, 209110344585824, 34) == 392601280\nassert solution.maximumXorProduct(81840884774170, 20923923145432, 8) == 902869663\nassert solution.maximumXorProduct(672973140251249, 835001226551257, 37) == 561052352\nassert solution.maximumXorProduct(838380109629443, 1064363853907903, 35) == 569744154\nassert solution.maximumXorProduct(914847818988869, 423313918049902, 10) == 389348345\nassert solution.maximumXorProduct(507833715676562, 1074440098645452, 17) == 797787764\nassert solution.maximumXorProduct(541210169472388, 384553158040798, 23) == 142059200\nassert solution.maximumXorProduct(21183842377751, 1076233478546107, 22) == 834355212\nassert solution.maximumXorProduct(702370413886316, 971150213477422, 37) == 261905846\nassert solution.maximumXorProduct(79128961300669, 526805306649494, 17) == 89155330\nassert solution.maximumXorProduct(98384883586577, 371406695654412, 30) == 405733264\nassert solution.maximumXorProduct(158993952040548, 27876746854952, 23) == 279129968",
        "small_test_cases": "\nsolution = Solution()\nassert solution.maximumXorProduct(12, 5, 4) == 98\nassert solution.maximumXorProduct(6, 7, 5) == 930\nassert solution.maximumXorProduct(1, 6, 3) == 12\n",
        "algorithms": [
            "greedy",
            "bit_manipulation"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 2734,
        "task_name": "Lexicographically Smallest String After Substring Operation",
        "description": "\n\n<p>You are given a string <code>s</code> consisting of only lowercase English letters. In one operation, you can do the following:</p>\n\n<ul>\n\t<li>Select any non-empty substring of <code>s</code>, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, &#39;b&#39; is converted to &#39;a&#39;, and &#39;a&#39; is converted to &#39;z&#39;.</li>\n</ul>\n\n<p>Return <em>the <strong>lexicographically smallest</strong> string you can obtain after performing the above operation <strong>exactly once</strong>.</em></p>\n\n<p>A <strong>substring</strong> is a contiguous sequence of characters in a string.</p>\nA string <code>x</code> is <strong>lexicographically smaller</strong> than a string <code>y</code> of the same length if <code>x[i]</code> comes before <code>y[i]</code> in alphabetic order for the first position <code>i</code> such that <code>x[i] != y[i]</code>.\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbabc&quot;\n<strong>Output:</strong> &quot;baabc&quot;\n<strong>Explanation:</strong> We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;acbbc&quot;\n<strong>Output:</strong> &quot;abaab&quot;\n<strong>Explanation:</strong> We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;leetcode&quot;\n<strong>Output:</strong> &quot;kddsbncd&quot;\n<strong>Explanation:</strong> We apply the operation on the entire string. \nIt can be proven that the resulting string is the lexicographically smallest. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 3 * 10<sup>5</sup></code></li>\n\t<li><code>s</code> consists of lowercase English letters</li>\n</ul>\n\n",
        "markdown_description": "\nYou are given a string `s` consisting of only lowercase English letters. In one operation, you can do the following:\n\n\n* Select any non-empty substring of `s`, possibly the entire string, then replace each one of its characters with the previous character of the English alphabet. For example, 'b' is converted to 'a', and 'a' is converted to 'z'.\n\n\nReturn *the **lexicographically smallest** string you can obtain after performing the above operation **exactly once**.*\n\n\nA **substring** is a contiguous sequence of characters in a string.\n\n\nA string `x` is **lexicographically smaller** than a string `y` of the same length if `x[i]` comes before `y[i]` in alphabetic order for the first position `i` such that `x[i] != y[i]`.\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"cbabc\"\n**Output:** \"baabc\"\n**Explanation:** We apply the operation on the substring starting at index 0, and ending at index 1 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"acbbc\"\n**Output:** \"abaab\"\n**Explanation:** We apply the operation on the substring starting at index 1, and ending at index 4 inclusive. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** s = \"leetcode\"\n**Output:** \"kddsbncd\"\n**Explanation:** We apply the operation on the entire string. \nIt can be proven that the resulting string is the lexicographically smallest. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 3 * 105`\n* `s` consists of lowercase English letters\n\n\n",
        "canonical_solution": "class Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        i = 0\n        while i < n and s[i] == \"a\":\n            i += 1\n        if i == n:\n            return s[:-1] + \"z\"\n        j = i\n        while j < n and s[j] != \"a\":\n            j += 1\n        return s[:i] + \"\".join(chr(ord(c) - 1) for c in s[i:j]) + s[j:]\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestString(self, s: str) -> str:\n        n = len(s)\n        i = 0\n        while i < n and s[i] == \"a\":\n            i += 1\n        if i == n:\n            return s[:-1] + \"z\"\n        j = i\n        while j < n and s[j] != \"a\":\n            j += 1\n        return s[:i] + \"\".join(chr(ord(c) - 1) for c in s[i:j]) + s[j:]\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random string\n    s = ''.join(random.choice('abcdefghijklmnopqrstuvwxyz') for _ in range(random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestString(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestString(s) == expected_result\n        print(f\"assert solution.smallestString('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.smallestString('{s}') == '{expected_result}'\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.smallestString('xzxhko') == 'wywgjn'\nassert solution.smallestString('k') == 'j'\nassert solution.smallestString('seeep') == 'rdddo'\nassert solution.smallestString('etkfgbcned') == 'dsjefabmdc'\nassert solution.smallestString('xcep') == 'wbdo'\nassert solution.smallestString('mnhp') == 'lmgo'\nassert solution.smallestString('yfgswwrxo') == 'xefrvvqwn'\nassert solution.smallestString('jypeyqg') == 'ixodxpf'\nassert solution.smallestString('xihhfurb') == 'whggetqa'\nassert solution.smallestString('ltfmhjuox') == 'kselgitnw'\nassert solution.smallestString('abevx') == 'aaduw'\nassert solution.smallestString('whcmz') == 'vgbly'\nassert solution.smallestString('zyvpbxfv') == 'yxuoaweu'\nassert solution.smallestString('pji') == 'oih'\nassert solution.smallestString('w') == 'v'\nassert solution.smallestString('mula') == 'ltka'\nassert solution.smallestString('fi') == 'eh'\nassert solution.smallestString('wkoja') == 'vjnia'\nassert solution.smallestString('bmdlfut') == 'alckets'\nassert solution.smallestString('zmn') == 'ylm'\nassert solution.smallestString('jlbjmhtcp') == 'ikailgsbo'\nassert solution.smallestString('ruafvx') == 'qtafvx'\nassert solution.smallestString('avqjcpfg') == 'aupiboef'\nassert solution.smallestString('rrvommbfek') == 'qqunllaedj'\nassert solution.smallestString('xqpc') == 'wpob'\nassert solution.smallestString('mccucbumk') == 'lbbtbatlj'\nassert solution.smallestString('zyecmrdyc') == 'yxdblqcxb'\nassert solution.smallestString('osq') == 'nrp'\nassert solution.smallestString('v') == 'u'\nassert solution.smallestString('nfrboqflc') == 'meqanpekb'\nassert solution.smallestString('urolg') == 'tqnkf'\nassert solution.smallestString('muajx') == 'ltajx'\nassert solution.smallestString('fwck') == 'evbj'\nassert solution.smallestString('zh') == 'yg'\nassert solution.smallestString('zirxf') == 'yhqwe'\nassert solution.smallestString('y') == 'x'\nassert solution.smallestString('vaf') == 'uaf'\nassert solution.smallestString('zlt') == 'yks'\nassert solution.smallestString('ffqtfumsql') == 'eepsetlrpk'\nassert solution.smallestString('byre') == 'axqd'\nassert solution.smallestString('ptkpruqbr') == 'osjoqtpaq'\nassert solution.smallestString('tsswyxwg') == 'srrvxwvf'\nassert solution.smallestString('ntp') == 'mso'\nassert solution.smallestString('lrhklqpp') == 'kqgjkpoo'\nassert solution.smallestString('ii') == 'hh'\nassert solution.smallestString('wal') == 'val'\nassert solution.smallestString('hrzneyz') == 'gqymdxy'\nassert solution.smallestString('asm') == 'arl'\nassert solution.smallestString('xa') == 'wa'\nassert solution.smallestString('nvg') == 'muf'\nassert solution.smallestString('xhesndlgv') == 'wgdrmckfu'\nassert solution.smallestString('n') == 'm'\nassert solution.smallestString('plkzp') == 'okjyo'\nassert solution.smallestString('fbomn') == 'eanlm'\nassert solution.smallestString('qaklm') == 'paklm'\nassert solution.smallestString('omqknlbs') == 'nlpjmkar'\nassert solution.smallestString('zsj') == 'yri'\nassert solution.smallestString('qizarcut') == 'phyarcut'\nassert solution.smallestString('emvvi') == 'dluuh'\nassert solution.smallestString('jskzzbwlb') == 'irjyyavka'\nassert solution.smallestString('ql') == 'pk'\nassert solution.smallestString('k') == 'j'\nassert solution.smallestString('l') == 'k'\nassert solution.smallestString('oy') == 'nx'\nassert solution.smallestString('thenbya') == 'sgdmaxa'\nassert solution.smallestString('lwryds') == 'kvqxcr'\nassert solution.smallestString('tzxwaowo') == 'sywvaowo'\nassert solution.smallestString('rvcsh') == 'qubrg'\nassert solution.smallestString('grsxrb') == 'fqrwqa'\nassert solution.smallestString('sa') == 'ra'\nassert solution.smallestString('xprdqi') == 'woqcph'\nassert solution.smallestString('xmepb') == 'wldoa'\nassert solution.smallestString('wedbnofi') == 'vdcamneh'\nassert solution.smallestString('lpk') == 'koj'\nassert solution.smallestString('lzizjxzq') == 'kyhyiwyp'\nassert solution.smallestString('br') == 'aq'\nassert solution.smallestString('zcjs') == 'ybir'\nassert solution.smallestString('bwdetalqng') == 'avcdsalqng'\nassert solution.smallestString('z') == 'y'\nassert solution.smallestString('gtrv') == 'fsqu'\nassert solution.smallestString('mcqks') == 'lbpjr'\nassert solution.smallestString('et') == 'ds'\nassert solution.smallestString('fcpgn') == 'ebofm'\nassert solution.smallestString('xhaxa') == 'wgaxa'\nassert solution.smallestString('ncabpzmn') == 'mbabpzmn'\nassert solution.smallestString('xf') == 'we'\nassert solution.smallestString('upf') == 'toe'\nassert solution.smallestString('jqocutkg') == 'ipnbtsjf'\nassert solution.smallestString('ehnm') == 'dgml'\nassert solution.smallestString('smkbiej') == 'rljahdi'\nassert solution.smallestString('twazzlfkz') == 'svazzlfkz'\nassert solution.smallestString('ernps') == 'dqmor'\nassert solution.smallestString('qelnjb') == 'pdkmia'\nassert solution.smallestString('bq') == 'ap'\nassert solution.smallestString('mcnrpv') == 'lbmqou'\nassert solution.smallestString('cvprlcgq') == 'buoqkbfp'\nassert solution.smallestString('gipm') == 'fhol'\nassert solution.smallestString('m') == 'l'\nassert solution.smallestString('qmqa') == 'plpa'\nassert solution.smallestString('uj') == 'ti'",
        "small_test_cases": "\nsolution = Solution()\nassert solution.smallestString('cbabc') == 'baabc'\nassert solution.smallestString('acbbc') == 'abaab'\nassert solution.smallestString('leetcode') == 'kddsbncd'\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 376,
        "task_name": "Wiggle Subsequence",
        "description": "\n\n<p>A <strong>wiggle sequence</strong> is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.</p>\n\n<ul>\n\t<li>For example, <code>[1, 7, 4, 9, 2, 5]</code> is a <strong>wiggle sequence</strong> because the differences <code>(6, -3, 5, -7, 3)</code> alternate between positive and negative.</li>\n\t<li>In contrast, <code>[1, 4, 7, 2, 5]</code> and <code>[1, 7, 4, 5, 5]</code> are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.</li>\n</ul>\n\n<p>A <strong>subsequence</strong> is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.</p>\n\n<p>Given an integer array <code>nums</code>, return <em>the length of the longest <strong>wiggle subsequence</strong> of </em><code>nums</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,7,4,9,2,5]\n<strong>Output:</strong> 6\n<strong>Explanation:</strong> The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,17,5,10,13,15,10,5,16,8]\n<strong>Output:</strong> 7\n<strong>Explanation:</strong> There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5,6,7,8,9]\n<strong>Output:</strong> 2\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 1000</code></li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Could you solve this in <code>O(n)</code> time?</p>\n\n",
        "markdown_description": "\nA **wiggle sequence** is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.\n\n\n* For example, `[1, 7, 4, 9, 2, 5]` is a **wiggle sequence** because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.\n* In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.\n\n\nA **subsequence** is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.\n\n\nGiven an integer array `nums`, return *the length of the longest **wiggle subsequence** of* `nums`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,7,4,9,2,5]\n**Output:** 6\n**Explanation:** The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,17,5,10,13,15,10,5,16,8]\n**Output:** 7\n**Explanation:** There are several subsequences that achieve this length.\nOne is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5,6,7,8,9]\n**Output:** 2\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `0 <= nums[i] <= 1000`\n\n\n\u00a0\n\n\n**Follow up:** Could you solve this in `O(n)` time?\n\n\n",
        "canonical_solution": "class Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        up = down = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up = max(up, down + 1)\n            elif nums[i] < nums[i - 1]:\n                down = max(down, up + 1)\n        return max(up, down)\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def wiggleMaxLength(self, nums: List[int]) -> int:\n        up = down = 1\n        for i in range(1, len(nums)):\n            if nums[i] > nums[i - 1]:\n                up = max(up, down + 1)\n            elif nums[i] < nums[i - 1]:\n                down = max(down, up + 1)\n        return max(up, down)\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.sample(range(1, 101), random.randint(2, 10))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.wiggleMaxLength(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.wiggleMaxLength(nums) == expected_result\n        print(f\"assert solution.wiggleMaxLength({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.wiggleMaxLength({nums}) == {expected_result}\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.wiggleMaxLength([71, 24, 67, 64, 85, 65, 39, 68, 29, 80]) == 9\nassert solution.wiggleMaxLength([10, 57, 95, 53, 3, 2, 36]) == 4\nassert solution.wiggleMaxLength([23, 38, 64, 36, 27, 35, 53]) == 4\nassert solution.wiggleMaxLength([100, 1, 31, 40, 96, 5, 86, 73, 33, 9]) == 6\nassert solution.wiggleMaxLength([11, 29, 4, 39]) == 4\nassert solution.wiggleMaxLength([4, 89, 68]) == 3\nassert solution.wiggleMaxLength([48, 79, 37, 33, 30]) == 3\nassert solution.wiggleMaxLength([24, 27, 2, 36, 14, 81, 16, 98]) == 8\nassert solution.wiggleMaxLength([41, 47, 38, 79, 25, 60, 95, 88, 91]) == 8\nassert solution.wiggleMaxLength([44, 31, 39, 79, 51, 55]) == 5\nassert solution.wiggleMaxLength([76, 23, 59, 98, 30, 39, 66, 64, 56, 27]) == 6\nassert solution.wiggleMaxLength([14, 25, 59, 10, 68, 78, 47]) == 5\nassert solution.wiggleMaxLength([63, 80, 72, 25, 92, 38, 1, 15, 28]) == 6\nassert solution.wiggleMaxLength([45, 31, 47]) == 3\nassert solution.wiggleMaxLength([59, 88, 91, 5]) == 3\nassert solution.wiggleMaxLength([14, 94, 100, 10, 4, 50, 49, 41, 2]) == 5\nassert solution.wiggleMaxLength([27, 31, 22]) == 3\nassert solution.wiggleMaxLength([41, 88, 59]) == 3\nassert solution.wiggleMaxLength([6, 1, 88, 75, 65, 40]) == 4\nassert solution.wiggleMaxLength([11, 53, 30]) == 3\nassert solution.wiggleMaxLength([28, 85, 84, 68]) == 3\nassert solution.wiggleMaxLength([95, 23, 99, 43]) == 4\nassert solution.wiggleMaxLength([42, 64, 68, 26, 84, 71, 37, 12, 100, 77]) == 7\nassert solution.wiggleMaxLength([86, 39, 56, 75, 74, 6]) == 4\nassert solution.wiggleMaxLength([39, 45, 69, 6]) == 3\nassert solution.wiggleMaxLength([79, 57, 62, 29, 22, 52, 99, 14, 1]) == 6\nassert solution.wiggleMaxLength([22, 67, 40, 66, 23, 30, 56, 31, 88, 32]) == 9\nassert solution.wiggleMaxLength([57, 9, 42, 65]) == 3\nassert solution.wiggleMaxLength([36, 7, 51, 11]) == 4\nassert solution.wiggleMaxLength([35, 21, 99, 61, 4]) == 4\nassert solution.wiggleMaxLength([18, 76, 26, 52, 80, 21, 63, 14, 29, 22]) == 9\nassert solution.wiggleMaxLength([55, 16]) == 2\nassert solution.wiggleMaxLength([88, 61, 81]) == 3\nassert solution.wiggleMaxLength([75, 56, 11, 85, 38, 13, 81, 35]) == 6\nassert solution.wiggleMaxLength([30, 15, 69, 4, 56]) == 5\nassert solution.wiggleMaxLength([65, 76, 43, 57, 55, 26, 13, 74, 53]) == 7\nassert solution.wiggleMaxLength([93, 94]) == 2\nassert solution.wiggleMaxLength([62, 82, 40, 13, 72, 77, 68, 71, 86, 23]) == 7\nassert solution.wiggleMaxLength([60, 86, 95, 70, 48, 67, 20, 55]) == 6\nassert solution.wiggleMaxLength([83, 39, 18, 50, 13]) == 4\nassert solution.wiggleMaxLength([6, 26, 75, 15, 18, 94, 3, 35, 39]) == 6\nassert solution.wiggleMaxLength([60, 32, 61, 23, 76, 12, 62]) == 7\nassert solution.wiggleMaxLength([84, 44, 81, 29, 98, 80, 85, 41]) == 8\nassert solution.wiggleMaxLength([4, 75, 94, 58, 57, 78, 65, 14, 95]) == 6\nassert solution.wiggleMaxLength([23, 16, 53, 74, 64, 8, 90]) == 5\nassert solution.wiggleMaxLength([99, 21, 86, 10, 67, 57, 95, 69]) == 8\nassert solution.wiggleMaxLength([39, 52, 60, 77, 26, 97, 51, 50, 20, 5]) == 5\nassert solution.wiggleMaxLength([43, 68, 85, 25, 98, 34, 74, 40]) == 7\nassert solution.wiggleMaxLength([47, 48, 19, 71, 76, 32, 26]) == 5\nassert solution.wiggleMaxLength([32, 39, 64, 23, 15, 17]) == 4\nassert solution.wiggleMaxLength([90, 77]) == 2\nassert solution.wiggleMaxLength([88, 35, 16, 60, 96]) == 3\nassert solution.wiggleMaxLength([45, 9, 31, 84, 1, 49, 4, 25]) == 7\nassert solution.wiggleMaxLength([7, 32, 15, 34, 99, 20, 77, 72, 47, 16]) == 7\nassert solution.wiggleMaxLength([79, 53, 7, 19, 94, 39, 11]) == 4\nassert solution.wiggleMaxLength([36, 92, 50, 44]) == 3\nassert solution.wiggleMaxLength([22, 62]) == 2\nassert solution.wiggleMaxLength([35, 38, 73, 69]) == 3\nassert solution.wiggleMaxLength([72, 67, 65, 88, 17]) == 4\nassert solution.wiggleMaxLength([23, 64, 91, 5, 72]) == 4\nassert solution.wiggleMaxLength([69, 19, 81, 96, 51]) == 4\nassert solution.wiggleMaxLength([24, 57]) == 2\nassert solution.wiggleMaxLength([65, 90]) == 2\nassert solution.wiggleMaxLength([99, 12, 64, 33, 60, 83, 65]) == 6\nassert solution.wiggleMaxLength([40, 55, 35, 60, 64, 37, 20]) == 5\nassert solution.wiggleMaxLength([9, 28, 56, 22]) == 3\nassert solution.wiggleMaxLength([42, 29, 34, 44]) == 3\nassert solution.wiggleMaxLength([23, 97, 64, 84, 47, 81, 69, 85]) == 8\nassert solution.wiggleMaxLength([67, 86, 46, 88, 70, 31]) == 5\nassert solution.wiggleMaxLength([87, 7, 39, 54, 95, 97, 36, 69, 8, 70]) == 7\nassert solution.wiggleMaxLength([66, 34, 60]) == 3\nassert solution.wiggleMaxLength([100, 66, 38, 50, 86, 23, 7]) == 4\nassert solution.wiggleMaxLength([82, 90, 71, 29, 44]) == 4\nassert solution.wiggleMaxLength([78, 38, 28]) == 2\nassert solution.wiggleMaxLength([75, 22, 16, 27, 86, 57, 26]) == 4\nassert solution.wiggleMaxLength([16, 22, 31, 28, 23]) == 3\nassert solution.wiggleMaxLength([97, 8, 50, 63, 57]) == 4\nassert solution.wiggleMaxLength([47, 76, 74, 65, 44, 52]) == 4\nassert solution.wiggleMaxLength([4, 70, 69, 55, 59]) == 4\nassert solution.wiggleMaxLength([67, 88, 91, 2, 98]) == 4\nassert solution.wiggleMaxLength([94, 83, 37, 26, 22]) == 2\nassert solution.wiggleMaxLength([19, 34]) == 2\nassert solution.wiggleMaxLength([70, 12, 73, 94, 60, 45, 36, 33, 72]) == 5\nassert solution.wiggleMaxLength([51, 33, 42, 43]) == 3\nassert solution.wiggleMaxLength([58, 53, 8, 56, 81, 18, 29, 84, 14, 5]) == 6\nassert solution.wiggleMaxLength([19, 61, 24, 72, 14, 43, 84, 2, 11]) == 8\nassert solution.wiggleMaxLength([32, 86, 31, 26, 38, 40, 54, 28, 93]) == 6\nassert solution.wiggleMaxLength([68, 98, 16, 8, 57, 4, 49, 41, 54, 81]) == 8\nassert solution.wiggleMaxLength([21, 76, 49]) == 3\nassert solution.wiggleMaxLength([14, 33, 22, 15, 6]) == 3\nassert solution.wiggleMaxLength([49, 79, 100, 33, 67, 11]) == 5\nassert solution.wiggleMaxLength([90, 59, 71]) == 3\nassert solution.wiggleMaxLength([2, 96, 14, 100, 54, 77, 1, 55, 47, 74]) == 10\nassert solution.wiggleMaxLength([67, 12]) == 2\nassert solution.wiggleMaxLength([53, 29, 96, 58]) == 4\nassert solution.wiggleMaxLength([32, 95, 96]) == 2\nassert solution.wiggleMaxLength([91, 73, 83, 70, 63, 26, 49, 100, 64, 46]) == 6\nassert solution.wiggleMaxLength([68, 57, 58, 2, 36, 22, 88, 25, 9, 38]) == 9\nassert solution.wiggleMaxLength([96, 17, 94, 99, 39]) == 4\nassert solution.wiggleMaxLength([52, 39, 43, 22]) == 4",
        "small_test_cases": "\nsolution = Solution()\nassert solution.wiggleMaxLength([1, 7, 4, 9, 2, 5]) == 6\nassert solution.wiggleMaxLength([1, 17, 5, 10, 13, 15, 10, 5, 16, 8]) == 7\nassert solution.wiggleMaxLength([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 2\n",
        "algorithms": [
            "greedy",
            "dynamic_programming"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 452,
        "task_name": "Minimum Number of Arrows to Burst Balloons",
        "description": "\n\n<p>There are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array <code>points</code> where <code>points[i] = [x<sub>start</sub>, x<sub>end</sub>]</code> denotes a balloon whose <strong>horizontal diameter</strong> stretches between <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code>. You do not know the exact y-coordinates of the balloons.</p>\n\n<p>Arrows can be shot up <strong>directly vertically</strong> (in the positive y-direction) from different points along the x-axis. A balloon with <code>x<sub>start</sub></code> and <code>x<sub>end</sub></code> is <strong>burst</strong> by an arrow shot at <code>x</code> if <code>x<sub>start</sub> &lt;= x &lt;= x<sub>end</sub></code>. There is <strong>no limit</strong> to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.</p>\n\n<p>Given the array <code>points</code>, return <em>the <strong>minimum</strong> number of arrows that must be shot to burst all balloons</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[10,16],[2,8],[1,6],[7,12]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[3,4],[5,6],[7,8]]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> One arrow needs to be shot for each balloon for a total of 4 arrows.\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> points = [[1,2],[2,3],[3,4],[4,5]]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= points.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>points[i].length == 2</code></li>\n\t<li><code>-2<sup>31</sup> &lt;= x<sub>start</sub> &lt; x<sub>end</sub> &lt;= 2<sup>31</sup> - 1</code></li>\n</ul>\n\n",
        "markdown_description": "\nThere are some spherical balloons taped onto a flat wall that represents the XY-plane. The balloons are represented as a 2D integer array `points` where `points[i] = [xstart, xend]` denotes a balloon whose **horizontal diameter** stretches between `xstart` and `xend`. You do not know the exact y-coordinates of the balloons.\n\n\nArrows can be shot up **directly vertically** (in the positive y-direction) from different points along the x-axis. A balloon with `xstart` and `xend` is **burst** by an arrow shot at `x` if `xstart <= x <= xend`. There is **no limit** to the number of arrows that can be shot. A shot arrow keeps traveling up infinitely, bursting any balloons in its path.\n\n\nGiven the array `points`, return *the **minimum** number of arrows that must be shot to burst all balloons*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** points = [[10,16],[2,8],[1,6],[7,12]]\n**Output:** 2\n**Explanation:** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 6, bursting the balloons [2,8] and [1,6].\n- Shoot an arrow at x = 11, bursting the balloons [10,16] and [7,12].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** points = [[1,2],[3,4],[5,6],[7,8]]\n**Output:** 4\n**Explanation:** One arrow needs to be shot for each balloon for a total of 4 arrows.\n\n```\n\n**Example 3:**\n\n\n\n```\n\n**Input:** points = [[1,2],[2,3],[3,4],[4,5]]\n**Output:** 2\n**Explanation:** The balloons can be burst by 2 arrows:\n- Shoot an arrow at x = 2, bursting the balloons [1,2] and [2,3].\n- Shoot an arrow at x = 4, bursting the balloons [3,4] and [4,5].\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= points.length <= 105`\n* `points[i].length == 2`\n* `-231 <= xstart < xend <= 231 - 1`\n\n\n",
        "canonical_solution": "class Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        ans, last = 0, -inf\n        for a, b in sorted(points, key=lambda x: x[1]):\n            if a > last:\n                ans += 1\n                last = b\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def findMinArrowShots(self, points: List[List[int]]) -> int:\n        ans, last = 0, float('-inf')\n        for a, b in sorted(points, key=lambda x: x[1]):\n            if a > last:\n                ans += 1\n                last = b\n        return ans\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random points list\n    points = []\n    for _ in range(random.randint(1, 100)):\n        x_start = random.randint(-1000, 1000)\n        x_end = random.randint(x_start, 1000)\n        points.append([x_start, x_end])\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.findMinArrowShots(points)\n\n    return points, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        points, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.findMinArrowShots(points) == expected_result\n\n        formatted_points = '['\n        for point in points:\n            formatted_point = f'[{point[0]}, {point[1]}], '\n            formatted_points += formatted_point\n        formatted_points = formatted_points.rstrip(', ')\n        formatted_points += ']'\n        \n        formatted_result = f'assert solution.findMinArrowShots({formatted_points}) == {expected_result}'\n        print(formatted_result)\n        test_case_generator_results.append(formatted_result)\n\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.findMinArrowShots([[528, 578], [505, 884], [956, 999], [-487, -158], [898, 916], [649, 932], [-229, 34], [580, 791], [173, 480], [207, 453], [557, 637], [-394, -163], [764, 828], [-352, -272], [-55, 520], [410, 819], [330, 946], [257, 503], [-612, 723], [534, 835], [605, 617], [-53, 979], [420, 984], [-511, 136], [696, 793], [745, 791], [-51, 481], [135, 165], [-581, 231], [111, 584], [387, 550], [40, 986], [-458, -448], [-244, 276], [-16, 969], [569, 754], [-742, -535], [413, 417], [-302, 105], [-680, 931], [565, 797], [353, 805], [-302, -182], [147, 512], [-300, 656], [454, 903], [503, 608], [-51, 492], [297, 343], [846, 944], [-967, 706], [-473, 51], [-963, 301], [-107, 160], [339, 436], [-984, 813], [-598, -405], [310, 868], [-448, 864], [-90, 317], [103, 445], [-418, 227], [-762, 187], [986, 986], [26, 318], [-555, -519], [112, 964], [229, 279], [362, 662]]) == 13\nassert solution.findMinArrowShots([[665, 682], [-988, -590], [-831, 130], [409, 980], [-115, 335], [380, 898], [129, 734], [444, 998], [-92, -19], [-851, 311], [-178, 685], [898, 989], [-498, 647], [273, 539], [-683, 696], [-304, 650], [514, 830], [-63, 303], [597, 666], [-448, -130], [961, 990], [546, 614], [215, 286], [720, 731], [-707, 56], [62, 810], [-783, -33], [784, 930], [480, 880], [139, 299], [-361, 880], [-15, 334], [990, 990], [490, 597], [676, 788], [-624, -181], [277, 424], [609, 642], [-857, 6], [-643, 872], [-483, 6], [718, 952], [957, 996], [-500, 873], [599, 766], [863, 986], [-114, 574], [-181, 765], [-313, 700], [447, 458], [912, 929], [-667, 662], [539, 671], [685, 935], [978, 986], [-853, 85], [80, 683], [317, 527], [805, 854], [-484, 106], [-394, -223], [803, 998], [857, 944], [-480, 353], [-62, 36], [150, 317], [-93, 612], [782, 998], [-336, 598], [310, 976], [508, 908], [510, 775], [-420, 821], [32, 739], [701, 809], [-470, 492]]) == 13\nassert solution.findMinArrowShots([[-446, 352], [-41, 86], [810, 909], [648, 697], [8, 632], [-654, -176], [802, 876], [-936, -415], [-945, 32], [423, 831], [-363, -325], [977, 985], [734, 867], [-623, 994], [487, 714], [999, 1000], [898, 907], [822, 956], [-150, 940], [526, 927], [497, 634], [-208, 855], [-16, 320], [88, 395], [306, 996], [-116, -94], [503, 616], [710, 926], [-916, 127], [-751, 313], [-594, 333], [503, 966], [562, 967], [-379, 669], [-236, 323], [211, 713], [366, 472], [630, 915], [808, 815], [61, 754], [-155, 243], [730, 883], [-803, 771], [549, 591], [-483, 40], [-518, 800], [716, 770], [-808, 383], [-56, 66], [605, 890], [-116, 986], [16, 850], [504, 585], [965, 980], [-805, 419]]) == 12\nassert solution.findMinArrowShots([[-439, 678], [-228, 362], [-78, 443], [-654, 865], [587, 792], [147, 573], [670, 874], [-807, 52], [79, 349], [865, 905], [-525, -72], [-16, 806], [-282, 529], [-555, -214], [-925, 619], [-572, 813], [-973, 228], [952, 962], [279, 510], [898, 952], [235, 969], [-514, -490], [149, 881], [79, 213], [-498, 148], [-698, -563], [-801, -286], [-922, -532], [674, 888], [21, 398], [506, 659], [-993, -858], [765, 805], [546, 761], [665, 873], [46, 622], [-256, -106], [-454, 822], [-251, 474], [-206, 414], [559, 821], [811, 994]]) == 10\nassert solution.findMinArrowShots([[-398, 805], [546, 859], [718, 826], [-137, 802], [-602, -494], [-706, -516], [387, 678], [-516, 208], [531, 937], [-66, -4], [781, 995], [-270, 493], [421, 909], [657, 842], [-248, 852], [248, 867], [-628, 43], [530, 863], [-618, -207], [159, 725], [609, 761], [-318, 200], [67, 593], [492, 534], [-43, 164], [607, 741], [-100, 873], [-382, 339], [653, 935], [-924, 223], [-798, 423], [582, 955], [923, 974], [173, 524], [-731, 230], [-473, 990], [283, 479]]) == 6\nassert solution.findMinArrowShots([[-984, -252], [150, 691], [727, 935], [577, 599], [19, 184], [363, 772], [-758, 816], [-782, -351], [386, 777], [-998, 88], [-919, 771], [-761, -673], [200, 513], [52, 581], [-281, -69], [-281, 305], [614, 641], [466, 849], [-161, 545], [251, 735], [885, 891], [265, 584], [-608, 434], [83, 88], [-303, 288], [262, 601], [374, 588], [939, 941], [529, 846], [133, 272], [-163, 339], [464, 937], [-491, 2], [-828, -200], [785, 818], [49, 970], [814, 885], [-732, 814], [501, 597], [-190, 914], [-854, 53], [-534, 383], [251, 366], [-617, 750], [278, 562], [658, 921], [387, 572], [285, 821]]) == 10\nassert solution.findMinArrowShots([[-93, 627], [-321, 682], [-370, 986], [639, 859], [983, 989], [-656, 248], [-604, 408], [-417, 351], [-675, 827], [117, 822], [636, 821], [215, 695], [605, 923], [838, 948], [684, 902], [821, 898], [-853, 646], [190, 492], [-789, 794], [222, 691], [-491, -486], [296, 589], [719, 721], [420, 470], [689, 739], [-341, 82], [-627, 201], [44, 123], [-225, 660], [472, 817], [110, 626], [848, 875], [-736, 740], [-566, -370], [424, 989], [-551, 812], [-962, 859], [685, 864], [511, 799], [977, 982], [554, 893], [-626, 233], [221, 576], [-63, 796], [-224, 292], [202, 250], [773, 949], [661, 973], [-347, -312], [-571, -261], [-373, 109], [430, 603], [147, 816], [182, 679], [450, 580], [189, 474], [-646, -493], [570, 731], [-819, -595], [893, 934], [-713, -315], [456, 925], [197, 735], [652, 831], [978, 980], [905, 981], [-831, 499], [19, 330], [176, 947], [345, 998], [-311, 928], [-452, 384], [717, 853], [694, 894], [999, 999], [-352, 596], [753, 755], [246, 248], [346, 979], [835, 979], [-329, 522], [559, 726], [-337, -165], [-700, 847], [543, 822], [119, 265], [-682, -623], [-164, 44], [712, 834], [897, 902], [-222, 33], [76, 109], [508, 988], [405, 865], [-440, 308], [-437, 353], [-968, -711], [-311, 194], [22, 269]]) == 15\nassert solution.findMinArrowShots([[132, 648], [-343, 528], [-998, -887], [-548, 938], [-235, -102], [-844, 330], [-610, 221], [-750, -535], [348, 798], [838, 847], [801, 902], [-616, 358], [-762, 580], [831, 928], [104, 137], [259, 801], [-689, 522], [-578, -285], [-394, 889], [949, 978], [-276, 717], [409, 890], [-328, 172], [-440, 403], [726, 926], [201, 466], [535, 933], [997, 999], [250, 502], [530, 753], [-283, -15], [377, 991], [474, 853], [-376, 579], [-816, 564], [-1000, -994], [548, 727], [-958, -622], [305, 951], [-451, 777], [-985, -225], [552, 830], [-957, -179], [-228, 623], [255, 973], [881, 970], [-246, 404], [-952, -690], [-395, -208], [-94, 94], [-959, 810], [337, 851], [727, 817], [927, 963], [-938, 108], [361, 796], [5, 6], [-123, 506], [559, 785], [154, 406], [-739, -448], [-534, 813], [-889, 844], [-937, -602], [-104, 582], [-677, 769], [-924, 351], [808, 861], [294, 581], [486, 797], [857, 916], [-337, 444], [-343, 583], [287, 580], [337, 512], [581, 644], [-245, -117], [-122, 896]]) == 13\nassert solution.findMinArrowShots([[352, 477], [-786, -106], [-306, -12], [951, 989], [-914, -266], [251, 818], [152, 826], [-882, 956], [-556, 807], [835, 998], [-953, 846], [731, 911], [-539, -272], [435, 587], [739, 806], [926, 929], [171, 560], [-944, -511], [708, 756], [-190, -116], [499, 883], [106, 932], [599, 816], [406, 584], [-595, 957], [-886, 686], [-703, 798], [632, 940], [-819, 915], [-434, -44], [439, 770], [414, 665], [464, 543], [-399, 382], [-339, 534], [-528, 832], [670, 933], [-577, -18], [-955, -21], [509, 927], [-937, 368], [-479, -458], [-264, -262], [-772, -502], [-420, -331], [936, 957], [629, 996], [-947, -612], [-768, 165], [-154, 576], [-949, -345], [-112, 14], [617, 722], [683, 985], [-516, -464], [-762, -537], [442, 912], [411, 491], [679, 761], [-599, 243], [329, 507], [644, 986], [-112, 863], [-181, 363], [-649, -283], [-42, 322], [-226, 253], [615, 767], [-695, 358], [-744, -156], [713, 904], [525, 778], [626, 810], [143, 232], [949, 957], [18, 394], [-587, 885], [-246, -157], [-431, 491], [704, 931], [914, 998], [681, 791], [21, 324], [537, 974], [-136, 150], [-213, -15], [-377, 8], [750, 957], [-907, -577], [280, 506], [-152, -150], [-319, 351], [418, 860], [333, 522], [554, 970], [-70, 252], [-555, 651], [-476, -58]]) == 13\nassert solution.findMinArrowShots([[671, 742], [329, 682], [92, 810], [533, 910], [-529, 769], [-880, 479], [682, 787], [302, 1000], [-849, 585], [-31, 973], [-948, -558], [-682, -195], [-846, 232], [612, 677], [-901, -206], [-958, 247], [-291, 102], [270, 429], [-99, 24], [426, 515], [689, 935], [-937, 980], [505, 883], [-50, 938], [-53, 116], [-784, 344], [-625, 936], [854, 987], [18, 931], [23, 517], [-924, 633], [729, 935], [441, 970], [277, 869], [-938, 796], [115, 654], [-977, 557], [755, 822], [-913, 942], [-341, 401], [54, 220], [-937, 98], [-374, 375], [-92, 182], [809, 946], [-758, 153], [-251, 791], [-979, 231], [-98, 782], [-278, -43], [-483, 962], [479, 839], [-941, 324], [270, 629], [-245, 195], [243, 562], [-676, -484]]) == 7\nassert solution.findMinArrowShots([[-378, 869], [28, 994], [-393, 253], [-777, -473], [772, 925], [985, 987], [-383, -109], [987, 990], [848, 956], [-556, 573], [840, 923], [610, 657], [-417, 163], [-209, 647], [-819, 459], [-650, -554], [617, 787], [846, 983], [-233, 532], [169, 572], [-646, 715], [-792, -716], [-393, -19], [34, 448], [414, 835], [91, 91], [808, 815], [-710, -512]]) == 9\nassert solution.findMinArrowShots([[304, 432], [-749, -531], [-654, 62], [-242, 361], [769, 994], [99, 524], [-347, 775], [626, 847], [-310, 750], [206, 899], [301, 495], [-295, -213], [-705, 642], [-396, -182], [-74, 205], [663, 670], [820, 976], [-70, 401], [-809, 833], [-69, 71], [-279, -205], [-764, -555], [171, 317], [37, 850], [-487, -66], [-119, 606], [966, 994], [-224, 425], [845, 964], [-48, 784], [432, 522], [225, 702], [-342, 37], [81, 833], [760, 772], [-490, 479], [-966, 37], [263, 270], [-215, 81], [18, 493], [-950, 670], [816, 982], [-403, 130], [-940, 850], [695, 774], [-401, 122], [929, 954], [717, 995], [-979, -498], [-750, 962], [459, 549], [-154, 683], [-797, -750], [849, 924], [454, 773], [276, 619], [-972, 840], [517, 813], [-25, 350], [-911, -455], [117, 711], [-456, 445], [347, 571], [-106, 767], [702, 929], [-91, 992], [-235, 231], [468, 713], [811, 968], [511, 914], [346, 688], [-296, 486], [-328, -235], [152, 763], [-45, 311], [-324, -39], [-681, 46], [342, 556], [-279, 817], [-733, 180], [-223, -90], [364, 851], [-383, 270], [26, 683], [-340, 40], [246, 584], [-644, -302]]) == 13\nassert solution.findMinArrowShots([[-742, -554], [-844, 941], [-272, -16], [844, 974], [-20, 72], [-887, -776], [859, 938], [-873, 318], [249, 504], [-573, 867], [863, 962], [637, 870], [987, 996], [-192, 140], [-730, -692], [-979, 874], [-547, 832], [-75, 30], [487, 607], [306, 743], [-498, -46], [-203, 885], [-814, 272], [801, 831], [-274, 358], [317, 500], [411, 955], [410, 612], [258, 400], [930, 993], [326, 660], [233, 944], [548, 641], [343, 839], [570, 666], [118, 561], [704, 967], [235, 296], [814, 842], [229, 803], [133, 430], [267, 388], [342, 717], [-381, -231], [-335, 781], [-773, 521], [749, 772], [-769, -221], [-308, 159], [-491, 511], [-83, 842], [627, 809], [-403, 224], [374, 716], [108, 910], [824, 827], [-684, -624], [231, 505], [122, 750], [-96, 613], [257, 354], [-500, 843], [-899, -378], [-351, 680], [727, 880], [-935, -888], [60, 379], [-991, -774], [-400, 556], [385, 801], [15, 843], [-590, 729], [-737, -113], [-650, 641], [263, 487], [-194, 21], [-272, 215], [-497, 305], [-219, 821], [-23, 951], [-340, -164], [-759, -607], [-803, -183], [417, 559], [465, 835], [527, 563], [-519, -212], [384, 877], [-184, 92], [-529, 67], [929, 934], [265, 948], [128, 209], [473, 944]]) == 15\nassert solution.findMinArrowShots([[362, 768], [-240, 782], [-33, 989], [434, 651], [-645, -251], [-288, 92], [-424, -114], [643, 766], [56, 732], [-9, 778], [672, 999], [588, 675], [-326, 432], [74, 500], [-836, -614], [-241, 15], [-143, 122], [449, 572], [-999, 651], [-607, -445], [897, 933], [-968, -696], [677, 693], [-925, 586], [94, 951], [680, 802], [-464, -108], [-447, -362], [-360, 497], [977, 998], [577, 670], [759, 766], [364, 891], [437, 868], [-11, 593], [778, 849], [761, 817], [195, 402], [-662, -396], [-370, 259], [-237, 936], [998, 998], [498, 822], [-928, 846], [-268, 661], [-64, 929], [-887, -783], [800, 936], [784, 834], [100, 564], [-341, 334], [-60, 231], [-72, 614], [-223, 362], [-137, 717], [-295, 676], [330, 923], [-69, 698], [549, 619], [-701, 940], [-233, 70], [122, 923], [-671, 329], [317, 473], [661, 968], [-402, 96], [-948, -318], [-61, 294], [-728, 282], [42, 322], [-736, 699], [919, 989], [-967, 708], [372, 644], [361, 920], [9, 915], [-698, 611], [-563, -311], [529, 646]]) == 11\nassert solution.findMinArrowShots([[-512, 987], [-57, 764], [-987, -395], [792, 897], [-341, 474], [-60, 937], [685, 958], [795, 887], [429, 823], [709, 815], [255, 822], [968, 968], [41, 787], [-989, 988], [-291, 876], [-127, 444], [194, 941], [-653, 23], [-199, 843], [-91, 395], [-987, -709], [46, 829], [-632, 303], [43, 327], [-427, 886], [332, 912], [-603, 385], [11, 295], [210, 705], [801, 915], [355, 402], [137, 512], [-584, -181], [-468, -440], [-350, -88], [-516, 189], [564, 722], [-97, 763], [-745, 362], [902, 906], [585, 996], [-5, 351], [80, 814], [-401, -212], [-763, 235], [349, 774], [113, 192], [365, 764], [328, 401], [-988, 434], [621, 901], [-278, 816], [673, 785], [-627, 568], [-276, 53], [-125, 606], [970, 998], [263, 414], [-586, 277], [-106, 49], [69, 146], [-497, 364], [246, 563], [637, 933], [-368, 3], [-927, 487], [370, 923], [72, 103], [205, 585], [900, 980], [-999, -767], [280, 430], [-150, -149], [-228, 68], [104, 259], [874, 968], [-849, -225], [-49, 870], [-262, 972], [-814, -495], [-323, -36], [720, 791], [-497, -252], [-549, -338], [717, 968], [658, 975], [191, 985], [-475, 223], [597, 720], [-940, 134], [423, 517], [-186, 918], [871, 927], [-765, 721]]) == 14\nassert solution.findMinArrowShots([[28, 65], [212, 840], [-527, 125], [-955, 153], [-849, 781], [742, 874], [679, 731], [-808, 340], [489, 876], [984, 992], [-941, -286], [795, 835], [974, 985], [-662, -466], [836, 878], [-500, -372], [-823, 384], [-983, 85], [81, 147], [497, 734], [-151, 986], [-934, 643], [-23, 778], [-766, 5], [232, 653], [899, 987], [-659, -540], [-408, 757], [306, 919], [-720, -481], [386, 727], [500, 709], [830, 930], [49, 680], [-482, -415], [-650, 440], [826, 868], [-98, 344], [-397, 988], [357, 647], [554, 941], [972, 978], [-666, -197], [-495, 983], [-62, 45], [41, 377], [70, 936], [-505, 657], [603, 731], [316, 874], [-831, 65], [-261, 961], [-9, 899], [-333, 608], [843, 860], [-360, -185], [-96, 656], [-878, -479], [773, 809], [155, 433], [-148, 110], [581, 711], [873, 962]]) == 12\nassert solution.findMinArrowShots([[299, 977], [-564, -535], [-349, 177], [986, 998], [-875, 726], [-512, 613], [482, 588], [-556, 674], [-368, 4], [201, 405]]) == 5\nassert solution.findMinArrowShots([[454, 552], [-605, 640], [-718, -150], [-301, 15], [93, 781], [-679, 862], [132, 256], [-113, 874], [146, 217], [171, 441], [-621, 114], [532, 567], [-916, -243], [537, 871], [-380, -215], [248, 331], [515, 676], [-607, 52], [250, 397], [58, 160], [-1000, 818], [725, 773]]) == 5\nassert solution.findMinArrowShots([[-30, 756], [-201, 459], [-813, -680], [-21, 16], [51, 966], [-26, 173], [-37, 129], [-518, 675], [-968, 166], [-142, -104], [-571, -488], [-349, -81], [403, 607], [-653, -97], [-631, -379], [164, 909], [-109, 204], [-372, 829], [974, 975], [677, 785], [784, 945], [-595, -5], [890, 950], [630, 637], [-22, 435], [856, 881], [2, 178], [-344, -291], [-29, 19], [475, 688], [211, 588], [561, 738], [-590, -374], [-678, 270], [-140, 415], [732, 919], [-418, 149], [-710, 885], [-56, 115], [-156, 891], [-328, 62]]) == 11\nassert solution.findMinArrowShots([[741, 799], [-219, -148], [206, 594], [-366, 247], [926, 977], [-655, 19], [-387, -84], [510, 525], [415, 697], [502, 627], [866, 911], [-161, -9], [-826, 932], [452, 939], [658, 897], [-483, 135], [862, 943], [147, 962], [397, 864], [176, 209], [-569, 988], [-482, -462], [980, 996], [-210, 272], [679, 872], [-701, 590], [-983, -340], [335, 531], [877, 932], [453, 641], [297, 949], [-537, 569], [191, 762], [69, 231], [669, 963], [-352, -7], [-766, 429], [-515, 698], [-351, 392], [832, 880], [444, 816], [330, 945], [546, 824], [874, 961], [857, 871], [739, 746], [748, 937], [201, 473], [-837, 451], [-761, 921], [507, 945], [713, 859], [684, 791], [-396, 439], [189, 384], [-427, 772], [-26, 186], [752, 848], [729, 865], [167, 286], [745, 818], [-671, 974], [-48, 911], [724, 818], [581, 813], [-679, -132], [-204, 45], [-507, 286], [-957, -957]]) == 11\nassert solution.findMinArrowShots([[-827, -441], [426, 495], [-239, 288], [-703, -697], [-567, 983], [-446, 981], [-856, -615], [200, 391], [-937, -701], [-36, 404], [18, 189], [627, 750], [-416, 602], [515, 972], [744, 993], [-325, 759], [-109, 100], [80, 839], [-518, 484], [-768, -58], [-864, 820], [-29, 540], [-82, 387], [629, 994], [-462, -239], [875, 982], [253, 690], [-992, 317], [521, 799], [-117, 869], [234, 334], [894, 905], [-540, -409], [-225, 702], [-688, 529], [372, 933], [190, 280], [-415, 437], [636, 981], [493, 603], [-185, 42], [131, 203], [705, 869], [-276, 187], [942, 961], [382, 555], [629, 998], [-152, 866], [-896, -837], [345, 561], [656, 807], [-807, -239], [-55, 930], [852, 996], [-135, 426], [-730, 129], [943, 975], [-851, -51], [515, 877]]) == 10\nassert solution.findMinArrowShots([[714, 984], [125, 842], [666, 908], [-839, 869], [537, 814], [-523, 158], [-347, -94], [281, 801], [-301, 104], [881, 973], [-861, -195], [795, 894], [-355, 249], [865, 996], [-686, 265], [-717, 487], [943, 967], [616, 794], [585, 900], [-136, 135], [518, 817], [169, 190], [48, 1000], [636, 836], [70, 670], [-709, -417], [-20, 319], [-878, -877], [944, 973], [383, 749], [-867, -162], [-381, 109], [-447, 443], [-349, -119], [111, 694], [723, 757], [616, 691], [-541, 675]]) == 8\nassert solution.findMinArrowShots([[-870, 754], [646, 927], [828, 927], [208, 465], [482, 779], [-807, 37], [-664, -259], [-771, 966], [-596, -517], [-37, 887], [66, 502], [633, 835], [-211, 433], [701, 821], [-464, -455], [-479, -354], [-40, 862], [451, 944], [-249, 941], [-76, 9], [-742, -415], [-211, 480], [-16, 85], [972, 993], [-581, 671], [-478, 280], [58, 176], [-667, -285], [-634, -491], [437, 553], [-121, 923], [-407, 488]]) == 8\nassert solution.findMinArrowShots([[-640, 840], [-467, -329], [-913, -532], [968, 973], [-596, -295], [-655, -338], [795, 978], [705, 889], [-946, -493], [-724, -607], [-3, 348], [-501, -79], [496, 752], [-290, -186], [125, 322], [-657, -654], [407, 457], [-743, -427], [417, 813], [-167, 981], [439, 845], [618, 821], [612, 917], [-963, 579], [-236, 830], [-684, 982], [-719, 791], [-2, 778], [611, 903], [332, 691], [-958, -33], [-516, 569], [-507, 35], [-459, -275], [-179, -16], [661, 967], [-427, 230], [-930, -790], [-507, 380], [284, 355], [517, 612], [-623, 150]]) == 10\nassert solution.findMinArrowShots([[-684, 704], [-436, 652], [-93, -21], [-386, 42], [-75, 957], [742, 955], [-585, 731], [271, 342], [979, 987], [-649, -388], [889, 925], [-994, -484], [828, 946], [-813, 974], [802, 815], [648, 746], [-573, -172], [-947, 243], [699, 960], [-668, -53], [-627, 962], [-233, 420], [-91, 445], [-749, -166], [4, 526], [-559, -513], [-154, 517], [-841, -672], [-202, 275], [466, 793], [587, 925], [-918, 368], [-503, 459], [215, 538], [194, 543], [640, 866], [-20, 441], [347, 359], [-24, 149], [-555, 507], [-986, 983]]) == 9\nassert solution.findMinArrowShots([[75, 184], [434, 808], [910, 924], [-688, 266], [-131, 928], [-444, 218], [985, 1000], [301, 363], [-228, 22], [813, 841], [-290, 944], [624, 651], [630, 851], [231, 485], [258, 379], [228, 591], [-853, 729], [-13, 833], [179, 905], [-147, 989], [782, 891], [-67, 753], [-9, 544], [865, 908], [427, 830], [-741, 28], [298, 392], [-957, -860], [-942, -766], [674, 954], [969, 1000], [770, 934], [-898, -197], [-834, -611], [926, 985], [570, 716], [789, 830], [235, 507], [-578, -180], [817, 819], [257, 275], [-93, -6], [-683, 619], [-956, 632], [-436, 8], [-480, 895], [-472, -171], [-892, 884], [145, 328], [4, 602], [612, 970], [-100, 40], [-308, 907], [-159, 63], [154, 615]]) == 12\nassert solution.findMinArrowShots([[790, 862], [963, 998], [-277, 114], [-882, 591], [65, 553], [-315, 832], [79, 828], [205, 241], [-473, 310], [909, 946], [527, 861], [201, 552], [865, 973], [-708, 809], [877, 935], [140, 1000], [906, 924], [-50, 495], [148, 814], [-482, -268], [-753, 530], [-695, 146], [140, 984], [-156, 424], [450, 841], [-589, 968], [-16, 742], [-708, 514]]) == 5\nassert solution.findMinArrowShots([[961, 961], [-699, -90], [4, 190], [178, 978], [51, 982], [80, 227], [508, 854], [99, 835], [-395, 501], [-697, 227], [-689, 871], [66, 111], [-264, -138], [766, 984], [752, 876], [-811, 96], [-569, 512], [825, 867], [900, 946], [-380, 114], [730, 844], [-461, 101], [193, 213], [740, 781], [-598, 836], [620, 860], [-33, 600], [-426, 597], [-440, 378], [981, 995], [894, 973], [841, 872], [414, 429], [-458, 241], [51, 727], [-316, -107], [648, 901], [558, 604], [841, 946], [-156, 420], [741, 921]]) == 10\nassert solution.findMinArrowShots([[201, 354], [-321, 308], [586, 760], [552, 894], [111, 847], [-348, 576], [-612, -44], [-509, 927], [746, 948], [710, 840], [-701, -621], [894, 962], [689, 966], [-229, 120], [894, 915], [-410, 28], [-522, 412], [-593, 737], [601, 936], [-121, 443], [346, 905], [669, 756], [837, 890], [631, 691], [265, 335], [-901, 818], [-211, -85], [959, 997], [-809, 869], [275, 891], [-829, 60], [959, 990], [606, 763], [-209, 721], [-180, 755], [896, 922], [-537, -141], [-231, 519], [539, 773], [770, 833], [-496, -169], [-459, 845]]) == 8\nassert solution.findMinArrowShots([[980, 980], [-152, 9], [-464, 547], [453, 845], [146, 737], [410, 572], [799, 901], [-963, 295], [911, 959], [921, 941], [-17, 918], [-24, 395], [-67, 966], [270, 585], [256, 535], [960, 972], [-706, 721], [744, 949], [-950, 899], [989, 996], [659, 983], [34, 526]]) == 7\nassert solution.findMinArrowShots([[537, 694], [-551, -506], [710, 976], [-347, 994], [-899, -564], [402, 946], [-922, -539], [-192, 791], [-201, 494], [-189, 778], [-354, -351], [334, 704], [242, 767], [505, 708], [244, 254], [50, 391], [-101, 662], [757, 918], [191, 290], [72, 212], [296, 328], [861, 876], [510, 999]]) == 8\nassert solution.findMinArrowShots([[279, 463], [758, 983], [-162, 302], [-597, -50], [689, 722], [-344, 580], [500, 722], [582, 700], [-386, 375], [-537, 637], [250, 802], [767, 938], [-374, 777], [107, 939], [922, 991], [294, 718], [415, 484], [-746, -137], [-447, -231], [286, 324], [-898, 848], [-422, 684], [970, 978], [271, 739], [762, 910], [-555, 601], [-757, 750], [-1000, 837], [-837, 692], [227, 486], [24, 511], [571, 951], [-28, 602], [-999, -11], [-433, 872], [-977, -931], [-228, 513], [-629, 938], [297, 642], [-772, 275], [487, 869], [524, 748], [217, 692], [441, 481], [628, 699], [594, 964], [-374, 268], [356, 973], [877, 930], [676, 858], [-130, 540], [-461, -280], [289, 687], [-437, 790], [5, 164], [277, 476], [-993, -224], [170, 300], [943, 994], [512, 947], [-611, 676], [-235, 250], [258, 285], [-761, -590], [-436, 406], [375, 921], [-686, -392], [79, 161], [211, 256], [536, 947], [-825, 552], [-447, 64], [270, 678], [-855, 280], [-576, 371], [74, 549], [776, 962], [716, 928], [-665, 451], [47, 746], [577, 875], [512, 915], [916, 963], [155, 880], [-546, -368], [-947, -36], [361, 393], [849, 859], [-11, -11], [-925, 478], [-19, 242], [65, 292]]) == 14\nassert solution.findMinArrowShots([[-327, 664], [896, 949], [196, 774], [778, 934], [603, 753], [-237, 655], [-902, 911], [387, 394], [-271, 783], [845, 901], [26, 632], [-733, -730], [-958, -242], [246, 953], [748, 785], [-123, 395], [-260, 508], [997, 997], [-727, -146], [-934, -254], [620, 840], [159, 940], [108, 744], [-488, -151], [-25, 744], [-555, 169], [-878, 308], [-151, 888], [-31, 548], [-630, -451], [-124, 385], [857, 995], [-403, 946], [-948, 816], [397, 520], [926, 963], [254, 896], [703, 942], [381, 984], [-635, 138], [-432, -320], [56, 392], [-58, 270], [579, 641], [-279, -175], [-188, 537], [170, 389], [668, 869], [-543, 79], [-18, 689], [-187, 977], [385, 707], [909, 919], [758, 828], [-259, 835], [484, 701]]) == 13\nassert solution.findMinArrowShots([[-589, -182], [-315, 549], [-319, 372], [-607, 621], [-833, 431], [-664, -149]]) == 1\nassert solution.findMinArrowShots([[603, 992], [-532, 274], [681, 839], [-505, 778], [-111, 823], [-826, 220], [710, 732], [-102, 743], [99, 904]]) == 2\nassert solution.findMinArrowShots([[-18, 928], [739, 746], [929, 983], [304, 793], [-293, 904], [574, 920], [304, 352], [-399, 230], [900, 907], [-607, 449], [-64, -52], [13, 535], [-253, -14], [-409, 913], [909, 923]]) == 6\nassert solution.findMinArrowShots([[-387, 938], [-301, 286], [383, 882], [309, 988], [-868, 573], [-403, 157], [855, 901], [-137, -28], [-663, 519], [-274, 752], [-446, 855], [-40, 402], [428, 637], [604, 666], [931, 997], [57, 149], [655, 999], [-637, 69], [-752, 283], [-953, 814], [-354, -345], [297, 824], [-47, 215], [750, 907], [309, 733], [-374, 999], [-120, 0], [251, 490], [994, 997], [235, 657], [-386, 989], [-189, -48], [-439, 547], [-751, 581]]) == 7\nassert solution.findMinArrowShots([[81, 692], [748, 924], [-386, 314], [-549, 672], [197, 799], [-393, -215], [104, 693]]) == 3\nassert solution.findMinArrowShots([[-876, 165], [926, 1000], [242, 848], [-691, -40], [-373, 960], [-646, 341], [-241, 825], [-99, 368], [775, 893], [-251, 1000], [893, 925], [-459, 63], [-174, 670], [-535, -489], [429, 474], [-383, 256], [-981, 29], [503, 955], [217, 827], [-760, 206], [-326, 288], [734, 840], [-518, 354], [441, 620], [279, 825], [664, 777], [-784, 368], [566, 709]]) == 7\nassert solution.findMinArrowShots([[-136, 8], [-754, -96], [634, 920], [-246, 183], [131, 432], [627, 938], [850, 862], [973, 997], [1, 912], [-841, 655], [431, 950], [651, 690], [-493, 270], [324, 704], [264, 337], [-864, 8], [-78, 792], [-154, 121], [-911, -801], [420, 925], [333, 502], [108, 205], [970, 981], [-464, -85], [706, 752], [107, 598], [-935, 269], [890, 910], [-704, 302], [-30, 155], [-235, -220], [-403, -226], [-186, 583], [898, 980], [384, 866], [-147, 214], [-658, 762], [568, 681], [702, 957], [970, 986], [-573, 17], [-769, 913], [-271, 323], [848, 879], [506, 591], [239, 835], [-337, 640], [614, 876], [-688, -230], [-772, -264], [328, 950], [701, 775], [640, 926], [-192, 455], [-402, 225], [587, 620], [517, 762], [-688, 93], [514, 632], [437, 514], [956, 970], [442, 621], [-668, 765], [420, 527], [-408, 957]]) == 14\nassert solution.findMinArrowShots([[-476, 220], [-529, -5], [695, 732], [494, 974], [395, 960], [715, 913], [-92, 345], [150, 469], [379, 563], [-521, 55], [774, 973], [974, 984], [88, 628], [64, 489], [246, 780], [-721, -319], [254, 392], [696, 974], [168, 808], [-76, 214], [-957, 235], [235, 965], [106, 541], [469, 815], [864, 969], [-436, -72], [107, 449], [15, 498], [-803, 555], [-889, 878], [390, 655], [552, 678], [514, 577], [-608, 484], [823, 989], [-28, 886], [-755, 245], [774, 875], [170, 899], [-312, -120], [-563, -131], [92, 995], [603, 684], [130, 966], [-286, 535], [-923, -918], [446, 541], [-665, 949], [-792, -214], [-416, 429], [329, 462], [707, 830], [365, 711], [623, 993], [-909, -122], [170, 402], [-576, -330], [708, 963], [140, 183], [-973, -408], [-944, 99], [-849, 481], [417, 662], [770, 895], [-808, 122], [185, 421], [533, 797], [-48, 900], [3, 66], [-967, -560], [-272, 194], [535, 735], [448, 510], [-19, 501], [-973, 701], [357, 420], [-416, 262], [-232, 100], [-966, 670], [884, 893], [-551, 318], [-353, 752], [-923, 122], [768, 842]]) == 13\nassert solution.findMinArrowShots([[903, 903], [-685, 262], [-532, -425], [-320, 166], [791, 973], [886, 975], [-985, 676], [-203, 214], [-265, 966], [486, 981], [198, 732], [-222, 218], [390, 415], [528, 551], [855, 875], [-375, 308], [901, 977], [-313, 468], [948, 972], [864, 996], [-780, -726], [-299, 836], [-215, 722], [-146, 975], [-76, 9], [656, 941], [-518, -258], [-186, 140], [-750, 752], [832, 985], [308, 447], [-241, 258], [858, 986], [-296, -167], [911, 942], [-371, 976], [-96, 604], [-866, 314], [-913, 716], [383, 657], [377, 925], [-335, 326], [131, 996], [779, 979], [537, 752], [-296, 421], [-325, 890], [86, 718], [882, 944], [984, 996], [-434, -189], [124, 966], [367, 917], [-297, -129], [811, 826], [736, 781], [101, 602], [-569, 213], [-331, 600], [-433, -356], [-940, -892], [-510, 83], [-676, 304], [776, 956], [973, 976], [495, 527], [214, 686], [-571, -304], [389, 478], [725, 766], [446, 969], [633, 737], [741, 964], [-204, 566], [259, 488], [486, 614], [616, 865], [-692, 440], [-591, 56]]) == 16\nassert solution.findMinArrowShots([[85, 524], [-348, 518], [386, 706], [141, 998], [-62, 736], [-168, 394], [926, 945], [-967, 545], [409, 686], [-53, 791], [-568, -125], [-382, 733], [217, 477], [-819, 676], [-874, -361], [-205, -91], [-404, 179], [-451, -358], [-252, -232], [-246, 50], [893, 926], [968, 990], [754, 916], [-109, 549], [619, 758], [-974, 800], [153, 776], [590, 809], [-660, 493], [-808, 636], [-468, 561], [362, 468], [538, 539], [-276, 838], [110, 210], [518, 597], [946, 949], [-715, -119], [50, 933], [-671, 728], [-392, 436], [574, 969], [639, 831], [139, 347], [-763, 836], [824, 978], [-984, 610], [419, 859], [-341, 500], [-767, -132], [386, 630], [-489, 457], [404, 902], [-381, -14], [467, 813], [916, 916], [945, 991], [416, 429], [-918, 827], [-510, 217], [598, 984], [-883, 446], [444, 997], [943, 992], [-988, -631], [136, 694], [-945, -43], [317, 482], [699, 946], [83, 621], [-376, -312], [-418, -3], [-297, -65], [-784, -180], [395, 691], [-307, 581], [247, 705], [392, 766], [565, 707], [-179, 964], [-829, -13], [-199, -168], [448, 932], [188, 746], [-871, -94], [-932, 148], [2, 438], [-720, 807], [54, 164], [-403, 777], [964, 974], [141, 577]]) == 12\nassert solution.findMinArrowShots([[612, 688], [-745, -623], [-224, 28], [822, 959], [-4, 160], [163, 675], [804, 960], [-696, 441], [700, 980], [558, 610], [682, 880], [9, 853], [293, 686], [-205, -120], [-358, 770], [-973, 855], [-613, 728], [-108, 11], [-258, 853], [38, 57], [-919, -748], [-314, 123], [958, 961], [314, 570], [-159, -11], [860, 892], [247, 599], [90, 244], [-655, 238], [601, 881], [915, 958], [12, 858], [-943, -100], [-333, 682], [-51, 89], [397, 886], [193, 371], [-288, 91], [867, 890], [365, 777], [-309, 572], [-162, 350], [-701, 834], [-516, 668], [-758, -675], [478, 813], [-861, 924], [-810, -768], [651, 904], [-135, 451], [43, 228], [-371, 339], [855, 858], [-356, 112], [351, 801], [836, 959], [-220, 732], [-926, -615], [-995, -657], [402, 573], [16, 446], [535, 843], [760, 964]]) == 11\nassert solution.findMinArrowShots([[512, 963], [-11, 72], [568, 959], [843, 848], [-633, -481], [-257, 569], [-865, -200], [281, 767], [-338, 537], [-343, 396], [629, 949], [832, 846], [881, 943], [-526, 516], [896, 978], [-824, 844], [262, 541], [626, 755], [-47, 534], [-37, 171], [522, 989], [-841, -820], [963, 990], [-505, 103], [704, 865], [366, 585], [-904, 382], [463, 897], [748, 948], [-855, -259], [703, 715], [-410, -281]]) == 9\nassert solution.findMinArrowShots([[-277, 666], [-408, 286], [133, 966], [329, 795], [346, 633], [-402, 986], [778, 795], [-696, 72], [-874, 606], [-606, 750], [-685, 999], [831, 929], [558, 788], [-228, 916], [-2, 753], [-762, -599], [-77, 230], [435, 851], [521, 795], [-395, 290], [997, 999], [596, 797], [357, 418], [-49, 411], [-310, 312], [-218, 630], [835, 854], [-163, 157], [-683, 747], [-342, 98], [-752, -632], [170, 919], [-553, 145], [-39, 397], [-949, -16], [-401, -74], [180, 955], [-384, 302], [792, 938], [791, 982], [-621, 374], [-807, -375], [-756, -374], [62, 145], [41, 167], [897, 970], [615, 855], [-13, 164]]) == 8\nassert solution.findMinArrowShots([[188, 828], [248, 984], [238, 949], [-360, 836], [-58, 851], [48, 907], [-711, -437], [970, 975], [238, 906], [754, 979], [-150, 348], [41, 692], [638, 764], [-899, -158]]) == 4\nassert solution.findMinArrowShots([[317, 517], [148, 148], [876, 901], [-75, 25], [230, 267], [279, 794], [-814, -454], [-13, -3], [-506, 734], [800, 936], [-473, 374], [65, 765], [911, 915], [750, 923], [-169, 50], [57, 589], [-488, -379], [586, 615], [-863, -709], [-57, 127], [-423, 349], [175, 762], [-71, 239], [-890, 536], [-392, -78], [-262, 769], [-53, 275], [969, 978], [-39, 286], [-35, 866], [963, 973], [673, 970], [-652, -489], [226, 603], [996, 998], [-867, -251], [-557, -261], [-269, 603], [508, 783], [496, 714], [-603, 495], [-71, 236], [-801, 499], [789, 814], [-132, 457], [416, 850], [896, 963], [457, 633], [-671, 822], [373, 698], [-530, -54]]) == 13\nassert solution.findMinArrowShots([[123, 286], [-539, -240], [458, 669], [-504, 253], [-761, 628], [714, 927], [882, 997], [-290, -276], [62, 424], [-138, -42], [165, 508], [-56, 594], [-710, 989], [-982, -302], [716, 756], [324, 436], [-591, 429], [677, 788]]) == 8\nassert solution.findMinArrowShots([[-705, -460], [834, 965], [324, 625], [534, 805], [117, 259], [550, 972], [-830, 736], [291, 491], [-180, 69], [358, 374], [-792, 501], [631, 836], [-873, 896], [-755, 680], [624, 672], [797, 914], [622, 624], [659, 976], [-541, 166], [-706, -493], [-191, 406], [507, 812], [-732, 48], [-801, -456], [-275, 673], [87, 403], [708, 747], [540, 838], [-58, 206], [-295, 180], [543, 619], [356, 783], [-381, -279], [965, 980], [673, 928], [-387, -261], [-364, 410], [341, 404], [206, 889], [-646, 255], [350, 821], [400, 606], [46, 813], [-612, 356], [-744, -82], [741, 899], [-260, 889], [378, 770], [-460, 348], [-652, 850], [-180, 836], [928, 1000], [-613, 122], [567, 973], [365, 942], [530, 895], [-619, 967], [68, 930], [292, 984], [657, 681], [189, 960], [614, 946], [-329, -79], [63, 193], [-420, 669], [-379, -287], [-523, -311], [-487, 120], [898, 998], [957, 989], [-743, 179], [594, 712], [-362, 216], [708, 844], [892, 924], [-731, -40], [51, 950], [-142, 23], [-201, 82], [-775, 216]]) == 11\nassert solution.findMinArrowShots([[158, 800], [442, 848], [982, 986], [600, 623], [-542, 537], [-998, -516], [-184, 423], [-775, -491], [-118, 937], [93, 957], [639, 708], [475, 731], [-258, -71], [753, 861], [261, 836], [314, 998], [573, 795], [-719, -602], [-918, -291], [534, 834], [248, 697], [-887, -861], [-198, -196], [-593, -339], [-847, -27], [124, 812], [-714, -524], [242, 757], [652, 940], [-309, 796], [-774, -563], [254, 665], [-152, 873], [203, 873], [-947, -635], [-467, 211], [938, 964], [-781, -727], [-745, -311], [-254, 677], [-220, 370], [884, 970], [703, 894], [-210, 480], [-516, 312], [-95, 281], [262, 473], [366, 498], [998, 1000], [-195, 987], [-582, -144], [-907, 994], [809, 963], [175, 204], [-588, -588], [-848, 943], [875, 944], [-656, 627], [698, 964], [-497, -329], [284, 791], [-727, -325], [308, 415], [-80, 343], [-536, -126], [-155, 753], [-24, 129], [-280, -142], [-207, 672], [-365, 281], [-872, -367], [703, 834]]) == 15\nassert solution.findMinArrowShots([[-946, -247], [-77, 818], [888, 907], [269, 367], [-976, -796], [404, 941], [-640, -6], [-257, 688], [453, 946], [-46, 811], [-560, 888], [424, 653], [885, 991], [-612, 385], [-636, -15], [103, 944], [185, 813], [398, 522], [40, 804], [-35, 808], [241, 690], [-678, -504], [960, 994], [297, 580], [197, 204], [511, 629], [-745, -392], [382, 920], [-115, 331], [76, 751], [-716, -315], [631, 983], [248, 731], [92, 906], [-547, -424], [762, 985], [949, 996], [399, 439], [278, 572], [424, 730], [740, 796], [-88, 274], [-673, 662], [-781, 442], [174, 254], [923, 940], [69, 481], [-976, -55], [-610, 815], [597, 774], [585, 965], [-627, 56], [-44, 694], [560, 776], [914, 921], [-252, -116], [314, 359], [956, 962], [210, 661], [-227, 473], [-903, -357], [-198, 587], [406, 550], [-698, -439], [-790, 411], [-102, 985], [-463, 870], [290, 654], [-250, 382], [-262, 813], [791, 860], [-731, 178], [-593, 981], [-328, 135], [450, 707], [671, 775], [393, 646], [-229, 702], [554, 572], [-941, -301], [-89, 115], [-794, 579], [-661, 187], [124, 873], [564, 616], [-760, -631], [594, 797], [-968, -140]]) == 15\nassert solution.findMinArrowShots([[227, 596], [188, 265], [656, 987], [-953, 699], [-272, 769], [167, 294], [-925, 835], [90, 876], [-145, 970], [464, 886], [-485, -225], [-343, 190], [935, 982], [270, 872], [-479, -242], [-659, 971], [-894, 349], [-90, -84]]) == 5\nassert solution.findMinArrowShots([[-455, 833], [-607, -600], [-974, -11], [310, 959], [-977, -956], [171, 288], [159, 328], [-271, 507], [596, 813], [180, 908], [-302, 254], [790, 996], [345, 686], [186, 237], [558, 657], [-356, 638], [605, 848], [173, 579], [779, 883], [-731, -487], [-852, 243], [35, 488], [-666, -30], [316, 508], [635, 793], [-304, 865], [-590, 367], [-67, 496], [925, 945], [-474, -89], [549, 713], [322, 440], [-490, 968], [-303, 369], [118, 864], [-758, 668], [759, 776], [-832, 935], [-534, 437], [-866, 587], [316, 587], [992, 992], [985, 985], [84, 748], [153, 284], [-236, 382], [364, 658], [-467, 112], [-597, 277], [-396, 122], [-652, -115], [-845, -494], [-927, -403], [-574, 951], [-746, 625], [650, 959], [79, 313], [-687, -298], [967, 981], [-637, -398], [-417, -18], [69, 678], [9, 819], [-5, 109], [-145, -72], [-593, -166], [775, 975], [-415, 513], [-740, -416], [-833, -687], [-684, -116], [45, 62], [913, 959], [-422, -180], [-206, 955], [313, 899], [542, 930], [578, 903], [24, 704], [382, 808], [116, 430], [982, 1000], [214, 542], [-575, -306], [232, 647], [-973, -35], [735, 992]]) == 15\nassert solution.findMinArrowShots([[-888, -625], [206, 687], [-26, 778], [300, 674], [218, 286], [507, 817], [-694, 531], [165, 613], [852, 892], [211, 638], [491, 778], [-83, 670], [-368, 837], [754, 820], [-551, 176], [427, 694], [-225, 113]]) == 6\nassert solution.findMinArrowShots([[292, 706], [-732, -299], [513, 899], [542, 577], [-540, -350], [993, 1000], [741, 944], [-36, 854], [253, 367], [456, 994], [-715, 606], [635, 777], [555, 890], [-90, 359], [-330, -301], [-521, -515], [34, 380], [-671, 758], [-952, -805], [261, 897], [-949, -841], [-455, 532], [151, 566], [530, 611], [-854, 462], [907, 973], [-606, 931], [-384, 923], [-74, 711], [950, 955], [22, 819], [-215, 369], [-83, 173], [712, 804], [-294, 55], [539, 848], [-599, -418], [-147, 718], [135, 383], [2, 142], [-73, 918], [126, 456], [887, 948], [239, 621], [-229, 857], [-706, 649], [806, 987], [104, 471], [-993, -308], [725, 798], [-336, -162], [-606, 731], [-345, -322], [-284, 679], [852, 881], [715, 718], [347, 508], [-60, 385], [-726, -192], [193, 250], [-984, 1000], [829, 847], [575, 885], [-752, 592], [-335, 398], [-648, -537], [-440, 859], [-460, -312], [-812, -176], [-524, -347], [583, 860], [-56, -20], [616, 643], [-230, 761], [102, 620], [-948, 984], [-99, 211], [733, 835], [-626, 523], [490, 865], [-148, 443], [710, 727], [177, 232], [653, 802], [487, 703], [-27, 973], [829, 975], [151, 829], [-662, 342], [22, 144], [-437, 883], [493, 709], [-915, 925]]) == 17\nassert solution.findMinArrowShots([[808, 938], [538, 775], [-380, -263], [-174, 884], [359, 741], [-255, 461], [60, 891], [-910, 855], [979, 984], [-282, 986], [951, 994], [480, 611], [610, 718], [-507, 216], [409, 673], [822, 982], [-562, 427], [358, 953], [809, 846], [-370, 688], [183, 572], [-741, 277], [63, 946], [-774, 753], [-519, 895], [-61, 103], [300, 617], [550, 639], [-832, -496], [964, 982], [686, 740], [-3, 609]]) == 7\nassert solution.findMinArrowShots([[322, 845], [-21, 593], [-289, -248], [-748, -611], [-922, -879], [-642, -42], [997, 999], [488, 969], [-306, 684], [-571, 107], [-447, 777], [-722, 572], [806, 964], [-577, 61], [11, 993], [120, 552], [825, 926], [-822, -517], [385, 682], [-163, 11], [-112, 363], [446, 755], [34, 968], [577, 792], [35, 991], [917, 996], [281, 642], [519, 969], [134, 930], [190, 796]]) == 8\nassert solution.findMinArrowShots([[-3, 560], [16, 667], [771, 978], [322, 739], [-635, -344], [-889, -88], [911, 941], [-642, 935], [519, 852], [524, 778], [621, 878], [-476, 906], [-628, 312], [899, 953], [758, 988], [280, 807], [300, 890], [819, 997], [-704, -633], [18, 552], [-102, 850], [387, 544], [-622, 963], [254, 565], [-346, -131], [-22, 977], [-575, -512], [-394, 169], [541, 997], [510, 693], [-297, 623], [-905, 773], [-763, -85], [427, 584], [-835, 502], [-201, 866], [-934, -576], [179, 936], [-352, 32], [28, 469], [-28, 679], [143, 288], [461, 985], [-916, -488], [20, 716], [-153, 22], [509, 969], [-146, -100], [635, 867], [-365, -55], [199, 722], [22, 415], [-592, 190], [-22, 95], [-522, -494], [-807, 804], [-226, 695], [743, 841], [-748, 281], [140, 740], [566, 925], [270, 583], [475, 501], [-471, 303], [342, 774], [-344, 352], [305, 360], [24, 281], [382, 411], [-724, -223], [-834, -121], [-618, -213], [189, 711], [-963, -660], [-203, -56], [859, 902], [-750, 172], [-661, 682], [932, 978], [496, 808], [-700, 79], [915, 965], [-843, 843], [909, 950], [-440, -398], [-502, -238], [-905, 476], [-756, 981], [-963, 239], [-546, 690], [325, 448], [515, 553], [-75, 859], [810, 906], [580, 927], [-206, 126], [-899, 396]]) == 13\nassert solution.findMinArrowShots([[-456, 692], [-885, -528], [800, 908], [706, 860], [857, 925], [-808, -59], [-872, -506], [696, 809], [915, 938], [-907, -194], [-273, 274], [-309, 832], [-392, 44], [-421, -264], [982, 983], [128, 904], [7, 254], [39, 675], [-868, -658], [572, 667], [471, 554], [169, 963], [354, 583], [205, 343], [990, 995], [-36, 660], [699, 706], [-34, 324], [552, 755], [-375, 80], [814, 927], [317, 796], [919, 960], [725, 747], [-723, 419], [-231, -177]]) == 12\nassert solution.findMinArrowShots([[288, 385], [315, 852], [166, 851], [-42, 882], [-228, 141], [-12, 642], [468, 731], [-972, 503], [171, 339], [98, 213], [-406, -152], [-157, 989], [-673, 646], [-533, 295], [130, 268], [-554, 117], [-382, 222], [-972, -317], [-915, -317], [170, 740], [-476, 794], [-877, 102], [-737, 195], [-323, 182], [327, 923], [-138, 702], [443, 631], [873, 995], [-571, -3], [-955, 411], [-835, 982], [427, 697], [665, 706], [57, 739], [632, 810], [-158, 727], [-662, -448], [858, 863], [-969, -585], [-353, -302], [-525, 905], [-425, 361], [-906, -527], [-572, 219], [-879, 689], [-566, -550], [845, 933], [177, 469], [241, 565], [-769, -570], [-422, 436], [-646, 688], [-939, 303], [-489, 936], [958, 961], [431, 555], [-832, 982], [-496, 382], [247, 641], [118, 873], [-465, 111], [383, 862], [-733, -230], [775, 823], [603, 735], [-284, 542], [875, 887], [896, 995], [-676, 981], [-293, 757], [283, 398], [836, 839], [463, 773], [-854, -346], [-616, -232], [178, 364], [248, 677], [534, 887], [169, 899], [835, 855], [-644, 915], [984, 995], [544, 619], [-997, 113], [-683, -121], [-730, -36], [989, 996], [896, 935], [912, 992], [-578, 782], [789, 850], [-170, 52], [-158, 342], [659, 675], [-561, 432], [930, 955], [363, 810], [-411, 503]]) == 15\nassert solution.findMinArrowShots([[-775, -238], [675, 730], [181, 441], [-276, 834], [-752, -316], [77, 600], [-697, 527], [-582, 779], [-189, 792], [-381, 48], [173, 215], [-564, 979], [822, 977], [537, 875], [288, 754], [-468, 134], [607, 780], [-845, -285], [-873, -504], [978, 981]]) == 6\nassert solution.findMinArrowShots([[484, 654], [-481, 198], [-653, -603], [1000, 1000]]) == 4\nassert solution.findMinArrowShots([[-164, 739], [906, 971], [622, 867], [236, 993], [-708, -517], [-379, -228], [11, 387], [674, 953], [-701, 462], [-331, -12], [-85, 294], [279, 636], [-911, 570], [-91, 672], [404, 743], [-341, -220], [-974, -881], [306, 678], [-859, -218], [34, 362], [330, 397], [-750, -312], [-334, 721], [948, 993], [369, 477], [-756, 341], [-790, 895], [-402, 743], [-774, 368], [466, 672], [97, 670], [-77, 104], [229, 532], [-242, -162], [-42, 74], [337, 537], [913, 947], [510, 905], [779, 845], [-421, 963], [37, 214], [771, 945], [-163, 882]]) == 9\nassert solution.findMinArrowShots([[264, 833], [416, 963], [-110, -102], [18, 288], [-441, -190], [877, 935], [782, 836], [886, 981], [-164, 272], [-402, 843], [-696, -639], [-777, 201], [-687, 71], [-489, 72], [644, 848], [-394, 303], [38, 221], [-9, 860], [505, 664], [-9, 149], [479, 490], [-710, 660], [22, 941], [872, 986], [208, 320], [-191, 937], [203, 767], [547, 669], [-453, 895], [-406, 977], [43, 214], [668, 997], [38, 685], [-853, 661], [-884, 581], [-367, -355], [-831, 482], [744, 785], [575, 981], [794, 853], [616, 931], [324, 491], [187, 599], [-577, -565], [241, 782], [-497, 346], [737, 883], [25, 609], [652, 775], [337, 763], [-995, -396], [976, 979], [-155, 669], [-886, -298]]) == 12\nassert solution.findMinArrowShots([[-143, 680], [988, 993], [974, 993], [-635, 331], [-265, 765], [170, 933], [826, 933], [352, 984], [-779, 33], [-954, -15], [-906, -67], [-420, 782], [-325, 259], [576, 902], [-962, 649], [122, 496], [871, 875], [51, 103], [-880, -113], [543, 984], [-460, -231], [-413, 729], [-635, 451], [672, 787], [735, 807], [191, 239], [-443, 795], [435, 944], [-204, 264], [708, 962], [-584, 849], [276, 888], [-26, 992], [-466, 619], [-826, 807], [981, 998], [-747, 470], [85, 735], [-402, 955], [458, 724], [685, 728], [-837, 634], [651, 826], [-724, -129], [-158, 466], [-569, 358], [-876, 214], [-632, 245], [-622, 589], [-803, -504], [859, 912], [-532, 116], [199, 872], [351, 475], [-751, -115], [-914, 493], [672, 870], [933, 999], [859, 926], [221, 731], [163, 799], [-890, -374], [490, 838], [-985, -441], [258, 540], [-176, 896], [-612, 164], [614, 877], [-944, 871], [-895, 529], [-920, -570], [472, 957], [680, 992], [117, 792]]) == 9\nassert solution.findMinArrowShots([[388, 820], [188, 664], [740, 918], [-893, -318], [-850, 367], [746, 818], [950, 986], [24, 728], [414, 910], [524, 562], [-781, -432]]) == 4\nassert solution.findMinArrowShots([[-444, -285], [-363, 168], [77, 466], [-340, 92], [896, 996], [379, 780], [-240, 428], [-954, -182], [121, 185], [-67, 102], [406, 513], [-793, -151], [-943, 699], [-959, -507], [790, 868], [-997, -147], [837, 958], [764, 856], [-863, 843], [-507, 812], [899, 916], [848, 879], [155, 842], [-561, 666], [841, 901], [281, 574], [-67, 569], [-977, 408], [201, 654], [53, 525], [-793, -663], [95, 726], [600, 948], [655, 815], [-341, 627]]) == 8\nassert solution.findMinArrowShots([[655, 762], [-753, -51], [-18, 832], [733, 925], [-416, 843], [-4, 341], [-1, 944], [-344, 786], [-695, 416], [-137, 587], [-813, -281], [-979, -224], [377, 889], [162, 987], [-267, -147], [99, 635], [482, 698], [852, 980], [763, 893], [515, 781], [856, 985], [-852, -352], [-95, -32], [422, 724], [-278, 829], [-155, -137], [1, 673], [-606, 294], [261, 835], [450, 692], [-605, 328], [-47, 534], [-113, 334], [-857, -5], [-686, 682], [198, 343], [933, 964], [-528, 619], [914, 996], [696, 728], [-896, -521], [-9, 671], [-688, 794], [877, 915], [-48, 66], [190, 655], [317, 400], [-242, 402], [-478, 647], [-33, 369], [961, 986], [938, 957], [444, 485]]) == 9\nassert solution.findMinArrowShots([[-555, 261], [-399, -222], [727, 869], [244, 673], [-749, 107], [-445, -196], [-694, 497], [126, 609], [703, 892], [-823, 751], [567, 671], [-750, -70], [-227, 910], [689, 746], [819, 970], [791, 813], [551, 922], [-57, 152], [-727, -251], [-717, -115], [962, 974], [937, 988], [-62, 258], [-496, 320], [-829, -83]]) == 6\nassert solution.findMinArrowShots([[539, 811], [-577, 843], [277, 572], [584, 931], [362, 932], [392, 854], [604, 845], [-260, -244], [-492, -470], [403, 714], [940, 954], [793, 851], [198, 259], [509, 857], [338, 675], [347, 680], [-929, 296], [387, 544], [851, 919], [-501, 137], [-252, 822], [-741, -78], [36, 901], [-269, -179], [-197, -46], [-217, 490], [141, 377], [496, 906], [966, 967], [723, 943], [879, 892], [772, 885], [-66, 222], [-261, -88], [-191, 388], [917, 941], [-500, -49], [-339, 118], [682, 773], [160, 606], [584, 726], [315, 483], [-407, 798], [-826, -206], [-990, 517], [-119, 246], [802, 957], [-27, 518], [955, 964], [-20, 315], [189, 733], [-593, 91], [-838, -766], [-590, 237], [-657, 533], [-279, 958], [264, 798], [719, 995], [-119, 400], [867, 935], [-871, -636], [-462, 110], [-638, 605], [134, 405], [961, 965], [55, 67], [-607, 306], [-718, 867], [-207, 213], [26, 604], [-655, 762], [81, 679], [155, 637], [-88, 248]]) == 13\nassert solution.findMinArrowShots([[211, 281], [-423, 283], [631, 900], [362, 883], [-715, 328], [-627, 535], [-684, -74], [336, 903], [-911, 518], [349, 641], [744, 789], [978, 987], [0, 427], [730, 808], [-17, 580], [-884, 494], [497, 781], [-553, -300], [648, 668], [222, 544], [760, 886], [-694, 906], [-770, 69], [-475, -246], [-927, 504], [756, 948], [-980, -45], [-594, 478], [933, 974], [-823, -636], [-271, 213], [85, 761], [896, 914]]) == 9\nassert solution.findMinArrowShots([[585, 709]]) == 1\nassert solution.findMinArrowShots([[-390, 511], [-623, 690], [-300, 843], [-95, 988], [-374, 883], [12, 936], [-370, -169], [103, 754], [-678, 900], [740, 986], [-951, -948], [-939, -908], [766, 938], [299, 754], [261, 819], [576, 642], [-839, 821], [-330, -322], [-924, -227], [200, 743], [-136, 614], [150, 429], [129, 619], [-273, -19], [929, 985], [-991, -72], [-96, 858], [56, 60], [-303, 893], [898, 898], [-338, 68], [-404, -364], [-525, 760], [-301, 815], [-696, -455], [-733, 308], [-707, 129], [816, 865], [-579, -382], [-282, 851], [323, 501], [-921, -275], [125, 826], [801, 805], [-539, 338], [-256, 52], [-346, 380], [733, 892], [464, 525], [103, 611], [48, 438], [-269, 810], [-756, -572], [285, 329], [396, 670], [-302, -223], [-828, 607]]) == 14\nassert solution.findMinArrowShots([[301, 946], [-14, 323], [-400, -300], [540, 760], [388, 659], [543, 825], [-329, -126], [205, 483], [204, 879], [-178, 782], [-764, 542], [16, 875], [633, 915], [-699, 140], [-870, -141], [-647, 902], [-951, 607], [-130, 667], [-944, 305], [104, 989], [-256, -73], [915, 948], [65, 212], [317, 736], [77, 983], [-469, 881], [-374, 136], [-790, -778], [961, 994], [-278, 715], [-355, -136], [718, 943], [249, 827], [776, 824], [982, 984], [-960, 243], [-860, 839], [189, 847], [-924, 315], [325, 408], [467, 500], [616, 862], [338, 716], [-608, -208], [-291, 24], [-189, -4], [-207, 971], [-108, 947], [-797, 690], [-116, 872], [-18, 506], [498, 529]]) == 10\nassert solution.findMinArrowShots([[-334, -310], [-1000, 485], [-891, 437], [723, 883]]) == 2\nassert solution.findMinArrowShots([[-212, 681], [-427, 979], [-886, 778], [-924, 8], [-214, 726], [-466, -362], [691, 727], [-500, -202], [557, 624], [189, 772], [-618, -60], [921, 928], [24, 474], [239, 726], [530, 615], [-728, 130], [408, 661], [567, 686], [265, 983], [-932, -646], [607, 775], [273, 925], [898, 965], [-404, 36], [-394, 258], [621, 867], [553, 757], [-907, -461], [203, 932], [-299, 944], [-937, -491], [-334, -145], [135, 611], [-562, -341], [720, 926], [-317, 963], [-555, -74], [-405, 719], [936, 961], [-820, 481], [143, 497], [611, 930], [766, 964], [136, 392], [-650, 439], [-739, -79], [-195, 293], [-685, 648], [971, 993], [-517, 288], [823, 930], [32, 129], [166, 410], [-404, 636], [-286, 913], [-609, 994], [-185, 223], [-533, -320], [478, 898], [460, 636], [895, 916]]) == 11\nassert solution.findMinArrowShots([[773, 864], [642, 723], [-296, 396], [215, 490], [52, 82], [-226, -18], [-413, -273], [413, 984], [27, 330], [226, 811], [729, 904], [-830, 432], [-870, -218], [693, 961], [-267, -42], [930, 935], [868, 920], [776, 998], [-31, 707], [-865, 969], [-177, 247], [-191, 453], [-137, 304], [-883, -852], [514, 843], [143, 289], [-501, -381], [-83, 886], [762, 921], [-968, -454], [152, 801], [-995, 64], [64, 128], [-709, 474], [-845, 80], [-363, -12], [-84, 599], [500, 927], [-787, 940], [911, 942], [932, 968], [896, 938], [-831, -367], [958, 975], [-996, 85], [-582, 249], [-185, -132], [765, 963], [588, 684], [-868, 837], [731, 872], [562, 679], [-579, 891], [14, 131], [-4, 756], [-298, 739], [-91, 208], [152, 780], [-267, 334], [-539, -238], [406, 540]]) == 11\nassert solution.findMinArrowShots([[-565, 727], [-533, 7], [367, 479], [445, 975], [409, 435], [621, 737], [620, 731], [-233, -28], [-301, -251], [-281, 296], [519, 573], [-865, -848], [-499, 466], [-233, 480], [-88, 635], [726, 998], [-924, -153], [156, 182], [926, 934], [700, 924], [469, 859], [644, 901], [579, 809], [-994, -301], [-134, 803], [87, 881], [-476, 438], [-34, 698], [867, 926], [523, 921], [921, 968], [87, 324], [-419, -30], [-845, 509], [-182, 705], [721, 995], [971, 996], [329, 981], [-391, 871], [-549, -525], [980, 982], [332, 817], [-349, 986], [826, 887], [273, 548], [-955, 160], [-811, 273], [-833, 737], [355, 787], [-407, 834], [683, 831], [148, 197]]) == 11\nassert solution.findMinArrowShots([[661, 708], [579, 630], [-248, 222], [-387, 343], [283, 369], [849, 1000], [337, 996], [118, 563], [-730, 158], [-405, -320], [-729, -523], [-725, 278], [826, 867], [125, 177], [-927, 674], [-839, 542]]) == 7\nassert solution.findMinArrowShots([[290, 708], [-657, 612], [653, 987], [-538, 322], [-557, 102], [-106, 398], [-330, -222], [964, 982], [-543, 658], [545, 859], [-346, 594], [97, 422], [-282, -213], [-56, 935], [979, 985], [-846, 935], [778, 810], [-937, 58], [-966, -740], [353, 446], [-59, 449], [-829, 413], [-516, -72], [271, 658], [-478, 701], [119, 880], [-565, -487], [247, 913], [698, 703], [751, 825], [629, 671], [969, 974], [841, 878], [-739, 437], [332, 684], [494, 539], [-707, 12], [-763, 218], [765, 844], [959, 994], [-825, 791], [-494, -311], [60, 959], [-408, 452], [906, 978], [-657, 53], [989, 990], [807, 872], [-832, -741], [700, 884], [13, 472], [55, 639], [-956, -166], [-343, 379], [-437, -433], [-109, -54], [420, 454], [69, 903], [-430, -218], [-809, -765], [261, 640], [767, 948]]) == 14\nassert solution.findMinArrowShots([[-861, 274], [-969, -662], [-881, 983], [-898, -382], [-965, -88], [277, 614], [400, 568], [866, 956], [154, 429], [741, 872], [533, 743], [-449, 18], [-593, 35], [885, 899], [293, 572], [-645, -532], [81, 650], [-234, 914], [-183, 969], [-292, 846], [-586, 74], [-97, 609], [428, 681], [959, 963], [785, 954], [344, 715], [-691, 664], [401, 974], [-326, 285], [-313, 118], [782, 870], [593, 870], [895, 996], [435, 815], [-813, -9], [710, 992], [625, 727], [689, 895], [941, 999], [-292, 99], [-452, 36], [-320, 707], [-293, 896], [667, 781], [-963, 803], [581, 770], [131, 717], [-528, 578], [-719, -699], [-813, -738], [394, 504], [243, 534], [176, 922], [207, 385], [882, 936], [-988, -254], [-554, -235], [632, 683], [-90, 392], [-912, -354], [-872, 633], [215, 961], [771, 988], [605, 775], [421, 890], [-784, 446], [-101, 407], [37, 126], [197, 774], [-122, 908], [-2, 97], [-875, 193], [838, 949], [-52, 270], [905, 924], [-140, 889], [788, 990], [-781, 166], [-519, -89], [741, 984], [869, 939], [-913, 384], [688, 911], [-205, 150], [495, 988], [53, 757], [-467, 403], [-102, 421], [-264, 820], [-557, -138]]) == 12\nassert solution.findMinArrowShots([[928, 997], [618, 882], [-257, -120], [119, 793], [423, 640], [-630, -94], [-536, -12], [894, 975], [-316, -284], [343, 979], [104, 625], [-690, 184], [-450, -184], [482, 955], [57, 337], [739, 835], [-538, 698], [-547, -360], [510, 733], [-785, -9], [-773, -477], [339, 847], [-685, 519], [120, 763], [83, 850], [-781, -68], [-515, 228], [-293, 740], [900, 970], [686, 849], [-332, -134], [-319, 433], [638, 998], [817, 990], [-690, 727], [-774, 520], [428, 999], [-849, -170], [409, 511], [-773, -688], [-661, -573], [219, 867], [102, 365], [-136, -92], [-911, -898], [-762, -158], [705, 943], [144, 170], [868, 900], [-371, 402], [320, 814], [656, 716], [-147, 112], [52, 136], [666, 903], [41, 958], [882, 959], [-847, 28], [-490, 698], [268, 324], [601, 854], [-644, 883], [-995, 637], [-671, 496], [474, 710], [-26, 978], [813, 927], [-613, -250], [572, 969], [-721, -218], [676, 724], [-132, -38], [-179, 430], [-225, 327], [659, 713], [848, 870], [660, 817], [929, 950]]) == 14\nassert solution.findMinArrowShots([[-740, 468], [296, 797], [-984, -363], [-330, 473], [137, 692], [-199, -6], [219, 415], [-953, -654], [-599, 971], [765, 940], [-495, -232], [196, 200], [62, 841], [317, 506], [-661, 797], [-625, 207], [-935, 91], [-612, 349], [-174, 880], [504, 673], [-898, 77], [-70, 665], [312, 432], [-575, -99], [-503, 376], [-444, 286], [758, 778], [-77, 914], [-771, -83], [-587, 420], [268, 508], [930, 960], [-193, 983], [-417, -148], [470, 668], [382, 624], [283, 344], [11, 893], [-203, 955], [89, 115], [-55, 948], [457, 512], [201, 237], [85, 734], [223, 508], [810, 958], [-781, 657], [-337, 411], [603, 849], [-723, -415], [-753, 345], [-473, -145], [-510, -59], [-990, 489], [722, 928], [903, 940], [107, 387], [901, 968], [-33, 241], [449, 567], [194, 597], [707, 716], [141, 369], [-819, -225], [-37, 155], [959, 980], [361, 428], [-79, 23], [285, 431], [-266, 640], [848, 860], [-42, 495], [-500, 419], [-217, 626], [888, 971], [677, 901], [-930, -121], [-358, 946], [-1000, 215], [-357, -68], [-942, -463]]) == 14\nassert solution.findMinArrowShots([[-190, 590], [-246, 631], [-139, 620], [-622, 373], [65, 671], [-152, 903], [-260, -209], [-489, 39], [-170, 821], [216, 879], [-992, -127], [-114, 35], [117, 493], [-338, -200], [-407, 999], [-215, -48], [931, 989], [734, 806], [-95, 350], [-45, 667], [648, 688], [-87, 408], [-432, -400], [-7, 284], [276, 751], [850, 995], [635, 996], [-327, 775], [343, 913], [-231, 96], [-950, -125], [69, 866], [-489, -239], [-290, 166], [713, 771], [-412, 661], [-295, 215], [-2, 974], [679, 751], [-513, 659], [187, 945], [-677, 969], [-602, 898], [-450, 754], [-285, 565], [-384, 15], [-564, -391], [284, 905], [-36, 639], [735, 949], [132, 405], [104, 382], [-842, 138], [-390, 158], [873, 879], [289, 995], [-706, 317], [35, 52], [104, 529], [-459, 370], [194, 794], [353, 966], [26, 721], [-36, 827], [-142, 426], [-244, 782], [-376, -156], [521, 748], [496, 733], [-661, -313], [-519, 941], [-396, 710], [-785, -304], [-431, 403], [-579, 903], [714, 772], [-473, -66], [787, 852], [368, 661], [184, 827], [-49, 817], [-781, -90], [-557, 219], [-340, 830], [-566, -199]]) == 9\nassert solution.findMinArrowShots([[-443, -58], [712, 840], [941, 946], [869, 874], [-524, 862], [379, 704], [947, 951], [-21, 230], [111, 842], [-483, 759], [421, 743], [-786, 293], [372, 887], [-702, 391], [628, 641], [72, 690], [933, 998], [-702, -139], [923, 974], [163, 186]]) == 7\nassert solution.findMinArrowShots([[-521, 705], [669, 673], [-526, 427], [-742, -6], [-279, -45], [280, 419], [444, 597], [-29, 306], [5, 163], [747, 859], [-979, 503], [287, 422], [-526, -465], [870, 935], [154, 614], [505, 915], [-800, 33], [673, 950], [-623, 730], [-295, -271], [-982, -907], [560, 944], [-3, 104], [-686, -529], [309, 438], [-928, -396], [429, 975], [553, 866], [325, 766], [457, 809], [-777, 388], [496, 517], [130, 817], [793, 962], [351, 526], [245, 717], [915, 942], [-269, 815], [-971, 339], [-27, 272], [109, 950], [266, 870], [848, 901], [-554, -208], [141, 150], [517, 701], [-270, 147], [727, 894], [-461, -81], [539, 788], [-571, 26], [-91, 787], [-933, -527], [579, 942], [474, 725], [-714, 125], [998, 998], [346, 713], [689, 747], [-688, 738], [58, 406], [-296, -184], [-831, 477], [-199, -149], [-337, -186], [-223, -114], [480, 656], [-351, 555], [-621, 797], [-805, 87], [-457, 679], [-497, 460], [-234, -139], [439, 782], [-809, 304], [629, 982], [84, 351], [-587, 4], [-777, 213], [-814, -565], [-561, -154], [320, 620], [448, 935], [-628, 225], [64, 646], [598, 966], [217, 946], [-408, 841], [672, 983], [-203, 744], [108, 636], [441, 486]]) == 15\nassert solution.findMinArrowShots([[-693, 421], [-624, 426], [520, 642], [-802, -354], [1000, 1000], [-980, 62], [-286, -208], [593, 970], [-118, 555], [-841, 269], [-371, -80], [943, 982], [158, 761], [-402, 855], [-457, -181], [-778, -766], [563, 703], [688, 814], [-162, 710], [954, 975], [-608, -149], [-936, 25], [54, 717], [-988, 521], [-604, 999], [60, 209], [681, 787], [741, 907], [673, 980], [588, 968], [-859, 788], [-562, 768], [853, 938], [-633, -575], [976, 996], [296, 335], [-82, 253], [724, 737], [371, 576], [-97, 450], [954, 954], [-589, 138], [-586, -477]]) == 11\nassert solution.findMinArrowShots([[47, 819], [447, 788], [629, 701], [166, 706], [611, 788], [125, 574], [452, 764], [841, 872], [-107, -57], [432, 632], [-896, 497], [979, 979], [-241, 365], [-868, 237], [-765, 816], [180, 191], [870, 911], [-186, 399], [-976, 35], [-960, -684], [-940, 43], [-777, -383], [-529, 95], [282, 290], [-406, -158], [650, 876], [890, 911], [-300, 900], [646, 958], [-832, -803], [636, 879], [-443, 789], [935, 986], [-460, -299], [661, 677], [735, 826], [-303, -70], [-114, 486], [-801, -680], [-189, -124], [-66, 624], [287, 820], [114, 296], [806, 955], [-41, 237], [-616, 968], [872, 914], [197, 973], [-164, 10], [-586, -511], [747, 871], [-517, 328], [-83, 719], [509, 924], [259, 754], [-795, -157], [-334, -272], [-448, 427], [-779, -543], [-765, 1], [-946, -546], [-638, 32], [37, 587], [569, 817], [606, 847], [-148, -140], [814, 936], [-419, -357], [829, 866], [-979, -877], [-843, 873], [-583, 879], [-940, -516], [934, 945], [-580, 997], [677, 877]]) == 17\nassert solution.findMinArrowShots([[288, 349], [967, 985], [-948, 813], [473, 775], [-835, 170], [-413, -319], [160, 572], [23, 778], [237, 757], [-935, 128], [523, 758], [-738, -33], [-804, 811], [-420, 236], [-661, 29], [-655, 768], [-608, 731], [929, 966], [415, 707], [-503, 201], [-174, 991], [944, 949], [-805, -282], [-787, -38], [221, 708], [-176, 735], [671, 848], [-386, 178], [-716, 695], [-486, 26], [458, 764], [792, 1000], [-171, 230], [-795, -366], [792, 944]]) == 6\nassert solution.findMinArrowShots([[-606, -466], [-696, 146], [-552, -41], [-15, 991], [313, 846], [-220, -167], [792, 806], [-550, 965], [-166, 467], [174, 856], [-439, 810], [312, 993], [-58, 2], [-294, -23], [621, 821], [-290, 895], [-366, -229], [-36, 435], [-948, -119], [-735, 159], [-95, 766], [807, 960], [-49, 93], [-186, 391], [-635, 133], [248, 265], [649, 785], [109, 918], [998, 1000], [-230, 736], [479, 549], [-440, 1000], [679, 932], [875, 914], [365, 968], [-554, -175], [-445, 973], [-719, 247], [64, 108], [-265, 914], [389, 820], [315, 831], [-75, 41], [568, 920], [898, 981], [153, 811], [-755, 123], [-938, 844], [-904, 143], [96, 756], [-383, 180], [-824, -718], [-68, 586]]) == 12\nassert solution.findMinArrowShots([[534, 651], [929, 935], [720, 954], [-328, 152], [-443, -402], [862, 987], [-631, -394]]) == 4\nassert solution.findMinArrowShots([[-850, 976], [-395, 212], [-333, 936], [-222, 695], [-185, 80], [822, 877], [-547, -150], [739, 958], [477, 831], [-579, -165], [138, 595], [-859, 710], [83, 985], [878, 898], [-144, 754], [235, 702], [782, 909], [865, 993], [803, 891], [405, 601], [9, 676], [533, 738], [973, 975], [103, 913], [59, 654], [-516, 286]]) == 5\nassert solution.findMinArrowShots([[854, 948], [614, 828], [-274, 619], [890, 985], [-259, -141], [-514, 114], [120, 461], [821, 978], [-751, -88], [524, 646], [179, 944], [-807, 435], [769, 982], [179, 680], [-216, 197], [-220, 572], [-283, 106], [579, 983], [-704, 194]]) == 4\nassert solution.findMinArrowShots([[601, 630], [729, 764], [-539, 680], [426, 862], [361, 469], [-187, 89], [-348, -88], [44, 773], [-860, 518], [-938, 515], [-85, 422], [58, 242], [-442, 485], [747, 993], [-989, 805], [249, 473], [926, 941], [996, 999], [245, 984], [462, 533], [201, 802], [-855, -616], [321, 737], [799, 987], [-741, -499], [-623, 938], [-516, 876], [596, 807], [634, 962], [754, 787], [-446, -98], [663, 853], [-777, 473], [-156, 815], [-657, -210], [629, 739], [-8, 172], [292, 305], [-797, 543], [723, 943], [981, 995], [409, 762], [-526, -202], [717, 858], [932, 978], [-465, 903], [-626, 301], [-489, 636], [-159, 352], [691, 838], [-596, 952], [180, 804], [666, 955], [-613, 483], [489, 643], [-82, 9], [78, 862], [-272, 994], [-448, 270], [-395, 388], [-422, -393], [-913, 175], [-128, 520], [-303, 416]]) == 12\nassert solution.findMinArrowShots([[-973, -477], [711, 929], [-539, 53], [675, 723], [617, 871], [-776, 773], [-940, 779], [-922, 73], [-653, -632], [345, 677], [-382, 522], [697, 758], [-96, 393], [42, 463], [-815, -665], [990, 994], [2, 932], [424, 790], [-456, 916], [706, 818], [923, 934], [-608, 407], [-35, 340], [-116, 452], [609, 647], [-762, 311], [-373, 436], [504, 618], [-909, 728], [-91, 158], [364, 641], [523, 532], [-41, 248], [297, 478]]) == 9\nassert solution.findMinArrowShots([[766, 921], [-738, 672], [-935, -781], [-8, 750], [31, 382], [-802, -744], [617, 712], [-460, -199], [-390, -360]]) == 5\nassert solution.findMinArrowShots([[640, 730], [-263, -257], [791, 852], [496, 768], [481, 941], [151, 734], [588, 814], [188, 355], [228, 402], [422, 460], [-724, 129], [-654, -231], [-490, 511], [175, 454], [785, 838], [541, 697], [-267, 453], [-250, 723], [972, 972], [622, 766], [340, 512], [512, 661], [-56, 529], [273, 655], [-811, -362], [890, 923], [326, 658], [213, 242], [745, 771], [0, 982], [333, 575], [297, 904], [-716, 540], [-71, 881], [114, 570], [377, 432], [572, 572], [502, 893], [519, 906], [866, 883], [178, 301], [-974, 350], [433, 627], [835, 914], [-619, 158], [-524, -508], [-510, 644], [-147, 902], [-383, -239], [-28, 471], [-12, 228], [599, 736], [-870, -695], [-450, -29], [-723, 367], [-379, 580], [255, 838]]) == 12\nassert solution.findMinArrowShots([[-951, -217], [668, 702], [-620, -207], [-584, -2], [398, 923], [-833, -477], [-359, -338], [-626, -115], [804, 805], [903, 909], [-707, 772], [224, 810], [-552, 62], [-886, -398], [-595, 32], [884, 909], [485, 877], [-317, 425], [-976, 776], [289, 718], [323, 923], [9, 187], [501, 677], [-786, 720], [250, 697], [-292, -160], [-86, 121], [-681, -328], [-148, 567], [-112, 577], [-181, 281], [113, 649], [-617, 878], [895, 911], [-876, 942], [-874, -719], [916, 917], [404, 831], [316, 362], [-602, 939], [788, 816], [879, 922], [490, 558], [989, 992], [-329, 625], [-883, 499], [886, 974], [194, 912], [-332, -164], [817, 992], [416, 659], [-193, -153], [-473, 810], [857, 875], [-383, 129], [87, 571], [-511, -392], [245, 667], [313, 480], [-825, 443], [-402, 242], [442, 459], [368, 988], [-937, 436], [889, 979], [435, 724], [-846, -100], [714, 762], [605, 639], [-773, 287], [573, 796], [-449, -386], [-241, 921], [-267, -50], [-740, 820], [389, 914], [100, 881], [-482, 304], [-625, -444], [405, 889], [-582, -513], [782, 829], [-168, -50], [815, 983], [565, 927], [316, 826], [774, 944], [262, 798], [27, 811], [-291, 966], [-663, -322], [-428, -321], [-464, 597], [-892, 75], [-845, 423], [-330, 176], [-264, 987]]) == 17\nassert solution.findMinArrowShots([[-517, 523], [-79, 732], [381, 939], [-142, 575], [-287, 543], [724, 817], [514, 525], [-155, 379], [-599, 877], [963, 995], [466, 517], [-366, 667], [493, 934], [384, 833], [-739, -541], [-318, 41], [914, 978], [358, 534], [-832, 923], [101, 861], [641, 875], [35, 662], [-138, 947], [-812, 443], [967, 995], [203, 568], [777, 875], [981, 983], [783, 819], [482, 868], [-754, 629], [-416, -393], [810, 883], [-584, -580], [392, 793], [-772, 390], [38, 959], [-546, 704], [-137, 595], [-58, 786], [-782, 673], [656, 882], [-123, 131], [-735, 222], [779, 990], [-196, 227], [711, 862], [-982, 828], [-723, 717], [109, 455], [-840, 363], [164, 674], [954, 995], [940, 978], [823, 917], [-724, -596], [-303, 885], [177, 455], [318, 685], [176, 833], [497, 558], [857, 942], [678, 899], [984, 994], [-681, -299], [742, 860], [539, 952]]) == 11",
        "small_test_cases": "\nsolution = Solution()\nassert solution.findMinArrowShots([[10,16],[2,8],[1,6],[7,12]]) == 2\nassert solution.findMinArrowShots([[1,2],[3,4],[5,6],[7,8]]) == 4\nassert solution.findMinArrowShots([[1,2],[2,3],[3,4],[4,5]]) == 2\n",
        "algorithms": [
            "greedy",
            "sorting"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 2708,
        "task_name": "Maximum Strength of a Group",
        "description": "\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code> representing the score of students in an exam. The teacher would like to form one <strong>non-empty</strong> group of students with maximal <strong>strength</strong>, where the strength of a group of students of indices <code>i<sub>0</sub></code>, <code>i<sub>1</sub></code>, <code>i<sub>2</sub></code>, ... , <code>i<sub>k</sub></code> is defined as <code>nums[i<sub>0</sub>] * nums[i<sub>1</sub>] * nums[i<sub>2</sub>] * ... * nums[i<sub>k</sub>\u200b]</code>.</p>\n\n<p>Return <em>the maximum strength of a group the teacher can create</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,-1,-5,2,5,-9]\n<strong>Output:</strong> 1350\n<strong>Explanation:</strong> One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [-4,-5,-4]\n<strong>Output:</strong> 20\n<strong>Explanation:</strong> Group the students at indices [0, 1] . Then, we&rsquo;ll have a resulting strength of 20. We cannot achieve greater strength.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 13</code></li>\n\t<li><code>-9 &lt;= nums[i] &lt;= 9</code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given a **0-indexed** integer array `nums` representing the score of students in an exam. The teacher would like to form one **non-empty** group of students with maximal **strength**, where the strength of a group of students of indices `i0`, `i1`, `i2`, ... , `ik` is defined as `nums[i0] * nums[i1] * nums[i2] * ... * nums[ik\u200b]`.\n\n\nReturn *the maximum strength of a group the teacher can create*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,-1,-5,2,5,-9]\n**Output:** 1350\n**Explanation:** One way to form a group of maximal strength is to group the students at indices [0,2,3,4,5]. Their strength is 3 * (-5) * 2 * 5 * (-9) = 1350, which we can show is optimal.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [-4,-5,-4]\n**Output:** 20\n**Explanation:** Group the students at indices [0, 1] . Then, we\u2019ll have a resulting strength of 20. We cannot achieve greater strength.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 13`\n* `-9 <= nums[i] <= 9`\n\n\n",
        "canonical_solution": "class Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if nums[1] == nums[-1] == 0:\n            return 0\n        ans, i = 1, 0\n        while i < n:\n            if nums[i] < 0 and i + 1 < n and nums[i + 1] < 0:\n                ans *= nums[i] * nums[i + 1]\n                i += 2\n            elif nums[i] <= 0:\n                i += 1\n            else:\n                ans *= nums[i]\n                i += 1\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxStrength(self, nums: List[int]) -> int:\n        nums.sort()\n        n = len(nums)\n        if n == 1:\n            return nums[0]\n        if nums[1] == nums[-1] == 0:\n            return 0\n        ans, i = 1, 0\n        while i < n:\n            if nums[i] < 0 and i + 1 < n and nums[i + 1] < 0:\n                ans *= nums[i] * nums[i + 1]\n                i += 2\n            elif nums[i] <= 0:\n                i += 1\n            else:\n                ans *= nums[i]\n                i += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = random.choices(range(-9, 10), k=random.randint(1, 13))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxStrength(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxStrength(nums) == expected_result\n        test_case_generator_results.append(f\"assert solution.maxStrength({nums}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  \n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.maxStrength([-3, 4]) == 4\nassert solution.maxStrength([-8, -6, -2, -1, -1, 2, 3, 4, 6, 7]) == 96768\nassert solution.maxStrength([-7, -5, -5, 3, 3, 7, 9, 9]) == 178605\nassert solution.maxStrength([-9, -9, -6, -5, -1, 2, 2, 3, 9]) == 262440\nassert solution.maxStrength([-9, -9, -6, -4, -2, 0, 0, 1, 4, 5, 6, 8]) == 1866240\nassert solution.maxStrength([-1, 3, 6, 8]) == 144\nassert solution.maxStrength([-9, -5, -3, -2, 0, 1, 2, 6]) == 3240\nassert solution.maxStrength([-5, -4, -3, -2, -1, 3, 3, 4, 6, 6, 7]) == 1088640\nassert solution.maxStrength([-8, 2, 5]) == 10\nassert solution.maxStrength([-7, -5, -4, 1, 2, 2, 4, 4, 7, 8]) == 125440\nassert solution.maxStrength([-8, -6, -3, -1, 1, 3, 4, 5, 7, 8]) == 483840\nassert solution.maxStrength([-8, -7, -5, -2, 0, 1, 3, 5, 5, 7]) == 294000\nassert solution.maxStrength([-6, 0, 1, 2, 3, 3, 6, 6, 9]) == 5832\nassert solution.maxStrength([-9, -9, -8, 0, 1, 1, 4, 4, 7, 8]) == 72576\nassert solution.maxStrength([-4]) == -4\nassert solution.maxStrength([-8]) == -8\nassert solution.maxStrength([2]) == 2\nassert solution.maxStrength([-9, -8, -8, -8, -6, -5, 3, 4, 4, 7, 8, 8, 9]) == 26754416640\nassert solution.maxStrength([-9, -8, -5, -3, -2, -2, -1, 2, 4, 7, 9]) == 2177280\nassert solution.maxStrength([0, 2, 6]) == 12\nassert solution.maxStrength([-9, -8, -6, -5, -5, -2, -1, 0, 3, 7, 8]) == 3628800\nassert solution.maxStrength([-9, -8, -5, -4, -4, -2, 1, 2, 5]) == 115200\nassert solution.maxStrength([-9, -7, -5, -5, -3, -3, -3, -2, -2, 2, 5, 6, 9]) == 45927000\nassert solution.maxStrength([-9, -8, -1, 0, 2, 2, 4, 6]) == 6912\nassert solution.maxStrength([-8, -1, 5, 5, 6, 9]) == 10800\nassert solution.maxStrength([-8, -6, -5, -4, -3, -2, 0, 1, 3, 7, 8, 8, 8]) == 61931520\nassert solution.maxStrength([-8, -6, -5, -4, 4, 7, 7]) == 188160\nassert solution.maxStrength([-9, -8, -6, 2, 3, 4, 5, 7]) == 60480\nassert solution.maxStrength([-8, -7, -4, 1, 5, 9]) == 2520\nassert solution.maxStrength([-5, -1, 1, 1, 1, 2, 2]) == 20\nassert solution.maxStrength([-9, -8, -1, 3, 3, 8]) == 5184\nassert solution.maxStrength([-9, -7, -6, -4, -2, -2, -1, 1, 2, 7, 9]) == 762048\nassert solution.maxStrength([-7, -6, -5, 1, 2, 3, 5, 7, 8, 9]) == 635040\nassert solution.maxStrength([-9, 0, 3]) == 3\nassert solution.maxStrength([-9, -8, -7, -3, 1, 1, 3, 5, 6]) == 136080\nassert solution.maxStrength([-8, -7, 9]) == 504\nassert solution.maxStrength([-7, -6, 5, 8]) == 1680\nassert solution.maxStrength([-7, -7, -5, -4, -3, 0, 1, 2, 2, 3, 8, 9]) == 846720\nassert solution.maxStrength([-7, -6, 4, 7]) == 1176\nassert solution.maxStrength([-9, -6, -5, -2, 0, 6, 7, 8, 9, 9]) == 14696640\nassert solution.maxStrength([-9, -3, -3, 0, 2, 4, 5, 6, 6, 6, 7, 8]) == 13063680\nassert solution.maxStrength([-9, -4, -2, -1, 1, 1, 4, 4, 5, 5, 5, 7, 9]) == 9072000\nassert solution.maxStrength([-7, -4, -2, -1]) == 56\nassert solution.maxStrength([-9, -8, -8, -7, -5, -4, -4, -2, 0, 1, 5, 6, 7]) == 135475200\nassert solution.maxStrength([-6, -4, 4, 7, 7]) == 4704\nassert solution.maxStrength([-9, -7, -6, -1, 1, 3, 5, 7]) == 39690\nassert solution.maxStrength([-9, -8, -5, -4, -4, -1, 1, 1, 2, 4, 4]) == 184320\nassert solution.maxStrength([-8, -2, 0, 1, 3, 5, 9]) == 2160\nassert solution.maxStrength([-8, -3, 0, 1, 5, 6, 8]) == 5760\nassert solution.maxStrength([-7, -5, -4, 0, 2]) == 70\nassert solution.maxStrength([-8, -4, 3]) == 96\nassert solution.maxStrength([-8, -2, -2, 0, 0, 1, 3, 4, 5]) == 960\nassert solution.maxStrength([-8, -8, -7, -2, -2, -2, -1, 2]) == 7168\nassert solution.maxStrength([-7, -4, -3, 0, 3]) == 84\nassert solution.maxStrength([-8, -5]) == 40\nassert solution.maxStrength([-9, -5, -4, -3, -2, 2, 2, 3, 7, 7, 8, 8, 8]) == 162570240\nassert solution.maxStrength([-8, -4, -3, -2, -1, 1, 2, 5, 8, 9]) == 138240\nassert solution.maxStrength([-9, -3, -3, 9]) == 243\nassert solution.maxStrength([-8, -6, -5, -4, 1, 9, 9]) == 77760\nassert solution.maxStrength([5]) == 5\nassert solution.maxStrength([-3]) == -3\nassert solution.maxStrength([6]) == 6\nassert solution.maxStrength([-4, -4, -4, -3, 3, 3, 4, 6, 6, 7, 7, 9, 9]) == 987614208\nassert solution.maxStrength([-7, -5, -5, -4, -3, 2, 3, 5, 8]) == 168000\nassert solution.maxStrength([-7, -5, 0, 0, 0, 3, 4, 9, 9, 9]) == 306180\nassert solution.maxStrength([-4, -3, -1, 0, 0, 1, 5, 8]) == 480\nassert solution.maxStrength([-9, -4, -4, -3, 3, 3, 4, 5, 7, 7]) == 3810240\nassert solution.maxStrength([-5, -3, -2, -1, 4, 9]) == 1080\nassert solution.maxStrength([-7, -7, -6, -5, -4, -4, -3, -2, -1, -1, 2, 5, 6]) == 8467200\nassert solution.maxStrength([0, 0, 5, 5, 6, 6, 7, 9]) == 56700\nassert solution.maxStrength([-9, -7, -6, -4, -3, 2, 6, 6, 9]) == 979776\nassert solution.maxStrength([-8, -4, -1, 0, 1, 6, 9, 9, 9]) == 139968\nassert solution.maxStrength([-6, -2, -1, 6]) == 72\nassert solution.maxStrength([-9, -8, -5, -5, -1, 3, 4, 6]) == 129600\nassert solution.maxStrength([-4, -3, 0, 2, 8]) == 192\nassert solution.maxStrength([-9, -9, -8, -8, -8, -7, -7, -1, 3, 4, 7, 7, 9]) == 10754021376\nassert solution.maxStrength([-5]) == -5\nassert solution.maxStrength([-8, -5, -1, 0, 7]) == 280\nassert solution.maxStrength([-9, -8, -8, -3, -3, -2, -1, 1, 1, 2, 6]) == 124416\nassert solution.maxStrength([-9, -6, -4, -3, 0, 6]) == 3888\nassert solution.maxStrength([-9, -7, -4, -2, -1, -1, 2, 6, 6, 7]) == 254016\nassert solution.maxStrength([-6, -6, -5, -3, -2, 2, 6, 8, 9]) == 466560\nassert solution.maxStrength([-6, 0, 3, 7, 8, 8]) == 1344\nassert solution.maxStrength([-9, -9, -9, -5, -5, -1, 2, 3, 3]) == 328050\nassert solution.maxStrength([-7]) == -7\nassert solution.maxStrength([-7, -6, -4, -4, -1, 3, 8]) == 16128\nassert solution.maxStrength([0, 2, 5, 9]) == 90\nassert solution.maxStrength([-7, -6, -5, -4, 5, 8]) == 33600\nassert solution.maxStrength([2]) == 2\nassert solution.maxStrength([-8, -5, -3, -3, 5, 9]) == 16200\nassert solution.maxStrength([-7, -7, -6, -5, -1, 1, 2, 3]) == 8820\nassert solution.maxStrength([-9, -8, -5, -3, 0, 4, 5, 5, 7, 7, 8, 8, 9]) == 3048192000\nassert solution.maxStrength([-6, -4, -2, 2, 3, 3, 7, 9]) == 27216\nassert solution.maxStrength([-8, -8, -4, -3, -3, -2, -2, 2, 5, 6, 8, 9]) == 19906560\nassert solution.maxStrength([-7, -5, -3, -2, 1, 5]) == 1050\nassert solution.maxStrength([-9, -3, -2, -1, 1, 1, 1, 2, 2, 3, 3, 4, 8]) == 62208\nassert solution.maxStrength([-9, -6, -6, -6, -5, -4, 0, 0, 2, 3, 5, 7]) == 8164800\nassert solution.maxStrength([-9]) == -9\nassert solution.maxStrength([-6, -3, -1, 2, 6, 7]) == 1512\nassert solution.maxStrength([-1, 0, 0, 4]) == 4",
        "small_test_cases": "\nsolution = Solution()\nassert solution.maxStrength([3, -1, -5, 2, 5, -9]) == 1350\nassert solution.maxStrength([-4, -5, -4]) == 20\n",
        "algorithms": [
            "greedy",
            "backtracking",
            "sorting"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 1081,
        "task_name": "Smallest Subsequence of Distinct Characters",
        "description": "\n\n<p>Given a string <code>s</code>, return <em>the </em><span data-keyword=\"lexicographically-smaller-string\"><em>lexicographically smallest</em></span> <span data-keyword=\"subsequence-string\"><em>subsequence</em></span><em> of</em> <code>s</code> <em>that contains all the distinct characters of</em> <code>s</code> <em>exactly once</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;bcabc&quot;\n<strong>Output:</strong> &quot;abc&quot;\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;cbacdcbc&quot;\n<strong>Output:</strong> &quot;acdb&quot;\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 1000</code></li>\n\t<li><code>s</code> consists of lowercase English letters.</li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Note:</strong> This question is the same as 316: <a href=\"https://leetcode.com/problems/remove-duplicate-letters/\" target=\"_blank\">https://leetcode.com/problems/remove-duplicate-letters/</a>\n\n",
        "markdown_description": "\nGiven a string `s`, return *the* *lexicographically smallest* *subsequence* *of* `s` *that contains all the distinct characters of* `s` *exactly once*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"bcabc\"\n**Output:** \"abc\"\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"cbacdcbc\"\n**Output:** \"acdb\"\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 1000`\n* `s` consists of lowercase English letters.\n\n\n\u00a0\n\n\n**Note:** This question is the same as 316: <https://leetcode.com/problems/remove-duplicate-letters/>\n",
        "canonical_solution": "class Solution:\n    def smallestSubsequence(self, s: str) -> str:\n        last = {c: i for i, c in enumerate(s)}\n        stk = []\n        vis = set()\n        for i, c in enumerate(s):\n            if c in vis:\n                continue\n            while stk and stk[-1] > c and last[stk[-1]] > i:\n                vis.remove(stk.pop())\n            stk.append(c)\n            vis.add(c)\n        return \"\".join(stk)\n",
        "test_case_generator": "\n# Test case generator\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random string of lowercase English letters\n    s = ''.join(random.choices(string.ascii_lowercase, k=random.randint(1, 10)))\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestSubsequence(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestSubsequence(s) == expected_result\n        print(f\"assert solution.smallestSubsequence('{s}') == '{expected_result}'\")\n        test_case_generator_results.append(f\"assert solution.smallestSubsequence('{s}') == '{expected_result}'\") # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.smallestSubsequence('zzkixyest') == 'zkixyest'\nassert solution.smallestSubsequence('hpkxhx') == 'hpkx'\nassert solution.smallestSubsequence('qhx') == 'qhx'\nassert solution.smallestSubsequence('lnxgxhi') == 'lngxhi'\nassert solution.smallestSubsequence('s') == 's'\nassert solution.smallestSubsequence('pz') == 'pz'\nassert solution.smallestSubsequence('a') == 'a'\nassert solution.smallestSubsequence('svymdtbj') == 'svymdtbj'\nassert solution.smallestSubsequence('winj') == 'winj'\nassert solution.smallestSubsequence('lj') == 'lj'\nassert solution.smallestSubsequence('lsjqnd') == 'lsjqnd'\nassert solution.smallestSubsequence('vkdxopfr') == 'vkdxopfr'\nassert solution.smallestSubsequence('yvvrkovj') == 'yrkovj'\nassert solution.smallestSubsequence('zqe') == 'zqe'\nassert solution.smallestSubsequence('khd') == 'khd'\nassert solution.smallestSubsequence('oszmfgh') == 'oszmfgh'\nassert solution.smallestSubsequence('iho') == 'iho'\nassert solution.smallestSubsequence('kvcepo') == 'kvcepo'\nassert solution.smallestSubsequence('vxyeshedpv') == 'vxyeshdp'\nassert solution.smallestSubsequence('xqye') == 'xqye'\nassert solution.smallestSubsequence('uhdkmjjfla') == 'uhdkmjfla'\nassert solution.smallestSubsequence('rvslihrjr') == 'rvslihj'\nassert solution.smallestSubsequence('tlg') == 'tlg'\nassert solution.smallestSubsequence('bhdskbmmp') == 'bhdskmp'\nassert solution.smallestSubsequence('pulqjcpp') == 'pulqjc'\nassert solution.smallestSubsequence('iuj') == 'iuj'\nassert solution.smallestSubsequence('lwld') == 'lwd'\nassert solution.smallestSubsequence('imdvzggtw') == 'imdvzgtw'\nassert solution.smallestSubsequence('drr') == 'dr'\nassert solution.smallestSubsequence('fnkgslxf') == 'fnkgslx'\nassert solution.smallestSubsequence('myz') == 'myz'\nassert solution.smallestSubsequence('ydgp') == 'ydgp'\nassert solution.smallestSubsequence('ao') == 'ao'\nassert solution.smallestSubsequence('zskm') == 'zskm'\nassert solution.smallestSubsequence('pkqq') == 'pkq'\nassert solution.smallestSubsequence('zvkomemdh') == 'zvkoemdh'\nassert solution.smallestSubsequence('jmdcpgrur') == 'jmdcpgru'\nassert solution.smallestSubsequence('zki') == 'zki'\nassert solution.smallestSubsequence('auasjbq') == 'ausjbq'\nassert solution.smallestSubsequence('tbsvse') == 'tbsve'\nassert solution.smallestSubsequence('qbarmodyvx') == 'qbarmodyvx'\nassert solution.smallestSubsequence('tirtwpcd') == 'irtwpcd'\nassert solution.smallestSubsequence('ghluhgvrdy') == 'ghluvrdy'\nassert solution.smallestSubsequence('schsvo') == 'chsvo'\nassert solution.smallestSubsequence('zlofqw') == 'zlofqw'\nassert solution.smallestSubsequence('fppt') == 'fpt'\nassert solution.smallestSubsequence('m') == 'm'\nassert solution.smallestSubsequence('p') == 'p'\nassert solution.smallestSubsequence('e') == 'e'\nassert solution.smallestSubsequence('xdv') == 'xdv'\nassert solution.smallestSubsequence('pbpt') == 'bpt'\nassert solution.smallestSubsequence('p') == 'p'\nassert solution.smallestSubsequence('y') == 'y'\nassert solution.smallestSubsequence('doh') == 'doh'\nassert solution.smallestSubsequence('svqif') == 'svqif'\nassert solution.smallestSubsequence('el') == 'el'\nassert solution.smallestSubsequence('wbohjcmm') == 'wbohjcm'\nassert solution.smallestSubsequence('l') == 'l'\nassert solution.smallestSubsequence('sfwdlo') == 'sfwdlo'\nassert solution.smallestSubsequence('v') == 'v'\nassert solution.smallestSubsequence('hbpwbwspti') == 'hbpwsti'\nassert solution.smallestSubsequence('kqwfukhsb') == 'kqwfuhsb'\nassert solution.smallestSubsequence('zlbrun') == 'zlbrun'\nassert solution.smallestSubsequence('zj') == 'zj'\nassert solution.smallestSubsequence('evky') == 'evky'\nassert solution.smallestSubsequence('s') == 's'\nassert solution.smallestSubsequence('jsah') == 'jsah'\nassert solution.smallestSubsequence('gc') == 'gc'\nassert solution.smallestSubsequence('fdhtk') == 'fdhtk'\nassert solution.smallestSubsequence('xojwv') == 'xojwv'\nassert solution.smallestSubsequence('jdl') == 'jdl'\nassert solution.smallestSubsequence('elaogj') == 'elaogj'\nassert solution.smallestSubsequence('tnawufks') == 'tnawufks'\nassert solution.smallestSubsequence('mnqeakq') == 'mneakq'\nassert solution.smallestSubsequence('easvdstlf') == 'easvdtlf'\nassert solution.smallestSubsequence('l') == 'l'\nassert solution.smallestSubsequence('dcbczgoz') == 'dbcgoz'\nassert solution.smallestSubsequence('vfadhsqe') == 'vfadhsqe'\nassert solution.smallestSubsequence('ttsqwm') == 'tsqwm'\nassert solution.smallestSubsequence('sitywthvul') == 'sitywhvul'\nassert solution.smallestSubsequence('qsdolf') == 'qsdolf'\nassert solution.smallestSubsequence('wszvtk') == 'wszvtk'\nassert solution.smallestSubsequence('tlztnst') == 'lznst'\nassert solution.smallestSubsequence('ts') == 'ts'\nassert solution.smallestSubsequence('e') == 'e'\nassert solution.smallestSubsequence('pciwnsxfai') == 'pciwnsxfa'\nassert solution.smallestSubsequence('eabp') == 'eabp'\nassert solution.smallestSubsequence('lxozsq') == 'lxozsq'\nassert solution.smallestSubsequence('wvgsqkc') == 'wvgsqkc'\nassert solution.smallestSubsequence('vsrfxdofz') == 'vsrfxdoz'\nassert solution.smallestSubsequence('l') == 'l'\nassert solution.smallestSubsequence('tppmet') == 'pmet'\nassert solution.smallestSubsequence('cgscjbi') == 'cgsjbi'\nassert solution.smallestSubsequence('smp') == 'smp'\nassert solution.smallestSubsequence('qtjlom') == 'qtjlom'\nassert solution.smallestSubsequence('uwd') == 'uwd'\nassert solution.smallestSubsequence('qtkgigfqw') == 'qtkgifw'\nassert solution.smallestSubsequence('immugbznc') == 'imugbznc'\nassert solution.smallestSubsequence('pb') == 'pb'\nassert solution.smallestSubsequence('jjzewqx') == 'jzewqx'",
        "small_test_cases": "\nsolution = Solution()\nassert solution.smallestSubsequence(\"bcabc\") == \"abc\"\nassert solution.smallestSubsequence(\"cbacdcbc\") == \"acdb\"\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Medium"
    },
    {
        "problem_idx": 2141,
        "task_name": "Maximum Running Time of N Computers",
        "description": "\n\n<p>You have <code>n</code> computers. You are given the integer <code>n</code> and a <strong>0-indexed</strong> integer array <code>batteries</code> where the <code>i<sup>th</sup></code> battery can <strong>run</strong> a computer for <code>batteries[i]</code> minutes. You are interested in running <strong>all</strong> <code>n</code> computers <strong>simultaneously</strong> using the given batteries.</p>\n\n<p>Initially, you can insert <strong>at most one battery</strong> into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery <strong>any number of times</strong>. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.</p>\n\n<p>Note that the batteries cannot be recharged.</p>\n\n<p>Return <em>the <strong>maximum</strong> number of minutes you can run all the </em><code>n</code><em> computers simultaneously.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example1-fit.png\" style=\"width: 762px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> n = 2, batteries = [3,3,3]\n<strong>Output:</strong> 4\n<strong>Explanation:</strong> \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example2.png\" style=\"width: 629px; height: 150px;\" />\n<pre>\n<strong>Input:</strong> n = 2, batteries = [1,1,1,1]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= n &lt;= batteries.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= batteries[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou have `n` computers. You are given the integer `n` and a **0-indexed** integer array `batteries` where the `ith` battery can **run** a computer for `batteries[i]` minutes. You are interested in running **all** `n` computers **simultaneously** using the given batteries.\n\n\nInitially, you can insert **at most one battery** into each computer. After that and at any integer time moment, you can remove a battery from a computer and insert another battery **any number of times**. The inserted battery can be a totally new battery or a battery from another computer. You may assume that the removing and inserting processes take no time.\n\n\nNote that the batteries cannot be recharged.\n\n\nReturn *the **maximum** number of minutes you can run all the* `n` *computers simultaneously.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example1-fit.png)\n\n```\n\n**Input:** n = 2, batteries = [3,3,3]\n**Output:** 4\n**Explanation:** \nInitially, insert battery 0 into the first computer and battery 1 into the second computer.\nAfter two minutes, remove battery 1 from the second computer and insert battery 2 instead. Note that battery 1 can still run for one minute.\nAt the end of the third minute, battery 0 is drained, and you need to remove it from the first computer and insert battery 1 instead.\nBy the end of the fourth minute, battery 1 is also drained, and the first computer is no longer running.\nWe can run the two computers simultaneously for at most 4 minutes, so we return 4.\n\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2141.Maximum%20Running%20Time%20of%20N%20Computers/images/example2.png)\n\n```\n\n**Input:** n = 2, batteries = [1,1,1,1]\n**Output:** 2\n**Explanation:** \nInitially, insert battery 0 into the first computer and battery 2 into the second computer. \nAfter one minute, battery 0 and battery 2 are drained so you need to remove them and insert battery 1 into the first computer and battery 3 into the second computer. \nAfter another minute, battery 1 and battery 3 are also drained so the first and second computers are no longer running.\nWe can run the two computers simultaneously for at most 2 minutes, so we return 2.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= n <= batteries.length <= 105`\n* `1 <= batteries[i] <= 109`\n\n\n",
        "canonical_solution": "class Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        l, r = 0, sum(batteries)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(min(x, mid) for x in batteries) >= n * mid:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def maxRunTime(self, n: int, batteries: List[int]) -> int:\n        l, r = 0, sum(batteries)\n        while l < r:\n            mid = (l + r + 1) >> 1\n            if sum(min(x, mid) for x in batteries) >= n * mid:\n                l = mid\n            else:\n                r = mid - 1\n        return l\n\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate a random number of computers\n    n = random.randint(1, 11)\n    \n    # Generate a random list of batteries with length n\n    batteries = random.sample(range(1, 101), n)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.maxRunTime(n, batteries)\n\n    return n, batteries, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        n, batteries, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.maxRunTime(n, batteries) == expected_result\n        print(f\"assert solution.maxRunTime({n}, {batteries}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.maxRunTime({n}, {batteries}) == {expected_result}\")\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.maxRunTime(5, [39, 3, 24, 2, 1]) == 1\nassert solution.maxRunTime(4, [96, 36, 27, 100]) == 27\nassert solution.maxRunTime(3, [5, 77, 37]) == 5\nassert solution.maxRunTime(7, [34, 57, 77, 30, 62, 58, 26]) == 26\nassert solution.maxRunTime(1, [16]) == 16\nassert solution.maxRunTime(5, [31, 51, 100, 82, 36]) == 31\nassert solution.maxRunTime(3, [4, 41, 10]) == 4\nassert solution.maxRunTime(11, [58, 82, 6, 2, 14, 74, 100, 94, 73, 55, 95]) == 2\nassert solution.maxRunTime(11, [21, 83, 51, 72, 55, 64, 63, 41, 100, 12, 22]) == 12\nassert solution.maxRunTime(5, [21, 57, 43, 58, 24]) == 21\nassert solution.maxRunTime(9, [89, 65, 74, 11, 13, 90, 27, 99, 14]) == 11\nassert solution.maxRunTime(9, [46, 78, 58, 45, 95, 88, 12, 73, 29]) == 12\nassert solution.maxRunTime(5, [30, 91, 68, 97, 8]) == 8\nassert solution.maxRunTime(11, [23, 75, 5, 55, 60, 41, 4, 13, 84, 54, 67]) == 4\nassert solution.maxRunTime(9, [84, 76, 95, 67, 24, 64, 91, 14, 16]) == 14\nassert solution.maxRunTime(6, [70, 24, 2, 71, 84, 49]) == 2\nassert solution.maxRunTime(4, [63, 31, 86, 20]) == 20\nassert solution.maxRunTime(6, [39, 2, 20, 76, 99, 51]) == 2\nassert solution.maxRunTime(1, [39]) == 39\nassert solution.maxRunTime(1, [35]) == 35\nassert solution.maxRunTime(6, [78, 99, 83, 3, 80, 49]) == 3\nassert solution.maxRunTime(6, [82, 80, 85, 30, 40, 50]) == 30\nassert solution.maxRunTime(6, [58, 24, 25, 43, 99, 33]) == 24\nassert solution.maxRunTime(5, [29, 90, 100, 25, 51]) == 25\nassert solution.maxRunTime(7, [64, 92, 16, 22, 35, 69, 8]) == 8\nassert solution.maxRunTime(5, [97, 99, 50, 100, 46]) == 46\nassert solution.maxRunTime(10, [90, 73, 17, 13, 3, 77, 38, 98, 2, 93]) == 2\nassert solution.maxRunTime(11, [18, 86, 34, 88, 6, 77, 98, 12, 31, 24, 58]) == 6\nassert solution.maxRunTime(3, [37, 88, 75]) == 37\nassert solution.maxRunTime(5, [69, 82, 62, 88, 55]) == 55\nassert solution.maxRunTime(11, [84, 43, 71, 81, 21, 31, 90, 30, 7, 26, 37]) == 7\nassert solution.maxRunTime(7, [75, 10, 78, 81, 19, 45, 16]) == 10\nassert solution.maxRunTime(5, [16, 96, 30, 15, 6]) == 6\nassert solution.maxRunTime(6, [10, 43, 87, 39, 88, 19]) == 10\nassert solution.maxRunTime(8, [90, 79, 56, 4, 37, 97, 46, 21]) == 4\nassert solution.maxRunTime(9, [22, 20, 7, 93, 98, 30, 76, 27, 44]) == 7\nassert solution.maxRunTime(1, [11]) == 11\nassert solution.maxRunTime(3, [100, 10, 20]) == 10\nassert solution.maxRunTime(8, [60, 39, 57, 9, 41, 54, 72, 42]) == 9\nassert solution.maxRunTime(7, [5, 55, 86, 63, 68, 27, 79]) == 5\nassert solution.maxRunTime(8, [79, 45, 51, 36, 85, 42, 21, 69]) == 21\nassert solution.maxRunTime(10, [79, 29, 30, 64, 15, 35, 89, 19, 60, 92]) == 15\nassert solution.maxRunTime(7, [90, 95, 48, 3, 12, 9, 70]) == 3\nassert solution.maxRunTime(8, [82, 45, 44, 67, 73, 98, 1, 40]) == 1\nassert solution.maxRunTime(8, [35, 93, 78, 3, 92, 57, 13, 97]) == 3\nassert solution.maxRunTime(4, [47, 63, 2, 41]) == 2\nassert solution.maxRunTime(3, [28, 76, 13]) == 13\nassert solution.maxRunTime(11, [77, 61, 95, 42, 45, 17, 88, 70, 11, 87, 82]) == 11\nassert solution.maxRunTime(10, [7, 2, 11, 89, 20, 17, 58, 75, 14, 59]) == 2\nassert solution.maxRunTime(3, [24, 30, 87]) == 24\nassert solution.maxRunTime(5, [42, 38, 19, 43, 14]) == 14\nassert solution.maxRunTime(1, [52]) == 52\nassert solution.maxRunTime(9, [81, 46, 53, 58, 44, 3, 52, 37, 65]) == 3\nassert solution.maxRunTime(9, [72, 97, 50, 49, 23, 21, 10, 59, 60]) == 10\nassert solution.maxRunTime(5, [80, 90, 47, 77, 62]) == 47\nassert solution.maxRunTime(9, [19, 92, 95, 11, 29, 88, 74, 16, 15]) == 11\nassert solution.maxRunTime(6, [4, 84, 45, 19, 14, 79]) == 4\nassert solution.maxRunTime(11, [6, 22, 71, 94, 16, 91, 76, 34, 46, 53, 39]) == 6\nassert solution.maxRunTime(11, [69, 78, 59, 56, 86, 28, 88, 34, 13, 55, 1]) == 1\nassert solution.maxRunTime(8, [63, 21, 65, 42, 25, 40, 7, 56]) == 7\nassert solution.maxRunTime(1, [70]) == 70\nassert solution.maxRunTime(8, [15, 33, 78, 98, 71, 29, 22, 52]) == 15\nassert solution.maxRunTime(2, [13, 56]) == 13\nassert solution.maxRunTime(1, [6]) == 6\nassert solution.maxRunTime(7, [45, 86, 60, 39, 93, 9, 46]) == 9\nassert solution.maxRunTime(5, [31, 54, 9, 45, 63]) == 9\nassert solution.maxRunTime(11, [32, 20, 78, 13, 69, 15, 14, 52, 61, 39, 84]) == 13\nassert solution.maxRunTime(8, [8, 66, 15, 88, 23, 63, 40, 17]) == 8\nassert solution.maxRunTime(3, [22, 36, 41]) == 22\nassert solution.maxRunTime(5, [94, 84, 10, 32, 1]) == 1\nassert solution.maxRunTime(11, [66, 92, 28, 58, 63, 62, 95, 25, 7, 20, 77]) == 7\nassert solution.maxRunTime(2, [70, 97]) == 70\nassert solution.maxRunTime(1, [86]) == 86\nassert solution.maxRunTime(10, [72, 88, 71, 11, 38, 36, 57, 60, 45, 100]) == 11\nassert solution.maxRunTime(1, [80]) == 80\nassert solution.maxRunTime(8, [97, 84, 55, 62, 73, 80, 79, 51]) == 51\nassert solution.maxRunTime(8, [34, 98, 76, 96, 22, 23, 89, 79]) == 22\nassert solution.maxRunTime(7, [15, 49, 59, 69, 26, 2, 65]) == 2\nassert solution.maxRunTime(10, [44, 37, 96, 91, 98, 48, 1, 36, 9, 3]) == 1\nassert solution.maxRunTime(6, [10, 91, 54, 42, 87, 89]) == 10\nassert solution.maxRunTime(6, [90, 86, 7, 18, 73, 21]) == 7\nassert solution.maxRunTime(1, [55]) == 55\nassert solution.maxRunTime(1, [85]) == 85\nassert solution.maxRunTime(9, [21, 47, 99, 87, 39, 55, 68, 5, 4]) == 4\nassert solution.maxRunTime(4, [99, 83, 37, 92]) == 37\nassert solution.maxRunTime(5, [81, 19, 25, 93, 54]) == 19\nassert solution.maxRunTime(6, [17, 97, 60, 33, 72, 13]) == 13\nassert solution.maxRunTime(3, [64, 72, 60]) == 60\nassert solution.maxRunTime(6, [77, 54, 42, 95, 85, 75]) == 42\nassert solution.maxRunTime(8, [90, 23, 37, 42, 27, 61, 4, 99]) == 4\nassert solution.maxRunTime(3, [80, 3, 54]) == 3\nassert solution.maxRunTime(2, [57, 32]) == 32\nassert solution.maxRunTime(8, [7, 70, 96, 92, 20, 13, 2, 43]) == 2\nassert solution.maxRunTime(6, [86, 31, 12, 52, 43, 45]) == 12\nassert solution.maxRunTime(1, [83]) == 83\nassert solution.maxRunTime(8, [58, 63, 27, 76, 69, 34, 45, 25]) == 25\nassert solution.maxRunTime(8, [31, 78, 63, 59, 41, 3, 30, 55]) == 3\nassert solution.maxRunTime(8, [42, 61, 70, 66, 57, 17, 81, 22]) == 17\nassert solution.maxRunTime(5, [99, 6, 35, 50, 95]) == 6\nassert solution.maxRunTime(4, [25, 42, 87, 40]) == 25",
        "small_test_cases": "\nsolution = Solution()\nassert solution.maxRunTime(2, [3,3,3]) == 4\nassert solution.maxRunTime(2, [1,1,1,1]) == 2\n",
        "algorithms": [
            "greedy",
            "binary_search",
            "sorting"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 1713,
        "task_name": "Minimum Operations to Make a Subsequence",
        "description": "\n\n<p>You are given an array <code>target</code> that consists of <strong>distinct</strong> integers and another integer array <code>arr</code> that <strong>can</strong> have duplicates.</p>\n\n<p>In one operation, you can insert any integer at any position in <code>arr</code>. For example, if <code>arr = [1,4,1,2]</code>, you can add <code>3</code> in the middle and make it <code>[1,4,<u>3</u>,1,2]</code>. Note that you can insert the integer at the very beginning or end of the array.</p>\n\n<p>Return <em>the <strong>minimum</strong> number of operations needed to make </em><code>target</code><em> a <strong>subsequence</strong> of </em><code>arr</code><em>.</em></p>\n\n<p>A <strong>subsequence</strong> of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements&#39; relative order. For example, <code>[2,7,4]</code> is a subsequence of <code>[4,<u>2</u>,3,<u>7</u>,2,1,<u>4</u>]</code> (the underlined elements), while <code>[2,4,2]</code> is not.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = [5,1,3], <code>arr</code> = [9,4,2,3,4]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> You can add 5 and 1 in such a way that makes <code>arr</code> = [<u>5</u>,9,4,<u>1</u>,2,3,4], then target will be a subsequence of <code>arr</code>.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> target = [6,4,8,1,3,2], <code>arr</code> = [4,7,6,2,3,8,6,1]\n<strong>Output:</strong> 3\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= target.length, arr.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= target[i], arr[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>target</code> contains no duplicates.</li>\n</ul>\n\n",
        "markdown_description": "\nYou are given an array `target` that consists of **distinct** integers and another integer array `arr` that **can** have duplicates.\n\n\nIn one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.\n\n\nReturn *the **minimum** number of operations needed to make* `target` *a **subsequence** of* `arr`*.*\n\n\nA **subsequence** of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** target = [5,1,3], arr = [9,4,2,3,4]\n**Output:** 2\n**Explanation:** You can add 5 and 1 in such a way that makes arr = [5,9,4,1,2,3,4], then target will be a subsequence of arr.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** target = [6,4,8,1,3,2], arr = [4,7,6,2,3,8,6,1]\n**Output:** 3\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= target.length, arr.length <= 105`\n* `1 <= target[i], arr[i] <= 109`\n* `target` contains no duplicates.\n\n\n",
        "canonical_solution": "class BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, val):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], val)\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x:\n            s = max(s, self.c[x])\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def minOperations(self, target: List[int], arr: List[int]) -> int:\n        d = {v: i for i, v in enumerate(target)}\n        nums = [d[v] for v in arr if v in d]\n        return len(target) - self.lengthOfLIS(nums)\n\n    def lengthOfLIS(self, nums):\n        s = sorted(set(nums))\n        m = {v: i for i, v in enumerate(s, 1)}\n        tree = BinaryIndexedTree(len(m))\n        ans = 0\n        for v in nums:\n            x = m[v]\n            t = tree.query(x - 1) + 1\n            ans = max(ans, t)\n            tree.update(x, t)\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass BinaryIndexedTree:\n    def __init__(self, n):\n        self.n = n\n        self.c = [0] * (n + 1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, x, val):\n        while x <= self.n:\n            self.c[x] = max(self.c[x], val)\n            x += BinaryIndexedTree.lowbit(x)\n\n    def query(self, x):\n        s = 0\n        while x:\n            s = max(s, self.c[x])\n            x -= BinaryIndexedTree.lowbit(x)\n        return s\n\n\nclass Solution:\n    def minOperations(self, target: List[int], arr: List[int]) -> int:\n        d = {v: i for i, v in enumerate(target)}\n        nums = [d[v] for v in arr if v in d]\n        return len(target) - self.lengthOfLIS(nums)\n\n    def lengthOfLIS(self, nums):\n        s = sorted(set(nums))\n        m = {v: i for i, v in enumerate(s, 1)}\n        tree = BinaryIndexedTree(len(m))\n        ans = 0\n        for v in nums:\n            x = m[v]\n            t = tree.query(x - 1) + 1\n            ans = max(ans, t)\n            tree.update(x, t)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate target list\n    target = random.sample(range(1, 101), random.randint(2, 10))\n\n    # Generate arr list\n    arr = random.choices(target + random.sample(range(1, 101), random.randint(1, 10)), k=random.randint(1, 20))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minOperations(target, arr)\n\n    return target, arr, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        target, arr, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minOperations(target, arr) == expected_result\n        print(f\"assert solution.minOperations({target}, {arr}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.minOperations({target}, {arr}) == {expected_result}\") \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minOperations([44, 79, 89, 49, 3, 55], [79, 49, 44, 79, 79, 89, 96, 44, 44, 89, 89]) == 3\nassert solution.minOperations([8, 70, 96, 12, 27, 37], [49, 27, 70, 96, 68, 27, 37, 70, 68, 8, 96, 31]) == 2\nassert solution.minOperations([83, 38], [65]) == 2\nassert solution.minOperations([88, 29, 64, 30, 69, 50], [64, 50, 64]) == 4\nassert solution.minOperations([82, 30, 52, 10, 1, 49], [72, 72, 30, 52, 22, 39, 53, 82, 39, 30, 91]) == 4\nassert solution.minOperations([56, 10, 94, 86, 78, 24], [56, 78, 42, 94, 56, 23, 24, 78, 94, 56, 86, 57, 22, 78, 42, 22, 23]) == 2\nassert solution.minOperations([66, 16, 86, 7, 19, 45, 99], [72, 19, 66]) == 6\nassert solution.minOperations([30, 38, 45], [45, 45]) == 2\nassert solution.minOperations([49, 87, 46, 69, 9, 95, 93, 27, 31], [27, 46, 27, 27, 46, 18, 93, 46, 69, 18]) == 7\nassert solution.minOperations([17, 86, 52, 48, 60, 22, 77, 43, 89, 41], [89, 19, 48, 7, 9, 9, 43, 89, 22, 60]) == 7\nassert solution.minOperations([81, 24, 15, 22, 78], [37, 37, 15, 37, 24, 15, 22, 24, 78, 81, 22, 38, 22, 24, 78, 22, 38, 24, 22, 22]) == 1\nassert solution.minOperations([66, 93, 76, 3, 1, 89, 70], [66, 89]) == 5\nassert solution.minOperations([66, 20], [20, 26, 20, 26, 66]) == 1\nassert solution.minOperations([76, 94, 48], [92, 76, 76, 48, 21, 76, 92, 48, 92, 21, 48, 94, 76, 48, 81]) == 0\nassert solution.minOperations([80, 25, 58, 6, 47, 60, 30], [6, 22, 6, 6, 80, 6, 47, 47, 22, 47, 25, 30, 30, 58, 47, 80]) == 3\nassert solution.minOperations([87, 86, 45, 40, 97, 81], [45, 45, 20]) == 5\nassert solution.minOperations([56, 71, 87], [71, 71, 71, 87, 34, 71, 56, 71]) == 1\nassert solution.minOperations([60, 35, 17, 28, 44, 48, 6, 84, 85], [48, 79, 28, 85, 30, 6, 96, 28]) == 7\nassert solution.minOperations([48, 59, 61, 99, 49, 54, 11, 57], [59, 25, 61, 48, 99, 91, 26]) == 5\nassert solution.minOperations([36, 70, 26, 94, 34, 77, 35, 64, 28, 79], [34, 24, 64, 67, 79, 19]) == 7\nassert solution.minOperations([35, 59, 5, 53, 15, 28, 32], [76, 15, 41, 83, 35, 80, 53, 100, 35, 53, 15]) == 4\nassert solution.minOperations([83, 3, 35, 12, 52, 31], [60, 31, 76, 51, 60, 23, 3, 60, 99, 60, 51, 51, 60]) == 5\nassert solution.minOperations([76, 3, 39, 33, 21], [76, 24, 29, 24, 15, 18, 21, 3, 29, 21, 76, 29, 39, 33, 39, 24, 75, 3, 76, 75]) == 1\nassert solution.minOperations([54, 85, 32, 68, 91, 27, 95], [3, 85, 54, 53, 85, 95, 53, 54, 54, 48, 15, 48, 48, 27, 15, 66, 53]) == 4\nassert solution.minOperations([18, 12, 92, 61], [79, 92, 10, 10, 25, 18, 25, 61, 79, 68, 18, 25, 39, 12, 79, 79, 1, 39, 10]) == 2\nassert solution.minOperations([48, 37, 1, 16, 27, 45, 99, 12, 58], [12, 95, 45, 9]) == 8\nassert solution.minOperations([86, 37, 92, 14, 70, 59, 97, 64, 55], [92, 13, 55, 40, 92, 84, 30, 14, 30]) == 7\nassert solution.minOperations([53, 46], [53, 12, 1, 80, 12, 80, 23, 80]) == 1\nassert solution.minOperations([78, 58, 20, 28, 53], [81, 53, 20, 13]) == 4\nassert solution.minOperations([78, 83, 85, 77, 84, 43, 89, 39], [32, 78, 33, 85, 38, 43, 78]) == 5\nassert solution.minOperations([26, 55, 28, 84, 63, 96, 48, 17, 93, 46], [96, 22, 49, 5, 84]) == 9\nassert solution.minOperations([20, 50, 89, 80, 73, 78, 6, 38, 37, 26], [37, 58, 26, 20, 99, 78, 6, 25, 25, 38]) == 6\nassert solution.minOperations([26, 99, 87, 42], [68, 66, 66, 26, 99]) == 2\nassert solution.minOperations([66, 62], [84, 84, 11, 66, 11, 62, 62, 62, 62, 11, 62, 62, 62, 84, 84, 66, 62]) == 0\nassert solution.minOperations([41, 3], [94, 62, 62]) == 2\nassert solution.minOperations([33, 52, 28, 32, 18, 96, 78, 79, 46], [27]) == 9\nassert solution.minOperations([58, 32, 27, 48], [27, 23, 27, 97, 97, 97, 97, 23, 58, 97, 97, 27, 58, 48, 27]) == 1\nassert solution.minOperations([81, 48, 40, 78, 29], [27, 40, 81, 90, 81, 44, 27, 48, 78, 47]) == 2\nassert solution.minOperations([80, 62, 34], [34, 62, 59, 8, 8, 62, 80, 34, 59, 62, 34, 62, 43, 34, 8, 34, 34, 43, 59, 8]) == 0\nassert solution.minOperations([87, 78, 48, 28], [87, 76, 78, 19, 11, 48, 19, 48, 78, 87, 87, 87, 28, 28, 78, 87, 78, 48, 28, 87]) == 0\nassert solution.minOperations([38, 92, 9, 64, 75, 50, 44, 82], [44, 64, 92, 44, 92, 82, 9]) == 5\nassert solution.minOperations([97, 80], [80, 80, 97, 35, 35, 97, 80, 8, 1, 35, 71, 97, 63, 71, 80, 8]) == 0\nassert solution.minOperations([6, 2, 88, 20, 30, 85, 13, 5], [26, 31, 26, 6, 73, 88, 5, 20, 27, 26, 13, 13, 2, 6, 30]) == 4\nassert solution.minOperations([4, 62, 53, 68, 61, 7, 69, 82, 2, 44], [96, 39]) == 10\nassert solution.minOperations([36, 25, 100, 24, 97, 37, 35, 5], [27, 51, 87, 27, 47, 27, 51]) == 8\nassert solution.minOperations([41, 35, 29], [78, 20, 29, 23, 30, 55, 90, 90, 23, 67, 30, 30, 29]) == 2\nassert solution.minOperations([72, 88, 7, 64, 3, 19, 23, 53], [88, 53, 72, 72, 53, 7]) == 6\nassert solution.minOperations([20, 49, 7, 40, 50, 32, 65, 99, 92, 87], [7, 87, 32, 80, 49, 99, 87, 20, 50, 92, 7, 20, 7, 80, 87, 32, 65, 20, 40, 40]) == 5\nassert solution.minOperations([64, 49, 85], [20, 95, 21, 85]) == 2\nassert solution.minOperations([35, 71, 97, 62, 40, 42, 2], [62, 42, 97, 97, 27, 35, 29, 62, 6, 62, 27, 39]) == 5\nassert solution.minOperations([11, 37, 8], [35, 90, 8, 17, 37, 32, 90, 32, 37, 35, 11, 37, 35, 8, 35, 37]) == 0\nassert solution.minOperations([50, 92, 100, 79, 84, 25, 51, 61, 37], [18, 87, 37, 85, 73, 74, 76, 18, 100, 53, 76, 73, 73, 76, 37]) == 7\nassert solution.minOperations([15, 72, 92, 28, 63, 76, 78, 97, 2, 5], [63, 97, 2, 79, 72, 78, 2, 2, 79, 78, 92, 72, 72, 79, 5, 63, 5, 15, 28, 78]) == 6\nassert solution.minOperations([46, 96, 10, 83, 75, 34, 9, 91, 29, 15], [83, 46, 42, 42, 15, 91, 86, 34, 2, 75, 57, 2, 34, 29, 9, 83, 64]) == 6\nassert solution.minOperations([76, 18], [76, 100, 18, 97, 100, 18, 97, 97, 100, 100, 97, 97, 18, 24, 100, 18, 97]) == 0\nassert solution.minOperations([57, 4, 47, 34, 96, 8, 62, 84], [35]) == 8\nassert solution.minOperations([68, 89, 44, 30, 21, 76, 99, 35, 95, 38], [21, 95, 30, 77, 38, 46, 21, 44, 68, 26, 68, 30]) == 7\nassert solution.minOperations([45, 69], [69, 69, 82, 45, 69]) == 0\nassert solution.minOperations([67, 7, 49, 92, 35, 89, 57, 81, 63, 56], [7, 56, 49, 92, 41, 41, 7, 81, 7, 56, 81, 41, 67]) == 5\nassert solution.minOperations([94, 2], [2, 29, 29, 94, 94, 91, 2, 29, 91, 92]) == 0\nassert solution.minOperations([38, 19, 75, 80], [75, 59, 58, 93, 75, 38, 42, 80, 80, 75]) == 2\nassert solution.minOperations([17, 54, 28], [31, 69, 28, 17, 80, 28, 31, 28, 31, 17, 80, 5, 54]) == 1\nassert solution.minOperations([7, 79, 19, 9, 14, 23, 96, 69, 52], [96, 52, 2, 23, 52, 14, 23, 68, 79, 70, 69, 52, 51, 70, 96, 52, 23, 7, 19]) == 5\nassert solution.minOperations([55, 79], [75, 79, 75, 1, 32, 98, 55, 32, 1, 79, 58, 1, 75]) == 0\nassert solution.minOperations([78, 21, 9, 23, 96], [21, 23, 44, 44, 23, 44, 96]) == 2\nassert solution.minOperations([57, 11, 12, 63, 75], [58, 58, 41, 73, 41, 76, 29, 73]) == 5\nassert solution.minOperations([100, 25, 51, 57, 28, 71, 99, 65, 75], [65]) == 8\nassert solution.minOperations([53, 65, 66, 43, 7, 98, 12, 28, 74], [98, 65, 12, 98]) == 7\nassert solution.minOperations([76, 36, 61, 9, 4, 84, 83, 66, 35], [87, 97, 86, 86, 19, 97, 4]) == 8\nassert solution.minOperations([45, 97, 96, 72], [45, 97, 51]) == 2\nassert solution.minOperations([83, 78], [78, 6, 98, 43, 78, 6, 43, 45, 76, 98]) == 1\nassert solution.minOperations([12, 9], [43, 9]) == 1\nassert solution.minOperations([47, 71, 4, 32, 55, 72], [79, 32, 79, 55, 28, 71, 31, 6, 32, 79, 79, 6, 30]) == 4\nassert solution.minOperations([20, 7, 33, 64, 36, 54, 31], [84, 31]) == 6\nassert solution.minOperations([2, 87, 44, 65, 47, 99, 91], [94, 87, 99, 2, 47, 99, 99, 94, 75, 44, 91, 66, 91, 2, 2]) == 3\nassert solution.minOperations([56, 70, 22, 30, 28, 99, 63], [99, 56, 95, 22, 26, 65]) == 5\nassert solution.minOperations([57, 61, 12, 72, 58, 96, 21, 91, 51], [57, 100, 65]) == 8\nassert solution.minOperations([39, 61, 68, 12, 22, 51, 14, 77, 6], [95, 59, 68, 59, 85, 6, 22, 14]) == 6\nassert solution.minOperations([53, 72, 30, 50, 23], [30, 53, 72, 30, 52, 30, 89, 52, 89, 8, 89]) == 2\nassert solution.minOperations([72, 45, 84, 13, 15, 97, 30], [84, 13, 15, 84, 97, 45, 15, 84, 13, 45, 45, 35, 84, 72, 45, 45, 72, 72, 15, 13]) == 3\nassert solution.minOperations([22, 66, 35, 95, 67, 57, 11, 60], [90, 66, 60, 66, 11, 47, 11, 90, 44, 57, 95, 44, 67, 22, 95]) == 5\nassert solution.minOperations([4, 62, 6, 2, 100, 99, 64, 72, 10, 14], [71, 97, 99, 54, 99, 54, 99, 20, 71, 6, 85, 20, 62]) == 9\nassert solution.minOperations([85, 37, 11, 53, 94, 93, 10, 56, 68], [68, 17, 94]) == 8\nassert solution.minOperations([25, 70, 98, 35, 18, 99, 31, 19, 44], [56, 46, 79, 67, 46, 99, 46, 76, 99]) == 8\nassert solution.minOperations([36, 100, 21], [27, 21, 36]) == 2\nassert solution.minOperations([8, 56, 46, 24], [46, 4, 24, 20, 8, 20, 24, 24, 46, 46, 56, 97, 4, 20, 92]) == 2\nassert solution.minOperations([32, 97, 50, 65, 46, 7, 47, 63], [94, 47, 66, 22, 63, 63, 32, 70, 32, 25, 47, 76, 25, 92, 65, 92, 97, 63, 63]) == 5\nassert solution.minOperations([98, 3, 9, 42, 75, 38, 65], [9, 42, 75, 38, 42, 20, 50, 50]) == 3\nassert solution.minOperations([5, 58, 93, 83], [77, 86, 86, 84, 71, 28, 83]) == 3\nassert solution.minOperations([45, 83, 61], [28, 83, 19, 61, 28, 45, 19, 81, 28]) == 1\nassert solution.minOperations([58, 34, 50, 31, 11, 59, 38, 89, 36, 17], [58, 58, 38, 18, 11, 89, 17, 11, 74, 48, 11, 55, 50, 14, 11, 50, 55, 31, 38, 38]) == 6\nassert solution.minOperations([44, 85, 5, 45, 46, 58, 52, 91, 35, 51], [87, 82, 87, 63, 47, 44, 16, 69, 72, 69, 82]) == 9\nassert solution.minOperations([38, 89, 31, 99, 4, 13, 16], [6, 99, 13, 6, 16, 6, 31, 89, 100]) == 4\nassert solution.minOperations([66, 55], [13, 55, 13, 96, 28, 49, 22, 85, 72]) == 1\nassert solution.minOperations([7, 92, 86, 4], [86, 75, 86, 16, 86, 4, 7]) == 2\nassert solution.minOperations([78, 35, 63], [63, 48, 48, 78, 78, 78, 39, 35, 35, 81, 35, 81, 78, 81, 78, 48]) == 1\nassert solution.minOperations([71, 68, 7, 31, 40, 82, 23], [7, 54, 75, 40, 82, 71, 7, 75, 82, 40, 23, 75, 54, 7]) == 3\nassert solution.minOperations([60, 6, 95, 42, 77, 44, 48, 45, 78], [42, 78, 77, 60, 95, 95, 48, 6, 95, 78, 95, 48, 42, 42, 78, 60]) == 4\nassert solution.minOperations([96, 31, 18, 51, 20, 58], [20, 69, 51, 11, 30, 18, 18, 31, 51, 69, 96, 50, 38, 38]) == 4\nassert solution.minOperations([47, 23, 79, 33, 44, 75, 94, 5, 14], [44, 14, 63, 75, 5, 47, 14, 44, 47, 14, 63, 63, 79, 23, 5, 47, 44, 79, 33, 75]) == 4",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minOperations([5,1,3], [9,4,2,3,4]) == 2\nassert solution.minOperations([6,4,8,1,3,2], [4,7,6,2,3,8,6,1]) == 3\n",
        "algorithms": [
            "greedy",
            "binary_search"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 936,
        "task_name": "Stamping The Sequence",
        "description": "\n\n<p>You are given two strings <code>stamp</code> and <code>target</code>. Initially, there is a string <code>s</code> of length <code>target.length</code> with all <code>s[i] == &#39;?&#39;</code>.</p>\n\n<p>In one turn, you can place <code>stamp</code> over <code>s</code> and replace every letter in the <code>s</code> with the corresponding letter from <code>stamp</code>.</p>\n\n<ul>\n\t<li>For example, if <code>stamp = &quot;abc&quot;</code> and <code>target = &quot;abcba&quot;</code>, then <code>s</code> is <code>&quot;?????&quot;</code> initially. In one turn you can:\n    <ul>\n    \t<li>place <code>stamp</code> at index <code>0</code> of <code>s</code> to obtain <code>&quot;abc??&quot;</code>,</li>\n    \t<li>place <code>stamp</code> at index <code>1</code> of <code>s</code> to obtain <code>&quot;?abc?&quot;</code>, or</li>\n    \t<li>place <code>stamp</code> at index <code>2</code> of <code>s</code> to obtain <code>&quot;??abc&quot;</code>.</li>\n    </ul>\n    Note that <code>stamp</code> must be fully contained in the boundaries of <code>s</code> in order to stamp (i.e., you cannot place <code>stamp</code> at index <code>3</code> of <code>s</code>).</li>\n</ul>\n\n<p>We want to convert <code>s</code> to <code>target</code> using <strong>at most</strong> <code>10 * target.length</code> turns.</p>\n\n<p>Return <em>an array of the index of the left-most letter being stamped at each turn</em>. If we cannot obtain <code>target</code> from <code>s</code> within <code>10 * target.length</code> turns, return an empty array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abc&quot;, target = &quot;ababc&quot;\n<strong>Output:</strong> [0,2]\n<strong>Explanation:</strong> Initially s = &quot;?????&quot;.\n- Place stamp at index 0 to get &quot;abc??&quot;.\n- Place stamp at index 2 to get &quot;ababc&quot;.\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> stamp = &quot;abca&quot;, target = &quot;aabcaca&quot;\n<strong>Output:</strong> [3,0,1]\n<strong>Explanation:</strong> Initially s = &quot;???????&quot;.\n- Place stamp at index 3 to get &quot;???abca&quot;.\n- Place stamp at index 0 to get &quot;abcabca&quot;.\n- Place stamp at index 1 to get &quot;aabcaca&quot;.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= stamp.length &lt;= target.length &lt;= 1000</code></li>\n\t<li><code>stamp</code> and <code>target</code> consist of lowercase English letters.</li>\n</ul>\n\n",
        "markdown_description": "\nYou are given two strings `stamp` and `target`. Initially, there is a string `s` of length `target.length` with all `s[i] == '?'`.\n\n\nIn one turn, you can place `stamp` over `s` and replace every letter in the `s` with the corresponding letter from `stamp`.\n\n\n* For example, if `stamp = \"abc\"` and `target = \"abcba\"`, then `s` is `\"?????\"` initially. In one turn you can:\n\t+ place `stamp` at index `0` of `s` to obtain `\"abc??\"`,\n\t+ place `stamp` at index `1` of `s` to obtain `\"?abc?\"`, or\n\t+ place `stamp` at index `2` of `s` to obtain `\"??abc\"`.\n Note that `stamp` must be fully contained in the boundaries of `s` in order to stamp (i.e., you cannot place `stamp` at index `3` of `s`).\n\n\nWe want to convert `s` to `target` using **at most** `10 * target.length` turns.\n\n\nReturn *an array of the index of the left-most letter being stamped at each turn*. If we cannot obtain `target` from `s` within `10 * target.length` turns, return an empty array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** stamp = \"abc\", target = \"ababc\"\n**Output:** [0,2]\n**Explanation:** Initially s = \"?????\".\n- Place stamp at index 0 to get \"abc??\".\n- Place stamp at index 2 to get \"ababc\".\n[1,0,2] would also be accepted as an answer, as well as some other answers.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** stamp = \"abca\", target = \"aabcaca\"\n**Output:** [3,0,1]\n**Explanation:** Initially s = \"???????\".\n- Place stamp at index 3 to get \"???abca\".\n- Place stamp at index 0 to get \"abcabca\".\n- Place stamp at index 1 to get \"aabcaca\".\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= stamp.length <= target.length <= 1000`\n* `stamp` and `target` consist of lowercase English letters.\n\n\n",
        "canonical_solution": "class Solution:\n    def movesToStamp(self, stamp: str, target: str) -> List[int]:\n        m, n = len(stamp), len(target)\n        indeg = [m] * (n - m + 1)\n        q = deque()\n        g = [[] for _ in range(n)]\n        for i in range(n - m + 1):\n            for j, c in enumerate(stamp):\n                if target[i + j] == c:\n                    indeg[i] -= 1\n                    if indeg[i] == 0:\n                        q.append(i)\n                else:\n                    g[i + j].append(i)\n        ans = []\n        vis = [False] * n\n        while q:\n            i = q.popleft()\n            ans.append(i)\n            for j in range(m):\n                if not vis[i + j]:\n                    vis[i + j] = True\n                    for k in g[i + j]:\n                        indeg[k] -= 1\n                        if indeg[k] == 0:\n                            q.append(k)\n        return ans[::-1] if all(vis) else []\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def movesToStamp(self, stamp: str, target: str):\n        m, n = len(stamp), len(target)\n        indeg = [m] * (n - m + 1)\n        q = deque()\n        g = [[] for _ in range(n)]\n        for i in range(n - m + 1):\n            for j, c in enumerate(stamp):\n                if target[i + j] == c:\n                    indeg[i] -= 1\n                    if indeg[i] == 0:\n                        q.append(i)\n                else:\n                    g[i + j].append(i)\n        ans = []\n        vis = [False] * n\n        while q:\n            i = q.popleft()\n            ans.append(i)\n            for j in range(m):\n                if not vis[i + j]:\n                    vis[i + j] = True\n                    for k in g[i + j]:\n                        indeg[k] -= 1\n                        if indeg[k] == 0:\n                            q.append(k)\n        return ans[::-1] if all(vis) else []\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random strings\n    stamp_length = random.randint(1, 10)\n    stamp = ''.join(random.choices(string.ascii_lowercase, k=stamp_length))\n    \n    target_length = random.randint(stamp_length, 10)\n    target = ''.join(random.choices(string.ascii_lowercase, k=target_length))\n\n    expected_result = solution.movesToStamp(stamp, target)\n\n    return stamp, target, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        stamp, target, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.movesToStamp(stamp, target) == expected_result\n        if len(expected_result) != 0:\n            print(f\"assert solution.movesToStamp('{stamp}', '{target}') == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.movesToStamp('{stamp}', '{target}') == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "",
        "small_test_cases": "\nsolution = Solution()\nassert solution.stampSequence(\"abc\", \"ababc\") == [0, 2]\nassert solution.stampSequence(\"abca\", \"aabcaca\") == [3, 0, 1]\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 2448,
        "task_name": "Minimum Cost to Make Array Equal",
        "description": "\n\n<p>You are given two <strong>0-indexed</strong> arrays <code>nums</code> and <code>cost</code> consisting each of <code>n</code> <strong>positive</strong> integers.</p>\n\n<p>You can do the following operation <strong>any</strong> number of times:</p>\n\n<ul>\n\t<li>Increase or decrease <strong>any</strong> element of the array <code>nums</code> by <code>1</code>.</li>\n</ul>\n\n<p>The cost of doing one operation on the <code>i<sup>th</sup></code> element is <code>cost[i]</code>.</p>\n\n<p>Return <em>the <strong>minimum</strong> total cost such that all the elements of the array </em><code>nums</code><em> become <strong>equal</strong></em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,3,5,2], cost = [2,3,1,14]\n<strong>Output:</strong> 8\n<strong>Explanation:</strong> We can make all the elements equal to 2 in the following way:\n- Increase the 0<sup>th</sup> element one time. The cost is 2.\n- Decrease the 1<sup><span style=\"font-size: 10.8333px;\">st</span></sup> element one time. The cost is 3.\n- Decrease the 2<sup>nd</sup> element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,2,2,2,2], cost = [4,2,8,1,3]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> All the elements are already equal, so no operations are needed.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == nums.length == cost.length</code></li>\n\t<li><code>1 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i], cost[i] &lt;= 10<sup>6</sup></code></li>\n\t<li>Test cases are generated in a way that the output doesn&#39;t exceed&nbsp;2<sup>53</sup>-1</li>\n</ul>\n\n",
        "markdown_description": "\nYou are given two **0-indexed** arrays `nums` and `cost` consisting each of `n` **positive** integers.\n\n\nYou can do the following operation **any** number of times:\n\n\n* Increase or decrease **any** element of the array `nums` by `1`.\n\n\nThe cost of doing one operation on the `ith` element is `cost[i]`.\n\n\nReturn *the **minimum** total cost such that all the elements of the array* `nums` *become **equal***.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [1,3,5,2], cost = [2,3,1,14]\n**Output:** 8\n**Explanation:** We can make all the elements equal to 2 in the following way:\n- Increase the 0th element one time. The cost is 2.\n- Decrease the 1st element one time. The cost is 3.\n- Decrease the 2nd element three times. The cost is 1 + 1 + 1 = 3.\nThe total cost is 2 + 3 + 3 = 8.\nIt can be shown that we cannot make the array equal with a smaller cost.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [2,2,2,2,2], cost = [4,2,8,1,3]\n**Output:** 0\n**Explanation:** All the elements are already equal, so no operations are needed.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `n == nums.length == cost.length`\n* `1 <= n <= 105`\n* `1 <= nums[i], cost[i] <= 106`\n* Test cases are generated in a way that the output doesn't exceed\u00a0253-1\n\n\n",
        "canonical_solution": "class Solution:\n    def minCost(self, nums: List[int], cost: List[int]) -> int:\n        arr = sorted(zip(nums, cost))\n        n = len(arr)\n        f = [0] * (n + 1)\n        g = [0] * (n + 1)\n        for i in range(1, n + 1):\n            a, b = arr[i - 1]\n            f[i] = f[i - 1] + a * b\n            g[i] = g[i - 1] + b\n        ans = inf\n        for i in range(1, n + 1):\n            a = arr[i - 1][0]\n            l = a * g[i - 1] - f[i - 1]\n            r = f[n] - f[i] - a * (g[n] - g[i])\n            ans = min(ans, l + r)\n        return ans\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def minCost(self, nums, cost):\n        arr = sorted(zip(nums, cost))\n        n = len(arr)\n        f = [0] * (n + 1)\n        g = [0] * (n + 1)\n        for i in range(1, n + 1):\n            a, b = arr[i - 1]\n            f[i] = f[i - 1] + a * b\n            g[i] = g[i - 1] + b\n        ans = float('inf')\n        for i in range(1, n + 1):\n            a = arr[i - 1][0]\n            l = a * g[i - 1] - f[i - 1]\n            r = f[n] - f[i] - a * (g[n] - g[i])\n            ans = min(ans, l + r)\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    \n    # Generate random numbers list\n    nums = [random.randint(1, 100) for _ in range(random.randint(1, 10))]\n    \n    # Generate random cost list\n    cost = [random.randint(1, 100) for _ in range(len(nums))]\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minCost(nums, cost)\n\n    return nums, cost, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, cost, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minCost(nums, cost) == expected_result\n        print(f\"assert solution.minCost({nums}, {cost}) == {expected_result}\")\n        test_case_generator_results.append(\"assert solution.minCost({}, {}) == {}\".format(nums, cost, expected_result))\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minCost([99, 12, 78, 54, 58, 7, 99, 3], [53, 42, 30, 45, 4, 34, 54, 48]) == 11361\nassert solution.minCost([53, 54, 99, 78, 19, 75], [6, 36, 31, 57, 84, 93]) == 6507\nassert solution.minCost([12, 58, 1, 83], [24, 37, 86, 11]) == 3275\nassert solution.minCost([45], [21]) == 0\nassert solution.minCost([100], [76]) == 0\nassert solution.minCost([85, 30, 18, 79, 55], [70, 70, 15, 63, 81]) == 5917\nassert solution.minCost([42], [13]) == 0\nassert solution.minCost([35, 10, 48, 48], [4, 39, 1, 69]) == 1534\nassert solution.minCost([43, 9, 86, 60, 44, 98, 5, 4, 27, 66], [79, 90, 25, 72, 25, 4, 22, 75, 29, 13]) == 10128\nassert solution.minCost([46, 34, 55, 49, 64, 26], [63, 43, 22, 26, 100, 42]) == 3432\nassert solution.minCost([64, 3, 58, 23, 20, 16, 57, 35], [76, 76, 75, 64, 58, 55, 99, 74]) == 11222\nassert solution.minCost([70], [59]) == 0\nassert solution.minCost([91, 65, 88, 41, 40, 64, 35, 37, 32], [56, 37, 54, 65, 56, 9, 16, 14, 20]) == 6821\nassert solution.minCost([63, 100, 24, 96, 55, 39, 100], [3, 91, 43, 68, 16, 3, 21]) == 4470\nassert solution.minCost([49, 64, 97, 46, 87, 38, 87, 9, 73, 6], [78, 23, 61, 98, 51, 1, 93, 82, 43, 62]) == 16028\nassert solution.minCost([28, 54, 95], [90, 72, 94]) == 6194\nassert solution.minCost([46, 89, 81, 82, 54, 23, 7], [47, 84, 1, 12, 96, 33, 6]) == 4984\nassert solution.minCost([39, 50, 94, 83, 58, 15], [65, 10, 61, 69, 51, 90]) == 9106\nassert solution.minCost([91, 67, 66], [8, 68, 10]) == 202\nassert solution.minCost([69, 54, 61, 22, 98, 49, 35, 63, 32], [22, 20, 10, 76, 71, 43, 89, 4, 48]) == 7707\nassert solution.minCost([80, 44, 14, 20, 45, 19, 16, 46], [56, 23, 21, 19, 63, 67, 41, 2]) == 5896\nassert solution.minCost([78, 89, 9, 84, 16, 89], [15, 77, 68, 56, 45, 98]) == 9125\nassert solution.minCost([23, 67, 95], [62, 6, 19]) == 1632\nassert solution.minCost([73, 54, 53, 94, 67, 31, 28, 27, 22], [44, 59, 76, 27, 24, 25, 92, 84, 60]) == 8594\nassert solution.minCost([93, 57, 95, 71, 39, 46, 83], [33, 28, 5, 51, 27, 95, 77]) == 5401\nassert solution.minCost([7, 53, 32], [45, 24, 39]) == 1629\nassert solution.minCost([52], [58]) == 0\nassert solution.minCost([68, 53, 86, 77, 10, 22, 37, 7], [100, 43, 24, 57, 23, 13, 66, 45]) == 8178\nassert solution.minCost([45, 13, 70, 100], [37, 77, 1, 12]) == 2285\nassert solution.minCost([35, 43, 36, 58, 88, 51, 15], [42, 30, 74, 19, 86, 22, 27]) == 5941\nassert solution.minCost([100, 96, 74, 39], [4, 35, 39, 66]) == 3184\nassert solution.minCost([19, 77, 29, 28, 48], [4, 8, 38, 59, 22]) == 901\nassert solution.minCost([27, 78], [32, 61]) == 1632\nassert solution.minCost([5, 63, 4], [66, 10, 81]) == 656\nassert solution.minCost([32, 28, 32, 2, 49, 9, 26, 73], [65, 83, 22, 71, 27, 24, 26, 96]) == 7565\nassert solution.minCost([94, 65, 52, 16, 17], [35, 63, 45, 35, 42]) == 5019\nassert solution.minCost([27, 80, 60, 4, 2], [96, 44, 13, 59, 63]) == 5693\nassert solution.minCost([24, 61, 59, 5, 28, 66, 77, 63, 10, 63], [84, 19, 16, 2, 12, 55, 82, 84, 75, 41]) == 9202\nassert solution.minCost([27, 34, 51], [61, 90, 80]) == 1787\nassert solution.minCost([11, 64, 20, 32, 27, 2, 96, 25], [46, 52, 72, 19, 59, 85, 11, 55]) == 5984\nassert solution.minCost([53], [23]) == 0\nassert solution.minCost([79, 21], [1, 32]) == 58\nassert solution.minCost([38], [9]) == 0\nassert solution.minCost([25, 26, 39, 57, 4, 94], [70, 67, 17, 91, 72, 69]) == 9388\nassert solution.minCost([46], [85]) == 0\nassert solution.minCost([3, 13, 90, 12, 98, 62, 6, 48, 5, 70], [72, 54, 78, 25, 44, 66, 65, 43, 33, 1]) == 16006\nassert solution.minCost([58, 76, 35], [98, 11, 1]) == 221\nassert solution.minCost([32, 23, 83, 82, 8, 18], [59, 46, 65, 87, 97, 25]) == 10757\nassert solution.minCost([28], [8]) == 0\nassert solution.minCost([24, 42, 29], [48, 94, 80]) == 1462\nassert solution.minCost([83, 26], [75, 4]) == 228\nassert solution.minCost([99, 5, 31, 21], [55, 16, 35, 97]) == 4896\nassert solution.minCost([76, 87, 76, 16, 63, 79], [90, 29, 63, 1, 53, 75]) == 1293\nassert solution.minCost([49, 46, 85, 70, 86, 64, 16, 90], [34, 98, 47, 13, 37, 37, 9, 77]) == 6587\nassert solution.minCost([19, 85, 81, 87, 31, 87], [73, 67, 59, 6, 95, 16]) == 8676\nassert solution.minCost([62], [55]) == 0\nassert solution.minCost([26, 68, 49, 94], [48, 69, 6, 33]) == 2988\nassert solution.minCost([63, 78, 24, 65, 11, 10], [3, 56, 79, 56, 48, 97]) == 7419\nassert solution.minCost([1, 13, 64], [60, 53, 38]) == 2658\nassert solution.minCost([76, 48, 34, 44, 55], [29, 99, 31, 53, 17]) == 1577\nassert solution.minCost([84, 7], [92, 67]) == 5159\nassert solution.minCost([77, 28, 92, 49, 41], [70, 47, 17, 88, 3]) == 3702\nassert solution.minCost([58, 65, 76, 10, 44, 29, 43, 70], [60, 19, 43, 87, 42, 38, 46, 82]) == 8321\nassert solution.minCost([39, 10], [50, 47]) == 1363\nassert solution.minCost([27], [28]) == 0\nassert solution.minCost([48, 76, 64, 81, 7, 43, 72, 62], [42, 70, 13, 22, 74, 14, 16, 7]) == 6480\nassert solution.minCost([19, 59, 52, 47, 16], [86, 1, 6, 72, 64]) == 2446\nassert solution.minCost([18, 94, 43, 4, 52, 52, 92, 46, 5, 46], [24, 96, 73, 55, 92, 51, 66, 15, 94, 19]) == 15407\nassert solution.minCost([50, 67, 2, 4, 8, 41], [55, 100, 95, 75, 28, 78]) == 10499\nassert solution.minCost([67, 31, 12, 49, 78, 40], [98, 93, 90, 79, 84, 16]) == 9348\nassert solution.minCost([64, 25, 51, 43, 82, 48, 51], [85, 39, 11, 50, 26, 5, 72]) == 3340\nassert solution.minCost([53, 16, 25, 13, 85, 96, 1, 75, 52, 37], [100, 43, 96, 28, 64, 19, 54, 28, 58, 91]) == 12398\nassert solution.minCost([95, 97], [34, 80]) == 68\nassert solution.minCost([41], [12]) == 0\nassert solution.minCost([16, 27, 37, 14], [1, 55, 89, 5]) == 686\nassert solution.minCost([16, 68, 55, 52, 38, 57, 30, 40], [45, 96, 29, 78, 60, 70, 66, 86]) == 6917\nassert solution.minCost([20, 55, 66, 17, 34, 79, 93, 21, 48], [11, 42, 18, 97, 85, 85, 10, 27, 95]) == 8937\nassert solution.minCost([65, 39, 43], [71, 68, 10]) == 1834\nassert solution.minCost([37], [20]) == 0\nassert solution.minCost([17, 3, 13, 4, 15, 19, 32], [20, 12, 95, 96, 39, 63, 53]) == 2527\nassert solution.minCost([77, 51, 52, 76], [36, 90, 100, 92]) == 3198\nassert solution.minCost([76, 34, 37, 74, 68], [89, 62, 67, 47, 4]) == 5161\nassert solution.minCost([42, 89, 85], [9, 75, 100]) == 687\nassert solution.minCost([18, 19, 83, 45, 37], [35, 64, 48, 19, 84]) == 4177\nassert solution.minCost([70, 2, 9, 39, 68, 62], [21, 93, 2, 64, 92, 95]) == 7878\nassert solution.minCost([40, 85, 36, 7, 51, 15, 45, 50, 4, 51], [49, 44, 73, 92, 45, 76, 100, 83, 61, 68]) == 11977\nassert solution.minCost([96, 2, 72, 88, 58, 23, 45, 9, 2], [46, 9, 43, 85, 79, 32, 97, 100, 7]) == 13077\nassert solution.minCost([39, 78, 89, 72, 65], [57, 83, 50, 12, 13]) == 3014\nassert solution.minCost([31], [33]) == 0\nassert solution.minCost([1, 29], [31, 47]) == 868\nassert solution.minCost([44, 93, 51, 29, 69, 43], [26, 46, 6, 77, 76, 5]) == 5072\nassert solution.minCost([29, 17, 40], [43, 69, 53]) == 1411\nassert solution.minCost([17, 56], [83, 81]) == 3159\nassert solution.minCost([84, 96, 18], [20, 99, 49]) == 4062\nassert solution.minCost([22], [36]) == 0\nassert solution.minCost([22, 52, 5], [58, 3, 69]) == 1127\nassert solution.minCost([26, 38, 19, 39], [47, 96, 89, 4]) == 1827\nassert solution.minCost([13, 11, 78, 79, 78], [10, 73, 95, 74, 46]) == 5615\nassert solution.minCost([48, 54, 43, 88, 95], [27, 16, 63, 45, 20]) == 3151\nassert solution.minCost([95, 95, 54], [11, 84, 75]) == 3075",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minCost([1, 3, 5, 2], [2, 3, 1, 14]) == 8\nassert solution.minCost([2, 2, 2, 2, 2], [4, 2, 8, 1, 3]) == 0\n",
        "algorithms": [
            "greedy",
            "binary_search",
            "sorting"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 2132,
        "task_name": "Stamping the Grid",
        "description": "\n\n<p>You are given an <code>m x n</code> binary matrix <code>grid</code> where each cell is either <code>0</code> (empty) or <code>1</code> (occupied).</p>\n\n<p>You are then given stamps of size <code>stampHeight x stampWidth</code>. We want to fit the stamps such that they follow the given <strong>restrictions</strong> and <strong>requirements</strong>:</p>\n\n<ol>\n\t<li>Cover all the <strong>empty</strong> cells.</li>\n\t<li>Do not cover any of the <strong>occupied</strong> cells.</li>\n\t<li>We can put as <strong>many</strong> stamps as we want.</li>\n\t<li>Stamps can <strong>overlap</strong> with each other.</li>\n\t<li>Stamps are not allowed to be <strong>rotated</strong>.</li>\n\t<li>Stamps must stay completely <strong>inside</strong> the grid.</li>\n</ol>\n\n<p>Return <code>true</code> <em>if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return</em> <code>false</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2132.Stamping%20the%20Grid/images/ex1.png\" style=\"width: 180px; height: 237px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\n<strong>Output:</strong> true\n<strong>Explanation:</strong> We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n<img alt=\"\" src=\"https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2132.Stamping%20the%20Grid/images/ex2.png\" style=\"width: 170px; height: 179px;\" />\n<pre>\n<strong>Input:</strong> grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \n<strong>Output:</strong> false \n<strong>Explanation:</strong> There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>m == grid.length</code></li>\n\t<li><code>n == grid[r].length</code></li>\n\t<li><code>1 &lt;= m, n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= m * n &lt;= 2 * 10<sup>5</sup></code></li>\n\t<li><code>grid[r][c]</code> is either <code>0</code> or <code>1</code>.</li>\n\t<li><code>1 &lt;= stampHeight, stampWidth &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given an `m x n` binary matrix `grid` where each cell is either `0` (empty) or `1` (occupied).\n\n\nYou are then given stamps of size `stampHeight x stampWidth`. We want to fit the stamps such that they follow the given **restrictions** and **requirements**:\n\n\n1. Cover all the **empty** cells.\n2. Do not cover any of the **occupied** cells.\n3. We can put as **many** stamps as we want.\n4. Stamps can **overlap** with each other.\n5. Stamps are not allowed to be **rotated**.\n6. Stamps must stay completely **inside** the grid.\n\n\nReturn `true` *if it is possible to fit the stamps while following the given restrictions and requirements. Otherwise, return* `false`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2132.Stamping%20the%20Grid/images/ex1.png)\n\n```\n\n**Input:** grid = [[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], stampHeight = 4, stampWidth = 3\n**Output:** true\n**Explanation:** We have two overlapping stamps (labeled 1 and 2 in the image) that are able to cover all the empty cells.\n\n```\n\n**Example 2:**\n\n\n![](https://fastly.jsdelivr.net/gh/doocs/leetcode@main/solution/2100-2199/2132.Stamping%20the%20Grid/images/ex2.png)\n\n```\n\n**Input:** grid = [[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], stampHeight = 2, stampWidth = 2 \n**Output:** false \n**Explanation:** There is no way to fit the stamps onto all the empty cells without the stamps going outside the grid.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `m == grid.length`\n* `n == grid[r].length`\n* `1 <= m, n <= 105`\n* `1 <= m * n <= 2 * 105`\n* `grid[r][c]` is either `0` or `1`.\n* `1 <= stampHeight, stampWidth <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m - stampHeight + 2):\n            for j in range(1, n - stampWidth + 2):\n                x, y = i + stampHeight - 1, j + stampWidth - 1\n                if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                    d[i][j] += 1\n                    d[i][y + 1] -= 1\n                    d[x + 1][j] -= 1\n                    d[x + 1][y + 1] += 1\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                if v == 0 and d[i][j] == 0:\n                    return False\n        return True\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def possibleToStamp(\n        self, grid: List[List[int]], stampHeight: int, stampWidth: int\n    ) -> bool:\n        m, n = len(grid), len(grid[0])\n        s = [[0] * (n + 1) for _ in range(m + 1)]\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + v\n        d = [[0] * (n + 2) for _ in range(m + 2)]\n        for i in range(1, m - stampHeight + 2):\n            for j in range(1, n - stampWidth + 2):\n                x, y = i + stampHeight - 1, j + stampWidth - 1\n                if s[x][y] - s[x][j - 1] - s[i - 1][y] + s[i - 1][j - 1] == 0:\n                    d[i][j] += 1\n                    d[i][y + 1] -= 1\n                    d[x + 1][j] -= 1\n                    d[x + 1][y + 1] += 1\n        for i, row in enumerate(grid, 1):\n            for j, v in enumerate(row, 1):\n                d[i][j] += d[i - 1][j] + d[i][j - 1] - d[i - 1][j - 1]\n                if v == 0 and d[i][j] == 0:\n                    return False\n        return True\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random grid\n    m = random.randint(2, 10)\n    n = random.randint(2, 10)\n    grid = [[random.choice([0, 1]) for _ in range(n)] for _ in range(m)]\n\n    # Generate random stamp size\n    stampHeight = random.randint(1, min(m, 10))\n    stampWidth = random.randint(1, min(n, 10))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.possibleToStamp(grid, stampHeight, stampWidth)\n\n    return grid, stampHeight, stampWidth, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        grid, stampHeight, stampWidth, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.possibleToStamp(grid, stampHeight, stampWidth) == expected_result\n        print(f\"assert solution.possibleToStamp({grid}, {stampHeight}, {stampWidth}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.possibleToStamp({grid}, {stampHeight}, {stampWidth}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.possibleToStamp([[1, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1]], 2, 1) == False\nassert solution.possibleToStamp([[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0], [1, 1, 0, 1], [1, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 1, 1], [0, 1, 0, 1]], 4, 1) == False\nassert solution.possibleToStamp([[1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0]], 3, 5) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0]], 8, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1]], 5, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0]], 2, 4) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0]], 1, 6) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1]], 1, 10) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1]], 2, 5) == False\nassert solution.possibleToStamp([[0, 0, 0, 0], [1, 0, 1, 0]], 2, 1) == False\nassert solution.possibleToStamp([[1, 1, 0], [0, 0, 0], [1, 0, 1], [0, 0, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1], [1, 0, 0]], 8, 2) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1]], 1, 3) == False\nassert solution.possibleToStamp([[0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0]], 2, 1) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0]], 4, 3) == False\nassert solution.possibleToStamp([[1, 0, 0], [1, 0, 0], [1, 1, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 0]], 6, 1) == False\nassert solution.possibleToStamp([[0, 0], [0, 0], [0, 0], [0, 0], [0, 1]], 5, 1) == False\nassert solution.possibleToStamp([[0, 1, 0], [1, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1], [0, 0, 1], [0, 1, 0], [0, 0, 1], [0, 1, 1]], 5, 2) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1]], 1, 4) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1]], 7, 1) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1]], 8, 1) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0]], 4, 9) == False\nassert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1]], 4, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1], [1, 0, 1, 1, 1], [0, 0, 1, 0, 0]], 1, 5) == False\nassert solution.possibleToStamp([[0, 1, 0], [0, 0, 0]], 1, 1) == True\nassert solution.possibleToStamp([[1, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1]], 1, 2) == False\nassert solution.possibleToStamp([[0, 0, 1], [1, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [0, 1, 1]], 2, 1) == False\nassert solution.possibleToStamp([[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], 2, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1]], 7, 9) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1]], 3, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0]], 5, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], 2, 4) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1]], 3, 5) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0]], 2, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1]], 4, 6) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1]], 2, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0]], 9, 3) == False\nassert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]], 1, 8) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0]], 1, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1], [0, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 1, 1], [0, 0, 0, 1, 1], [0, 0, 1, 1, 1], [0, 1, 0, 0, 1], [0, 0, 0, 1, 0]], 4, 5) == False\nassert solution.possibleToStamp([[0, 1, 1], [1, 0, 1], [1, 0, 0], [0, 0, 0], [0, 1, 1]], 5, 3) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1]], 3, 4) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1]], 6, 8) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1]], 4, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1]], 2, 7) == False\nassert solution.possibleToStamp([[0, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]], 4, 2) == False\nassert solution.possibleToStamp([[1, 0], [1, 0]], 1, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 0], [1, 1, 0, 0, 1], [1, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [1, 1, 1, 0, 1]], 10, 5) == False\nassert solution.possibleToStamp([[1, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]], 1, 1) == True\nassert solution.possibleToStamp([[1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 1]], 1, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 1, 0, 1]], 5, 2) == False\nassert solution.possibleToStamp([[1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 0], [1, 1, 0], [0, 1, 0], [1, 1, 1]], 2, 2) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1]], 1, 8) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0]], 5, 5) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1]], 1, 4) == False\nassert solution.possibleToStamp([[0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0]], 3, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0]], 1, 4) == False\nassert solution.possibleToStamp([[1, 1], [1, 0], [1, 0], [1, 0], [1, 0]], 4, 2) == False\nassert solution.possibleToStamp([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1]], 3, 8) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1]], 2, 4) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1]], 3, 9) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 0], [1, 1, 0, 1, 0]], 1, 1) == True\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1]], 8, 5) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0]], 4, 5) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1]], 1, 10) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 0, 0, 0]], 2, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1]], 2, 3) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1]], 2, 7) == False\nassert solution.possibleToStamp([[1, 1, 1], [1, 0, 0], [0, 1, 1]], 1, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1]], 2, 4) == False\nassert solution.possibleToStamp([[1, 1], [1, 0], [1, 1], [1, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0]], 9, 2) == False\nassert solution.possibleToStamp([[1, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 0, 1, 1, 1], [0, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 1]], 2, 4) == False\nassert solution.possibleToStamp([[1, 1], [0, 1], [0, 1], [0, 0]], 1, 1) == True\nassert solution.possibleToStamp([[1, 0, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 0, 0, 1], [1, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [1, 1, 0, 0, 0]], 8, 4) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0]], 2, 5) == False\nassert solution.possibleToStamp([[1, 1], [1, 0], [0, 0], [0, 1], [0, 1], [0, 0], [0, 0], [1, 1], [1, 1], [0, 0]], 7, 2) == False\nassert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1]], 4, 4) == False\nassert solution.possibleToStamp([[0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1]], 3, 3) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1]], 1, 5) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0]], 1, 5) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0]], 1, 2) == False\nassert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0]], 1, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1], [0, 1, 0, 1, 1]], 2, 3) == False\nassert solution.possibleToStamp([[0, 1, 0], [1, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1], [1, 0, 0], [1, 0, 0]], 3, 1) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]], 3, 7) == False\nassert solution.possibleToStamp([[1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 1], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0]], 4, 3) == False\nassert solution.possibleToStamp([[1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0]], 7, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0]], 5, 2) == False\nassert solution.possibleToStamp([[1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1]], 7, 6) == False\nassert solution.possibleToStamp([[1, 0], [1, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 1], [1, 1]], 2, 2) == False\nassert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0]], 1, 7) == False\nassert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1]], 3, 8) == False\nassert solution.possibleToStamp([[0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1]], 5, 2) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0]], 9, 7) == False\nassert solution.possibleToStamp([[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [1, 0, 1, 1], [0, 0, 0, 1], [0, 0, 1, 0]], 2, 3) == False\nassert solution.possibleToStamp([[0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1]], 2, 7) == False\nassert solution.possibleToStamp([[0, 1, 1, 1], [0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 1], [0, 1, 1, 0]], 2, 3) == False\nassert solution.possibleToStamp([[0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0]], 2, 6) == False\nassert solution.possibleToStamp([[0, 1, 1, 1], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 0]], 1, 2) == False\nassert solution.possibleToStamp([[0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 1, 1], [1, 0, 1]], 5, 3) == False\nassert solution.possibleToStamp([[1, 1, 0], [1, 0, 1], [0, 0, 0]], 3, 1) == False",
        "small_test_cases": "\nsolution = Solution()\nassert solution.possibleToStamp([[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0],[1,0,0,0]], 4, 3) == True\nassert solution.possibleToStamp([[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]], 2, 2) == False\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 410,
        "task_name": "Split Array Largest Sum",
        "description": "\n\n<p>Given an integer array <code>nums</code> and an integer <code>k</code>, split <code>nums</code> into <code>k</code> non-empty subarrays such that the largest sum of any subarray is <strong>minimized</strong>.</p>\n\n<p>Return <em>the minimized largest sum of the split</em>.</p>\n\n<p>A <strong>subarray</strong> is a contiguous part of the array.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [7,2,5,10,8], k = 2\n<strong>Output:</strong> 18\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5], k = 2\n<strong>Output:</strong> 9\n<strong>Explanation:</strong> There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 1000</code></li>\n\t<li><code>0 &lt;= nums[i] &lt;= 10<sup>6</sup></code></li>\n\t<li><code>1 &lt;= k &lt;= min(50, nums.length)</code></li>\n</ul>\n\n",
        "markdown_description": "\nGiven an integer array `nums` and an integer `k`, split `nums` into `k` non-empty subarrays such that the largest sum of any subarray is **minimized**.\n\n\nReturn *the minimized largest sum of the split*.\n\n\nA **subarray** is a contiguous part of the array.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [7,2,5,10,8], k = 2\n**Output:** 18\n**Explanation:** There are four ways to split nums into two subarrays.\nThe best way is to split it into [7,2,5] and [10,8], where the largest sum among the two subarrays is only 18.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5], k = 2\n**Output:** 9\n**Explanation:** There are four ways to split nums into two subarrays.\nThe best way is to split it into [1,2,3] and [4,5], where the largest sum among the two subarrays is only 9.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 1000`\n* `0 <= nums[i] <= 106`\n* `1 <= k <= min(50, nums.length)`\n\n\n",
        "canonical_solution": "class Solution:\n    def splitArray(self, nums: List[int], k: int) -> int:\n        def check(mx):\n            s, cnt = inf, 0\n            for x in nums:\n                s += x\n                if s > mx:\n                    s = x\n                    cnt += 1\n            return cnt <= k\n\n        left, right = max(nums), sum(nums)\n        return left + bisect_left(range(left, right + 1), True, key=check)\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def splitArray(self, nums, k):\n        def check(mx):\n            s, cnt = float('inf'), 0\n            for x in nums:\n                s += x\n                if s > mx:\n                    s = x\n                    cnt += 1\n            return cnt <= k\n\n        left, right = max(nums), sum(nums)\n        return left + bisect_left(range(left, right + 1), True, key=check)\n\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate random numbers list\n    nums = random.sample(range(1, 1001), random.randint(1, 10))\n\n    # Generate a random value of k\n    k = random.randint(1, min(50, len(nums)))\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.splitArray(nums, k)\n\n    return nums, k, expected_result\n\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, k, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.splitArray(nums, k) == expected_result\n        print(f\"assert solution.splitArray({nums}, {k}) == {expected_result}\")\n        test_case_generator_results.append(\n            f\"assert solution.splitArray({nums}, {k}) == {expected_result}\")  # You can find that we construct the test case in the same format as the example\n    return test_case_generator_results\n\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.splitArray([681, 630, 94, 58, 88, 835, 727, 989], 5) == 989\nassert solution.splitArray([313, 711, 755, 856, 593], 1) == 3228\nassert solution.splitArray([893, 865, 255, 469, 370, 566], 2) == 1758\nassert solution.splitArray([934, 53, 66, 283, 149, 401], 6) == 934\nassert solution.splitArray([21, 469, 787, 734, 19, 401, 639, 484], 8) == 787\nassert solution.splitArray([892, 492, 306, 699, 16, 43, 602, 42, 925, 861], 7) == 925\nassert solution.splitArray([181], 1) == 181\nassert solution.splitArray([763, 487, 674, 284, 566, 807, 371, 68], 1) == 4020\nassert solution.splitArray([242, 329, 439, 127, 42, 331, 816], 1) == 2326\nassert solution.splitArray([711, 681, 355, 37, 476, 753], 1) == 3013\nassert solution.splitArray([74, 781, 694, 549, 232, 384, 55, 461, 189, 139], 1) == 3558\nassert solution.splitArray([33, 956, 894, 814, 696, 786, 506, 912, 817], 6) == 1482\nassert solution.splitArray([585, 300, 220, 295, 96, 115, 954, 734], 8) == 954\nassert solution.splitArray([936, 595, 567, 594], 3) == 1161\nassert solution.splitArray([127, 359, 879, 440, 805, 498, 484, 576], 7) == 879\nassert solution.splitArray([870, 821, 984], 3) == 984\nassert solution.splitArray([28, 17], 2) == 28\nassert solution.splitArray([864], 1) == 864\nassert solution.splitArray([671, 845, 761, 324, 57, 215], 1) == 2873\nassert solution.splitArray([27, 486, 900, 26], 1) == 1439\nassert solution.splitArray([214, 571, 682, 425, 414, 343, 34, 216, 928], 3) == 1467\nassert solution.splitArray([534, 41, 435, 940, 514], 4) == 940\nassert solution.splitArray([10, 545, 486, 107, 115, 538, 858, 627, 523, 790], 4) == 1396\nassert solution.splitArray([524, 556, 404], 2) == 960\nassert solution.splitArray([753, 97, 552, 417, 324, 104], 5) == 753\nassert solution.splitArray([313], 1) == 313\nassert solution.splitArray([41, 278], 2) == 278\nassert solution.splitArray([415, 545, 463], 2) == 960\nassert solution.splitArray([457, 200], 2) == 457\nassert solution.splitArray([48, 156], 1) == 204\nassert solution.splitArray([687, 972, 79, 30, 945, 462], 1) == 3175\nassert solution.splitArray([628, 721, 66, 676, 409], 2) == 1349\nassert solution.splitArray([80, 225, 268, 747], 1) == 1320\nassert solution.splitArray([490, 907, 457, 688, 713, 666, 397], 6) == 1063\nassert solution.splitArray([756, 759, 125, 597, 769, 961, 58, 929, 376], 7) == 987\nassert solution.splitArray([670, 247, 82, 195, 341, 179, 416, 418, 625, 938], 1) == 4111\nassert solution.splitArray([570, 89, 524, 919, 526, 69, 299], 4) == 919\nassert solution.splitArray([233, 178, 482, 236, 87], 3) == 482\nassert solution.splitArray([642], 1) == 642\nassert solution.splitArray([303, 480, 260, 478, 672, 875, 477, 652, 628], 2) == 2632\nassert solution.splitArray([918, 624, 450, 345, 794, 123, 640, 983], 6) == 983\nassert solution.splitArray([553, 809, 811, 736, 706, 261, 762, 596], 6) == 1358\nassert solution.splitArray([296], 1) == 296\nassert solution.splitArray([855, 891, 958, 315, 120, 772], 3) == 1746\nassert solution.splitArray([170, 192], 1) == 362\nassert solution.splitArray([168, 414, 138, 557], 1) == 1277\nassert solution.splitArray([187, 622, 871, 29, 54, 330, 865], 3) == 1195\nassert solution.splitArray([307, 382], 2) == 382\nassert solution.splitArray([184, 875, 97, 616, 785], 2) == 1401\nassert solution.splitArray([364, 118, 164, 657, 730, 461, 168, 193], 1) == 2855\nassert solution.splitArray([703, 729, 770, 644, 817, 432], 2) == 2202\nassert solution.splitArray([52, 782, 178], 3) == 782\nassert solution.splitArray([101, 669, 887], 1) == 1657\nassert solution.splitArray([969, 22, 911, 340], 2) == 1251\nassert solution.splitArray([203, 652, 635, 799, 259, 746, 312, 650], 3) == 1708\nassert solution.splitArray([322, 531, 232], 1) == 1085\nassert solution.splitArray([359, 793], 1) == 1152\nassert solution.splitArray([307, 457, 540, 276, 732, 929], 2) == 1661\nassert solution.splitArray([221, 666, 638, 663], 1) == 2188\nassert solution.splitArray([81, 404, 268], 2) == 485\nassert solution.splitArray([920, 692], 2) == 920\nassert solution.splitArray([821, 564, 585, 392, 260, 374, 235, 299], 2) == 1970\nassert solution.splitArray([947, 568, 397, 510], 3) == 947\nassert solution.splitArray([780, 634, 385, 4, 326, 360, 706], 3) == 1349\nassert solution.splitArray([388, 56, 875, 408, 482, 728, 635, 613, 946, 151], 5) == 1283\nassert solution.splitArray([206, 294, 887, 967, 194, 551, 41, 442, 144, 721], 3) == 1712\nassert solution.splitArray([649, 331, 678, 436, 954, 187, 354, 593, 60], 7) == 954\nassert solution.splitArray([501], 1) == 501\nassert solution.splitArray([408, 25, 635, 200, 292, 566, 212, 341], 4) == 858\nassert solution.splitArray([117, 570, 182, 338], 2) == 687\nassert solution.splitArray([834, 506, 155, 186, 36, 887, 191, 592], 2) == 1706\nassert solution.splitArray([514, 225, 193, 366, 333, 559, 934, 722], 3) == 1631\nassert solution.splitArray([928, 562, 221, 540, 276, 978], 4) == 978\nassert solution.splitArray([667, 732, 917, 730, 54, 109, 28, 334], 5) == 917\nassert solution.splitArray([295, 792, 708, 31, 509, 64, 803, 57, 834], 3) == 1694\nassert solution.splitArray([98, 174, 850, 27, 397, 943, 956, 401, 94, 433], 4) == 1340\nassert solution.splitArray([726, 39, 560, 16, 613, 76, 494, 554, 43, 921], 3) == 1518\nassert solution.splitArray([880, 51, 584, 717, 369], 1) == 2601\nassert solution.splitArray([2], 1) == 2\nassert solution.splitArray([168, 615, 553, 325, 557, 538], 5) == 783\nassert solution.splitArray([662, 971, 341], 1) == 1974\nassert solution.splitArray([235, 844], 2) == 844\nassert solution.splitArray([919, 461, 253, 664, 495, 621, 700], 3) == 1412\nassert solution.splitArray([324, 380, 179], 2) == 559\nassert solution.splitArray([60, 395, 381, 127, 812, 129, 802, 587, 942], 8) == 942\nassert solution.splitArray([669, 6, 499], 1) == 1174\nassert solution.splitArray([100, 651, 727, 632, 106, 361, 182, 941, 547], 8) == 941\nassert solution.splitArray([370, 367, 616, 178, 550, 954, 338, 252, 21, 250], 6) == 954\nassert solution.splitArray([628, 295, 913, 987, 82], 2) == 1836\nassert solution.splitArray([712, 440, 551, 87, 974, 826, 308, 858], 4) == 1612\nassert solution.splitArray([527, 866, 323], 1) == 1716\nassert solution.splitArray([480, 603, 201], 3) == 603\nassert solution.splitArray([436, 338, 326, 968], 1) == 2068\nassert solution.splitArray([690, 189, 272, 678], 1) == 1829\nassert solution.splitArray([697, 947, 617, 391, 687, 430, 49, 352, 596, 318], 3) == 1745\nassert solution.splitArray([916, 751, 132, 19, 562], 4) == 916\nassert solution.splitArray([418, 588], 1) == 1006\nassert solution.splitArray([319, 819, 350, 834, 782, 242, 349, 637, 956, 519], 2) == 3104\nassert solution.splitArray([511, 902], 2) == 902\nassert solution.splitArray([441, 439, 67, 584, 163, 522], 3) == 880",
        "small_test_cases": "\nsolution = Solution()\nassert solution.splitArray([7,2,5,10,8], 2) == 18\nassert solution.splitArray([1,2,3,4,5], 2) == 9\n",
        "algorithms": [
            "greedy",
            "dynamic_programming",
            "binary_search"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 2193,
        "task_name": "Minimum Number of Moves to Make Palindrome",
        "description": "\n\n<p>You are given a string <code>s</code> consisting only of lowercase English letters.</p>\n\n<p>In one <strong>move</strong>, you can select any two <strong>adjacent</strong> characters of <code>s</code> and swap them.</p>\n\n<p>Return <em>the <strong>minimum number of moves</strong> needed to make</em> <code>s</code> <em>a palindrome</em>.</p>\n\n<p><strong>Note</strong> that the input will be generated such that <code>s</code> can always be converted to a palindrome.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;aabb&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nWe can obtain two palindromes from s, &quot;abba&quot; and &quot;baab&quot;. \n- We can obtain &quot;abba&quot; from s in 2 moves: &quot;a<u><strong>ab</strong></u>b&quot; -&gt; &quot;ab<u><strong>ab</strong></u>&quot; -&gt; &quot;abba&quot;.\n- We can obtain &quot;baab&quot; from s in 2 moves: &quot;a<u><strong>ab</strong></u>b&quot; -&gt; &quot;<u><strong>ab</strong></u>ab&quot; -&gt; &quot;baab&quot;.\nThus, the minimum number of moves needed to make s a palindrome is 2.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> s = &quot;letelt&quot;\n<strong>Output:</strong> 2\n<strong>Explanation:</strong>\nOne of the palindromes we can obtain from s in 2 moves is &quot;lettel&quot;.\nOne of the ways we can obtain it is &quot;lete<u><strong>lt</strong></u>&quot; -&gt; &quot;let<u><strong>et</strong></u>l&quot; -&gt; &quot;lettel&quot;.\nOther palindromes such as &quot;tleelt&quot; can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= s.length &lt;= 2000</code></li>\n\t<li><code>s</code> consists only of lowercase English letters.</li>\n\t<li><code>s</code> can be converted to a palindrome using a finite number of moves.</li>\n</ul>\n\n",
        "markdown_description": "\nYou are given a string `s` consisting only of lowercase English letters.\n\n\nIn one **move**, you can select any two **adjacent** characters of `s` and swap them.\n\n\nReturn *the **minimum number of moves** needed to make* `s` *a palindrome*.\n\n\n**Note** that the input will be generated such that `s` can always be converted to a palindrome.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** s = \"aabb\"\n**Output:** 2\n**Explanation:**\nWe can obtain two palindromes from s, \"abba\" and \"baab\". \n- We can obtain \"abba\" from s in 2 moves: \"a**ab**b\" -> \"ab**ab**\" -> \"abba\".\n- We can obtain \"baab\" from s in 2 moves: \"a**ab**b\" -> \"**ab**ab\" -> \"baab\".\nThus, the minimum number of moves needed to make s a palindrome is 2.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** s = \"letelt\"\n**Output:** 2\n**Explanation:**\nOne of the palindromes we can obtain from s in 2 moves is \"lettel\".\nOne of the ways we can obtain it is \"lete**lt**\" -> \"let**et**l\" -> \"lettel\".\nOther palindromes such as \"tleelt\" can also be obtained in 2 moves.\nIt can be shown that it is not possible to obtain a palindrome in less than 2 moves.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= s.length <= 2000`\n* `s` consists only of lowercase English letters.\n* `s` can be converted to a palindrome using a finite number of moves.\n\n\n",
        "canonical_solution": "class Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def minMovesToMakePalindrome(self, s: str) -> int:\n        cs = list(s)\n        ans, n = 0, len(s)\n        i, j = 0, n - 1\n        while i < j:\n            even = False\n            for k in range(j, i, -1):\n                if cs[i] == cs[k]:\n                    even = True\n                    while k < j:\n                        cs[k], cs[k + 1] = cs[k + 1], cs[k]\n                        k += 1\n                        ans += 1\n                    j -= 1\n                    break\n            if not even:\n                ans += n // 2 - i\n            i += 1\n        return ans\n\ndef generate_test_case():\n    # Initialize the solution class\n    solution = Solution()\n    \n    # Generate random strings for s\n    s_length = random.randint(1, 10)\n    s = random.choices(\"abcdefghijklmnopqrstuvwxyz\", k=s_length)\n    \n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.minMovesToMakePalindrome(s)\n\n    return s, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        s, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.minMovesToMakePalindrome(s) == expected_result\n        print(f'assert solution.minMovesToMakePalindrome(\"{\"\".join(s)}\") == {expected_result}')\n        test_case_generator_results.append(f'assert solution.minMovesToMakePalindrome(\"{\"\".join(s)}\") == {expected_result}')\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.minMovesToMakePalindrome(\"xfrhuro\") == 5\nassert solution.minMovesToMakePalindrome(\"c\") == 0\nassert solution.minMovesToMakePalindrome(\"ptudjnx\") == 3\nassert solution.minMovesToMakePalindrome(\"ouazvv\") == 6\nassert solution.minMovesToMakePalindrome(\"i\") == 0\nassert solution.minMovesToMakePalindrome(\"cbio\") == 3\nassert solution.minMovesToMakePalindrome(\"x\") == 0\nassert solution.minMovesToMakePalindrome(\"mwbk\") == 3\nassert solution.minMovesToMakePalindrome(\"zjuexp\") == 5\nassert solution.minMovesToMakePalindrome(\"byngs\") == 2\nassert solution.minMovesToMakePalindrome(\"jwujmxw\") == 4\nassert solution.minMovesToMakePalindrome(\"lhmjees\") == 7\nassert solution.minMovesToMakePalindrome(\"ldhlspue\") == 9\nassert solution.minMovesToMakePalindrome(\"egmtgmta\") == 10\nassert solution.minMovesToMakePalindrome(\"gomqxpvjkp\") == 12\nassert solution.minMovesToMakePalindrome(\"af\") == 1\nassert solution.minMovesToMakePalindrome(\"nbeh\") == 3\nassert solution.minMovesToMakePalindrome(\"prfp\") == 1\nassert solution.minMovesToMakePalindrome(\"fzho\") == 3\nassert solution.minMovesToMakePalindrome(\"efh\") == 1\nassert solution.minMovesToMakePalindrome(\"qps\") == 1\nassert solution.minMovesToMakePalindrome(\"xs\") == 1\nassert solution.minMovesToMakePalindrome(\"lawjs\") == 2\nassert solution.minMovesToMakePalindrome(\"qlyd\") == 3\nassert solution.minMovesToMakePalindrome(\"wlhs\") == 3\nassert solution.minMovesToMakePalindrome(\"lsrbfffd\") == 10\nassert solution.minMovesToMakePalindrome(\"whd\") == 1\nassert solution.minMovesToMakePalindrome(\"tepnnsww\") == 12\nassert solution.minMovesToMakePalindrome(\"ycaj\") == 3\nassert solution.minMovesToMakePalindrome(\"huvpi\") == 2\nassert solution.minMovesToMakePalindrome(\"omz\") == 1\nassert solution.minMovesToMakePalindrome(\"hxehlyhd\") == 6\nassert solution.minMovesToMakePalindrome(\"uj\") == 1\nassert solution.minMovesToMakePalindrome(\"vaxmcb\") == 5\nassert solution.minMovesToMakePalindrome(\"dvlzwtzrfo\") == 13\nassert solution.minMovesToMakePalindrome(\"atzrt\") == 2\nassert solution.minMovesToMakePalindrome(\"ifqnyz\") == 5\nassert solution.minMovesToMakePalindrome(\"wdmqhqkhe\") == 12\nassert solution.minMovesToMakePalindrome(\"wi\") == 1\nassert solution.minMovesToMakePalindrome(\"afj\") == 1\nassert solution.minMovesToMakePalindrome(\"padfchbgon\") == 9\nassert solution.minMovesToMakePalindrome(\"ox\") == 1\nassert solution.minMovesToMakePalindrome(\"dl\") == 1\nassert solution.minMovesToMakePalindrome(\"uojkw\") == 2\nassert solution.minMovesToMakePalindrome(\"ekjd\") == 3\nassert solution.minMovesToMakePalindrome(\"f\") == 0\nassert solution.minMovesToMakePalindrome(\"jnisv\") == 2\nassert solution.minMovesToMakePalindrome(\"iqxcc\") == 3\nassert solution.minMovesToMakePalindrome(\"cq\") == 1\nassert solution.minMovesToMakePalindrome(\"ldeokcc\") == 5\nassert solution.minMovesToMakePalindrome(\"vv\") == 0\nassert solution.minMovesToMakePalindrome(\"axhwito\") == 3\nassert solution.minMovesToMakePalindrome(\"dahw\") == 3\nassert solution.minMovesToMakePalindrome(\"seiqvnh\") == 3\nassert solution.minMovesToMakePalindrome(\"bdyetkhqc\") == 4\nassert solution.minMovesToMakePalindrome(\"ooykju\") == 7\nassert solution.minMovesToMakePalindrome(\"sjksm\") == 2\nassert solution.minMovesToMakePalindrome(\"rezdzd\") == 6\nassert solution.minMovesToMakePalindrome(\"seduqgo\") == 3\nassert solution.minMovesToMakePalindrome(\"a\") == 0\nassert solution.minMovesToMakePalindrome(\"wmbmfsh\") == 6\nassert solution.minMovesToMakePalindrome(\"jm\") == 1\nassert solution.minMovesToMakePalindrome(\"lhl\") == 0\nassert solution.minMovesToMakePalindrome(\"o\") == 0\nassert solution.minMovesToMakePalindrome(\"m\") == 0\nassert solution.minMovesToMakePalindrome(\"hfzwcqrfq\") == 8\nassert solution.minMovesToMakePalindrome(\"yf\") == 1\nassert solution.minMovesToMakePalindrome(\"ldc\") == 1\nassert solution.minMovesToMakePalindrome(\"grdpzucx\") == 7\nassert solution.minMovesToMakePalindrome(\"obhvoxdby\") == 7\nassert solution.minMovesToMakePalindrome(\"fiessogsv\") == 7\nassert solution.minMovesToMakePalindrome(\"xkwngkaciu\") == 12\nassert solution.minMovesToMakePalindrome(\"uraybzr\") == 3\nassert solution.minMovesToMakePalindrome(\"rtvd\") == 3\nassert solution.minMovesToMakePalindrome(\"asllcdbubz\") == 18\nassert solution.minMovesToMakePalindrome(\"dqrzkehl\") == 7\nassert solution.minMovesToMakePalindrome(\"fpbpgpillx\") == 16\nassert solution.minMovesToMakePalindrome(\"qmccpjq\") == 4\nassert solution.minMovesToMakePalindrome(\"muoavbuzv\") == 8\nassert solution.minMovesToMakePalindrome(\"kcrbc\") == 2\nassert solution.minMovesToMakePalindrome(\"cafunbsr\") == 7\nassert solution.minMovesToMakePalindrome(\"ty\") == 1\nassert solution.minMovesToMakePalindrome(\"fzdujdqesp\") == 13\nassert solution.minMovesToMakePalindrome(\"enuoasni\") == 7\nassert solution.minMovesToMakePalindrome(\"ehydjakdra\") == 14\nassert solution.minMovesToMakePalindrome(\"svqa\") == 3\nassert solution.minMovesToMakePalindrome(\"mvxblnbw\") == 9\nassert solution.minMovesToMakePalindrome(\"cofzgg\") == 6\nassert solution.minMovesToMakePalindrome(\"sadvermm\") == 9\nassert solution.minMovesToMakePalindrome(\"jzr\") == 1\nassert solution.minMovesToMakePalindrome(\"dvdhzbsw\") == 10\nassert solution.minMovesToMakePalindrome(\"qwtp\") == 3\nassert solution.minMovesToMakePalindrome(\"mwwjra\") == 7\nassert solution.minMovesToMakePalindrome(\"mkgh\") == 3\nassert solution.minMovesToMakePalindrome(\"bmszdqkp\") == 7\nassert solution.minMovesToMakePalindrome(\"xa\") == 1\nassert solution.minMovesToMakePalindrome(\"elu\") == 1\nassert solution.minMovesToMakePalindrome(\"fpwcm\") == 2\nassert solution.minMovesToMakePalindrome(\"ocmy\") == 3\nassert solution.minMovesToMakePalindrome(\"njjnp\") == 2",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minMovesToMakePalindrome(\"aabb\") == 2\nassert solution.minMovesToMakePalindrome(\"letelt\") == 2\n",
        "algorithms": [
            "greedy",
            "two_pointers"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 632,
        "task_name": "Smallest Range Covering Elements from K Lists",
        "description": "\n\n<p>You have <code>k</code> lists of sorted integers in <strong>non-decreasing&nbsp;order</strong>. Find the <b>smallest</b> range that includes at least one number from each of the <code>k</code> lists.</p>\n\n<p>We define the range <code>[a, b]</code> is smaller than range <code>[c, d]</code> if <code>b - a &lt; d - c</code> <strong>or</strong> <code>a &lt; c</code> if <code>b - a == d - c</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n<strong>Output:</strong> [20,24]\n<strong>Explanation: </strong>\nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [[1,2,3],[1,2,3],[1,2,3]]\n<strong>Output:</strong> [1,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>nums.length == k</code></li>\n\t<li><code>1 &lt;= k &lt;= 3500</code></li>\n\t<li><code>1 &lt;= nums[i].length &lt;= 50</code></li>\n\t<li><code>-10<sup>5</sup> &lt;= nums[i][j] &lt;= 10<sup>5</sup></code></li>\n\t<li><code>nums[i]</code>&nbsp;is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n\n",
        "markdown_description": "\nYou have `k` lists of sorted integers in **non-decreasing\u00a0order**. Find the **smallest** range that includes at least one number from each of the `k` lists.\n\n\nWe define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` **or** `a < c` if `b - a == d - c`.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]\n**Output:** [20,24]\n**Explanation:** \nList 1: [4, 10, 15, 24,26], 24 is in range [20,24].\nList 2: [0, 9, 12, 20], 20 is in range [20,24].\nList 3: [5, 18, 22, 30], 22 is in range [20,24].\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [[1,2,3],[1,2,3],[1,2,3]]\n**Output:** [1,1]\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `nums.length == k`\n* `1 <= k <= 3500`\n* `1 <= nums[i].length <= 50`\n* `-105 <= nums[i][j] <= 105`\n* `nums[i]`\u00a0is sorted in **non-decreasing** order.\n\n\n",
        "canonical_solution": "class Solution:\n    def smallestRange(self, nums: List[List[int]]) -> List[int]:\n        t = [(x, i) for i, v in enumerate(nums) for x in v]\n        t.sort()\n        cnt = Counter()\n        ans = [-inf, inf]\n        j = 0\n        for b, v in t:\n            cnt[v] += 1\n            while len(cnt) == len(nums):\n                a = t[j][0]\n                x = b - a - (ans[1] - ans[0])\n                if x < 0 or (x == 0 and a < ans[0]):\n                    ans = [a, b]\n                w = t[j][1]\n                cnt[w] -= 1\n                if cnt[w] == 0:\n                    cnt.pop(w)\n                j += 1\n        return ans\n",
        "test_case_generator": "\nimport random\n\nclass Solution:\n    def smallestRange(self, nums):\n        t = [(x, i) for i, v in enumerate(nums) for x in v]\n        t.sort()\n        cnt = Counter()\n        ans = [-inf, inf]\n        j = 0\n        for b, v in t:\n            cnt[v] += 1\n            while len(cnt) == len(nums):\n                a = t[j][0]\n                x = b - a - (ans[1] - ans[0])\n                if x < 0 or (x == 0 and a < ans[0]):\n                    ans = [a, b]\n                w = t[j][1]\n                cnt[w] -= 1\n                if cnt[w] == 0:\n                    cnt.pop(w)\n                j += 1\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n\n    # Generate test case for nums\n    n = random.randint(1, 4)\n    nums = []\n    for _ in range(n):\n        sublist = random.sample(range(-10**5, 10**5+1), random.randint(1, 10))\n        sublist.sort()\n        nums.append(sublist)\n\n    # Calculate the expected result using the provided Solution class\n    expected_result = solution.smallestRange(nums)\n\n    return nums, expected_result\n\ndef test_generated_test_cases(num_tests):\n    test_case_generator_results = []\n    for i in range(num_tests):\n        nums, expected_result = generate_test_case()\n        solution = Solution()\n        assert solution.smallestRange(nums) == expected_result\n        print(f\"assert solution.smallestRange({nums}) == {expected_result}\")\n        test_case_generator_results.append(f\"assert solution.smallestRange({nums}) == {expected_result}\")\n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator_results = test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.smallestRange([[-69875, -35265, 66745, 81080, 90155], [-13229, -1144, 13630, 27302, 51116, 79012, 80807, 92818, 98613, 98719], [-49847, -15112, 11490, 52288, 58462, 77626, 92717]]) == [90155, 92818]\nassert solution.smallestRange([[-64755, -30440, -16167, -13582, 28361, 71464], [-76567, -69129, -55573, -46459, 15861, 25358, 33994, 46222, 92643], [-95491, -84265, -83126, -62289, -11384, -4225, 42022, 43984, 77918, 86408]]) == [-69129, -62289]\nassert solution.smallestRange([[-63257, -32989, -31737, -9558, 24380, 40503, 54943, 67851, 73896, 92347]]) == [-63257, -63257]\nassert solution.smallestRange([[-12364, 12067, 18885, 43694]]) == [-12364, -12364]\nassert solution.smallestRange([[-83549, -81472, -71560, -67232, -25024, 4298, 19746, 97542], [-93798, -84031, -42978, 956, 62202, 82518]]) == [-84031, -83549]\nassert solution.smallestRange([[-37812, -22525, -17000, 43372, 46071, 81724], [-45852, 64460], [-70031, -47109, -42662, -20471, 21383, 35469, 38576, 67089, 89326]]) == [-45852, -37812]\nassert solution.smallestRange([[-93055, -79997, -8832, -5910, -1057, 48470, 93871], [-90950, -81519, -80427, -67945, -46812, -5614, 22791], [-81142, -56149]]) == [-81142, -79997]\nassert solution.smallestRange([[-95723, -91595, -62722, -25520, -21272, 7889, 30147]]) == [-95723, -95723]\nassert solution.smallestRange([[-65598], [-81928, -28196, 26910, 83674], [-33378, -20384, -1539, 1008, 46505, 47212, 71956, 77492, 95146]]) == [-65598, -28196]\nassert solution.smallestRange([[-3961, -1444, 8979, 16866, 44154, 69991, 96263], [-55352, 61600], [-82565, -76846, -73634, -48739, -18794, 15701], [-61821, 20232, 39283, 52232, 65344]]) == [15701, 61600]\nassert solution.smallestRange([[-96769, -84278, -40650, -33721, -23618, 2312, 9446, 50794, 69722, 89034], [-90157, -36942, -36146, 52982, 54495, 54824, 59505]]) == [50794, 52982]\nassert solution.smallestRange([[-79901]]) == [-79901, -79901]\nassert solution.smallestRange([[-98688, -97943, -97764, -81465, -45129, -22667, 33871, 85370], [-95202, 13566, 54786, 65386], [-89323, -83089, -79095, -32238, -7916, -4888, 27445, 61155, 68470, 85230]]) == [-97764, -89323]\nassert solution.smallestRange([[-76526, -55591, -8478, 82761, 84042]]) == [-76526, -76526]\nassert solution.smallestRange([[-84406, -36877, -29144, -18923, 1608], [-77403, -55350, -38214, -34131, -17752, 19205, 42064, 86160], [8727, 10172, 19152, 20658, 34639, 52742, 77444, 95011, 96607], [-72594, -48612, 51717]]) == [1608, 51717]\nassert solution.smallestRange([[-73426, -30329, 15095], [-60776, 6296], [-98367, -7650, 90883], [5138, 26062, 29907, 78946, 80115, 90176]]) == [-7650, 15095]\nassert solution.smallestRange([[-8795, 33506], [-96481, -80530, -70722, -64868, -49156, -44331, -5386, 12995, 20563, 97504], [-27441, -27393, -21991, -17795, 13058, 44614]]) == [-17795, -5386]\nassert solution.smallestRange([[-72643, -52001, -39571, -30824, 55994, 56778, 63494, 84622, 90897], [-64312, 19074, 28346, 93830], [-32331], [-92216, -59696, -51746, -7038, 64734, 65072]]) == [-64312, -32331]\nassert solution.smallestRange([[-68101, -60833, -38642, 49438, 66601, 69664], [-85133, -84075, -81983, -67777, -24280, 63085, 73010, 97850, 98349], [-45225, -21904, 49454]]) == [49438, 63085]\nassert solution.smallestRange([[-73161, -44933, 49092, 54081], [20260], [43310], [-64334, -54491, -22301, 15808]]) == [15808, 49092]\nassert solution.smallestRange([[-96945, -90828, -71855, 40738, 50312, 64760, 91943], [-75662], [-65137, 21989, 65627], [41092]]) == [-75662, 41092]\nassert solution.smallestRange([[-44379, -21747, -9357, 46473, 47868]]) == [-44379, -44379]\nassert solution.smallestRange([[-86550, -32145, -27545, 27742, 42921, 55401], [-72434, -63004, -24345, 13740, 25506, 65226, 74359, 85082], [15964, 74560, 80505]]) == [15964, 27742]\nassert solution.smallestRange([[-97222, -70046, -33964, -22423, -13584, 6182, 67114, 86837, 99833]]) == [-97222, -97222]\nassert solution.smallestRange([[-78692, -47956, -33429, -24909, 3855, 18097, 24830, 29312, 66503], [-99573, -80931, -54867, -49957, -10416, 4916, 27687, 54385, 69339, 87254]]) == [3855, 4916]\nassert solution.smallestRange([[-95937, -83914, -39327, 52905]]) == [-95937, -95937]\nassert solution.smallestRange([[51595, 60803, 62384], [-85415, -81094, -76385, -42214, -33823, 25098, 40837, 92476], [-50670, -48194, -36867, -32901, 98664], [-86974, -81036, -63526, -56249, -44604, -10799, 13961, 39450]]) == [39450, 98664]\nassert solution.smallestRange([[49658]]) == [49658, 49658]\nassert solution.smallestRange([[-98361, -32179, -4768, -336, 62366, 73275, 88023], [-49006, -42109, -9581, 195, 18555, 47514], [-98430, -90297, -88336, -88228, -87822, -82134, 19773, 51487]]) == [47514, 62366]\nassert solution.smallestRange([[-73414, -64246, 45384, 74487, 90006, 96873]]) == [-73414, -73414]\nassert solution.smallestRange([[-97605, -61230, -28577, -17277, 3835], [-89763, -84842, -58920, -40112, -22354, -19962, -9823, 58122, 89971]]) == [-61230, -58920]\nassert solution.smallestRange([[-89350, -70409, -41344, 36863], [-52835, -11118, 9555, 29396, 37167], [-97402, -94909, -62104, -45856, -811, 8215, 12261, 23235, 71783]]) == [-52835, -41344]\nassert solution.smallestRange([[-67883, -18120, -16318, 32902, 34316, 49931], [-79384, -69692, -22912, 16350, 16439, 38089, 58168, 60683, 97166]]) == [-69692, -67883]\nassert solution.smallestRange([[-47903, -22116, 52174]]) == [-47903, -47903]\nassert solution.smallestRange([[-56924, 77179], [-76428, -19509, -13507, -5604, 69056], [-70397, -66202, -53014, -45633, -37905, 13756]]) == [-76428, -56924]\nassert solution.smallestRange([[-88123, -70367, -40869, 29690, 29878, 42443, 77790]]) == [-88123, -88123]\nassert solution.smallestRange([[-90210, -89302, 39388], [-86837, -86515, -82992, -44153, -21732, -10210, 28953], [-98199, -19327, 36744], [-79719, 20491]]) == [-98199, -79719]\nassert solution.smallestRange([[-9854, 36125, 43625, 65236], [-90293, -55230, -49078, -47061, -9990, 6053], [-87598, -52691, -21688, 31527, 62447, 86631, 92189]]) == [-21688, -9854]\nassert solution.smallestRange([[-47528, 97602], [-39507, 20232]]) == [-47528, -39507]\nassert solution.smallestRange([[-79623, -68934, -67054, -18148, -14030, -12451, -1435, 29018, 40305]]) == [-79623, -79623]\nassert solution.smallestRange([[-41817, -30530, 89507], [-46239, -29337, 6515], [-95929, -27552, 11528, 15106, 17535, 50989], [-63767, -54425, -6249, 17139, 43626, 54440, 65432]]) == [-30530, -6249]\nassert solution.smallestRange([[-98437, -97820, -94862, -92041, -78457, -61001, -49924, -42011, 43154], [-95183, -73006, -66069, -52731, 2382, 12305, 29875], [-94144, -46734, -19587, 6660, 78250], [-32458, -3299, 21855, 41132, 46778, 52492, 69046, 73126, 84676]]) == [-52731, -32458]\nassert solution.smallestRange([[-65717], [-97682, -75279, -19034, 65536, 74891], [-78759, -36165]]) == [-78759, -65717]\nassert solution.smallestRange([[-61091, -52165, -15794, -9149, 1886], [-43775], [-33784, -5455, 59091, 69565]]) == [-52165, -33784]\nassert solution.smallestRange([[-63364, -11283], [-15995, 65545], [-28752, -25807, -11398, -695, 41232, 91428], [-1842, 4240, 19936, 39045, 39642, 83030, 90108]]) == [-15995, -1842]\nassert solution.smallestRange([[-56761, -28093, 13971, 14992, 69867], [-14098, 58284, 93445], [-80235, -77103, -55971, -36392, -24288, 3700, 20876, 30188, 47275, 83965], [-90772, -85615, -78206, -38824, -26069, -21533, -2967, -879, 65451]]) == [-28093, -14098]\nassert solution.smallestRange([[-52102, -45988, -1853, 6492, 40386, 99077], [-83429, -72661, -12951, -11012, 30977, 47327, 62462], [-16373, -8788, 34924, 75645]]) == [-11012, -1853]\nassert solution.smallestRange([[-84727, -79567, 15502, 58396, 65912], [14314, 49200], [-47539, -36902, -29179, 20384, 58840, 85621, 98786]]) == [14314, 20384]\nassert solution.smallestRange([[-47264], [-10224, 14646, 64064, 64318, 66945], [-78454, -47395, -23806, -22569, 38408, 55653, 98625], [-72811, -52215, -48001, -13510, 12316, 25116, 47857]]) == [-47264, -10224]\nassert solution.smallestRange([[-92892, -89947, -76253, -63693, -48218, -42691, -25584, 96844], [-74768, 73958]]) == [-76253, -74768]\nassert solution.smallestRange([[-91088, 39286], [-68328, 27183, 29245, 54913, 65911, 77279, 84322]]) == [29245, 39286]\nassert solution.smallestRange([[-68816, -52243, 36317], [-96096, -88997, -69239, -11503, 3870, 29882, 45857, 48621, 52176, 87152], [-13219, -2823, 8702, 75761], [-94200, -93361, -77167, -75303, -37633, -29098, 17167]]) == [8702, 36317]\nassert solution.smallestRange([[-81062, -33209, -16835, 18294, 54117, 90017, 97285], [4082, 6773, 52891]]) == [52891, 54117]\nassert solution.smallestRange([[-78054, -22192, -15171, 21269]]) == [-78054, -78054]\nassert solution.smallestRange([[-80629, -50798, -21989, -15578, 14773, 22152, 37339, 99859], [-79323], [-78679, -69446, -28338, 19177, 47151, 48725, 56861], [-37423, -1437, 63493]]) == [-79323, -37423]\nassert solution.smallestRange([[-67020, -23744, 77485, 98962], [-92804, -22570, -14331, -3529, -1956, 30349, 60043]]) == [-23744, -22570]\nassert solution.smallestRange([[21705], [-36407, 2820, 38146, 96027]]) == [21705, 38146]\nassert solution.smallestRange([[-74491, -49280, 10836, 80121], [-92412, -74118, -73470, -56094, 22430, 42450, 80951], [-42916, -40748, -38138, 3634, 41093, 46928], [-86894, -80943, -74651, -55260, -7360, -5886, 3099, 10682, 32053, 39475]]) == [-56094, -42916]\nassert solution.smallestRange([[8896]]) == [8896, 8896]\nassert solution.smallestRange([[-92633, -66104, -35048, -14601, -5298, 8262, 12033, 66484, 75623, 98399], [-95828, -76651, -60809, -45085, -35127, -16683, -11942, 24943, 37869, 38636], [-39265, -663]]) == [-39265, -35048]\nassert solution.smallestRange([[-77557, -58254, -16497, 59822], [-89986, 46318, 48219, 54420, 67454, 70362], [-96437, -95306, -59540, -39851, -39132, 12857, 28976, 38212, 58307]]) == [54420, 59822]\nassert solution.smallestRange([[-96552, -26686, 66328, 90062], [-45728]]) == [-45728, -26686]\nassert solution.smallestRange([[-57038, -42915, -29235, -18583, 13464, 39736], [-72482, -68160, -59492, -42198], [-76464, -69610, -3368, 24525, 31280, 64765], [-7759]]) == [-42198, -3368]\nassert solution.smallestRange([[-92035, 26805, 30042, 63867], [-67413, 46546], [-39071, -32173, -20899, 68237, 74410, 89247], [-44371]]) == [-92035, -39071]\nassert solution.smallestRange([[-72387]]) == [-72387, -72387]\nassert solution.smallestRange([[-63737, -44679, 17240, 22514, 42235, 44403, 95295], [-67939, -56126, -55842, -42727, -42587, -35673, -25679, 14498, 62899, 64196], [-96787, -21592, 5052, 8159, 34020]]) == [8159, 17240]\nassert solution.smallestRange([[-42885, -13871, 27689]]) == [-42885, -42885]\nassert solution.smallestRange([[-38292, 13439, 35254]]) == [-38292, -38292]\nassert solution.smallestRange([[-82795, -71151, -50311, -47478, -34373, -23035, -12363, 77595, 78876, 80107], [-94637, -18943, 64518, 76620, 87981, 95463, 99050]]) == [76620, 77595]\nassert solution.smallestRange([[47479]]) == [47479, 47479]\nassert solution.smallestRange([[24919, 91167, 99921], [-51249, -32163, 77725], [-96677, -75203, -74158, -26336, -19021, -13149, 40140, 60702, 88977], [63807, 64140, 64888, 86102, 96489]]) == [77725, 91167]\nassert solution.smallestRange([[-88588, -52467, -8335, 6835], [-65177, -59589, -40642, 21592, 57551], [47131, 48245]]) == [6835, 47131]\nassert solution.smallestRange([[86701, 89936], [-66519], [-884, 29019]]) == [-66519, 86701]\nassert solution.smallestRange([[-92937, -50679, -44009, -6526, 2003, 3050, 9783, 19680, 20808, 39454], [15675, 55038, 76928], [-48652, -29157, 7900, 51914, 53108, 84900, 88931]]) == [7900, 15675]\nassert solution.smallestRange([[-61546, -15252, 36683], [-79045, -52335, -50678, -22825, 25653, 35888, 53288, 65531], [-83819, -83377, 902, 39732, 55174, 55203], [-63044, -42358, -12942, -8412, 27253, 81654, 89581]]) == [27253, 39732]\nassert solution.smallestRange([[54814, 92488]]) == [54814, 54814]\nassert solution.smallestRange([[-98499, -82102, -64453, -60241, -50785, -32446, 61171, 93921]]) == [-98499, -98499]\nassert solution.smallestRange([[-80634, 95125], [-25806, 59, 40438, 51378], [-25143, 61619, 63280]]) == [51378, 95125]\nassert solution.smallestRange([[-88060, -70009, -43682, -17053, 65974, 93847], [-87567, -83456, -47327, -43124, -24901], [-89091, -55701, -37813, 23218], [-80648, -65963, -58445, -48003, -3752, 33457, 77786, 89483]]) == [-89091, -80648]\nassert solution.smallestRange([[-61570, -42791, -11817, 42477]]) == [-61570, -61570]\nassert solution.smallestRange([[-85675, -26443, -14713, 28338, 72877, 77604, 93869, 97146], [-67138, -55708, -28117, -26207, -4779, 17855, 42813, 43713, 58278, 91198]]) == [-26443, -26207]\nassert solution.smallestRange([[-48124, -40600, -32340, 489, 54598, 55695, 71535, 95122], [-50289, -37511, -17907], [-93131, -8508, -7643], [-45389, -33271, 3976, 15101, 27202, 28212]]) == [-17907, 3976]\nassert solution.smallestRange([[-73861, 61268, 64666, 85079]]) == [-73861, -73861]\nassert solution.smallestRange([[-36241, -21138, 45115, 59883, 77727, 85735, 87783, 95858], [-41376], [-84597, -82783, -82249, -59661, -55505, -10046, 66121, 72504], [-67270, -51278, -28627, -11064, -5040, 9501, 19295, 29480, 32799]]) == [-55505, -36241]\nassert solution.smallestRange([[-84567, -69253, -63331, -60953, 34843], [-98491, -45818, 9398, 10632, 26866, 87887, 97351], [94635], [-87684, -82016, 1655, 22519]]) == [22519, 94635]\nassert solution.smallestRange([[13276, 58791], [-43057, 30276, 65137, 87060], [-19512, 43392], [-55890, -44482, -15946, 50794, 80552, 95523]]) == [43392, 65137]\nassert solution.smallestRange([[-72838, -62886, -29118], [-96493, -48391, -45648, -29390, -6642, 21732, 36085, 45405, 83217], [-51888, -26994, -21009, -14915, 19772, 34370, 38830, 94165, 97719], [-92254, -78717, -76209, -47882, 23541, 52469, 56920, 75591, 84675]]) == [-62886, -47882]\nassert solution.smallestRange([[-82955, 33286, 80281]]) == [-82955, -82955]\nassert solution.smallestRange([[-78078, -62543, -57724, -41439, 26666, 62584]]) == [-78078, -78078]\nassert solution.smallestRange([[34096, 50237, 51210]]) == [34096, 34096]\nassert solution.smallestRange([[-67918], [-78162, -69113, -57366, -42414, -24182, 28666, 80336, 87352], [-99129, -89563, -68526, 17856]]) == [-69113, -67918]\nassert solution.smallestRange([[-92931, -75548, -66061, -15132, -7784, 12647, 54721], [-83668, -34799, -29428, 41597, 49289, 66625, 96118]]) == [49289, 54721]\nassert solution.smallestRange([[-99895, -25223, -22404, -14041, 13097, 16608, 20534, 73215, 98547], [-88560, -67462, -29651, -25637, -17166, 71006, 76394, 93722, 94187]]) == [-25637, -25223]\nassert solution.smallestRange([[-16552, -5770, 53001], [-90260, -88640, -81674], [-14607, 20241, 96011], [-32362, 24990]]) == [-81674, -14607]\nassert solution.smallestRange([[-81568, -51289, -1953, 15993, 20741, 44310, 86394]]) == [-81568, -81568]\nassert solution.smallestRange([[80103, 83746, 98444], [-15435, 9568, 18567, 53003], [-11511, 63646], [-90652, -84870, -73880, -45468, -21941, -8505, -5340, 140, 14565]]) == [14565, 80103]\nassert solution.smallestRange([[-73431, -45338, -35135, -34140, 555, 3367, 39893, 52635, 84387], [99201]]) == [84387, 99201]\nassert solution.smallestRange([[-94551, 64440, 70911, 76733, 88631], [-81838, -31811, -18355, 7503, 15302, 20485, 53856, 54720, 64867, 70578]]) == [70578, 70911]\nassert solution.smallestRange([[-98293, -86569, -71805, -71416, -52009, -15077, -14827, 1941, 50040, 71960], [-41554, -40378, -29910, -29279, -19191, 24475, 39479, 58260, 72461], [-86509, -57879, -55788, -25283, -12278, 6987, 41726, 51501, 97973, 98458], [-58104, 72909]]) == [-58104, -41554]\nassert solution.smallestRange([[-22070], [49339]]) == [-22070, 49339]",
        "small_test_cases": "\nsolution = Solution()\nassert solution.smallestRange([[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]) == [20,24]\nassert solution.smallestRange([[1,2,3],[1,2,3],[1,2,3]]) == [1,1]\n",
        "algorithms": [
            "greedy",
            "sliding_window",
            "sorting"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 2366,
        "task_name": "Minimum Replacements to Sort the Array",
        "description": "\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>nums</code>. In one operation you can replace any element of the array with <strong>any two</strong> elements that <strong>sum</strong> to it.</p>\n\n<ul>\n\t<li>For example, consider <code>nums = [5,6,7]</code>. In one operation, we can replace <code>nums[1]</code> with <code>2</code> and <code>4</code> and convert <code>nums</code> to <code>[5,2,4,7]</code>.</li>\n</ul>\n\n<p>Return <em>the minimum number of operations to make an array that is sorted in <strong>non-decreasing</strong> order</em>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,9,3]\n<strong>Output:</strong> 2\n<strong>Explanation:</strong> Here are the steps to sort the array in non-decreasing order:\n- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]\n- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]\nThere are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.\n\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,2,3,4,5]\n<strong>Output:</strong> 0\n<strong>Explanation:</strong> The array is already in non-decreasing order. Therefore, we return 0. \n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nYou are given a **0-indexed** integer array `nums`. In one operation you can replace any element of the array with **any two** elements that **sum** to it.\n\n\n* For example, consider `nums = [5,6,7]`. In one operation, we can replace `nums[1]` with `2` and `4` and convert `nums` to `[5,2,4,7]`.\n\n\nReturn *the minimum number of operations to make an array that is sorted in **non-decreasing** order*.\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** nums = [3,9,3]\n**Output:** 2\n**Explanation:** Here are the steps to sort the array in non-decreasing order:\n- From [3,9,3], replace the 9 with 3 and 6 so the array becomes [3,3,6,3]\n- From [3,3,6,3], replace the 6 with 3 and 3 so the array becomes [3,3,3,3,3]\nThere are 2 steps to sort the array in non-decreasing order. Therefore, we return 2.\n\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** nums = [1,2,3,4,5]\n**Output:** 0\n**Explanation:** The array is already in non-decreasing order. Therefore, we return 0. \n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= nums.length <= 105`\n* `1 <= nums[i] <= 109`\n\n\n",
        "canonical_solution": "class Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom typing import List\n\nclass Solution:\n    def minimumReplacement(self, nums: List[int]) -> int:\n        ans = 0\n        n = len(nums)\n        mx = nums[-1]\n        for i in range(n - 2, -1, -1):\n            if nums[i] <= mx:\n                mx = nums[i]\n                continue\n            k = (nums[i] + mx - 1) // mx\n            ans += k - 1\n            mx = nums[i] // k\n        return ans\n\ndef generate_test_case():\n    solution = Solution()\n    test_case_generator_results = []\n    for i in range(100):\n        # Generate random numbers list\n        nums = random.sample(range(1, 101), random.randint(2, 10))\n\n        # Calculate the expected result using the provided Solution class\n        expected_result = solution.minimumReplacement(nums)\n\n        test_case_generator_results.append(f\"assert solution.minimumReplacement({nums}) == {expected_result}\")\n    \n    return test_case_generator_results\n\nif __name__ == \"__main__\":\n    test_case_generator_results = generate_test_case()\n",
        "test_case": "assert solution.minimumReplacement([73, 81, 20, 65]) == 8\nassert solution.minimumReplacement([100, 44, 45, 79, 96, 46, 49, 26, 2]) == 440\nassert solution.minimumReplacement([1, 39, 96, 15]) == 8\nassert solution.minimumReplacement([95, 89, 30, 62, 8, 85, 56, 16, 66]) == 52\nassert solution.minimumReplacement([46, 53, 72, 81, 57, 26]) == 16\nassert solution.minimumReplacement([13, 99, 62, 39]) == 4\nassert solution.minimumReplacement([94, 8, 30, 87, 24, 44, 26]) == 22\nassert solution.minimumReplacement([94, 1, 87]) == 93\nassert solution.minimumReplacement([99, 56]) == 1\nassert solution.minimumReplacement([74, 31, 9, 70, 37, 82]) == 14\nassert solution.minimumReplacement([10, 1, 21, 13, 44, 89]) == 10\nassert solution.minimumReplacement([83, 28, 94, 20, 82]) == 10\nassert solution.minimumReplacement([98, 21, 23, 100]) == 4\nassert solution.minimumReplacement([8, 26]) == 0\nassert solution.minimumReplacement([69, 50, 59]) == 1\nassert solution.minimumReplacement([7, 26]) == 0\nassert solution.minimumReplacement([31, 46, 21, 61, 98, 66, 47, 33, 88]) == 18\nassert solution.minimumReplacement([19, 68, 76, 92, 94, 66, 58, 70]) == 9\nassert solution.minimumReplacement([88, 86, 42, 85, 82, 71, 43, 3]) == 427\nassert solution.minimumReplacement([69, 29, 79]) == 2\nassert solution.minimumReplacement([23, 47, 40, 7, 52, 44, 34, 31]) == 22\nassert solution.minimumReplacement([86, 47, 71, 53, 83]) == 5\nassert solution.minimumReplacement([17, 34, 43, 97, 9, 86, 80]) == 22\nassert solution.minimumReplacement([64, 20, 38, 32]) == 8\nassert solution.minimumReplacement([85, 24, 19, 5, 28, 10]) == 31\nassert solution.minimumReplacement([87, 58, 71, 27, 22, 60, 13, 67, 59]) == 34\nassert solution.minimumReplacement([41, 95, 15, 59, 76, 48, 10]) == 47\nassert solution.minimumReplacement([56, 20, 82]) == 2\nassert solution.minimumReplacement([1, 26, 59, 67, 96, 53, 47, 61, 39, 18]) == 39\nassert solution.minimumReplacement([86, 11, 18, 94, 35]) == 9\nassert solution.minimumReplacement([81, 40, 29, 39, 24, 91]) == 10\nassert solution.minimumReplacement([37, 7, 90, 17, 55, 3]) == 157\nassert solution.minimumReplacement([7, 55, 44, 28, 3]) == 63\nassert solution.minimumReplacement([86, 63, 29, 14, 58, 66, 9]) == 52\nassert solution.minimumReplacement([74, 10, 11, 58]) == 7\nassert solution.minimumReplacement([97, 77, 45, 25, 50, 3, 5]) == 244\nassert solution.minimumReplacement([75, 82, 83, 79, 15]) == 25\nassert solution.minimumReplacement([100, 3]) == 33\nassert solution.minimumReplacement([93, 7, 62, 51, 88, 21]) == 22\nassert solution.minimumReplacement([48, 54, 45, 7, 70, 29, 37, 33, 100, 77]) == 28\nassert solution.minimumReplacement([31, 13, 98, 65, 9, 48, 24, 78, 1]) == 358\nassert solution.minimumReplacement([65, 83, 99, 59, 50, 16, 94, 55, 11]) == 75\nassert solution.minimumReplacement([43, 58, 38, 1, 51, 14, 46, 17, 52]) == 141\nassert solution.minimumReplacement([84, 14, 1, 13, 52, 56, 3]) == 145\nassert solution.minimumReplacement([5, 89, 43, 61, 28, 41]) == 10\nassert solution.minimumReplacement([76, 17, 93, 96, 47, 64, 7, 22, 54, 36]) == 101\nassert solution.minimumReplacement([44, 89, 63]) == 1\nassert solution.minimumReplacement([8, 48, 35]) == 1\nassert solution.minimumReplacement([54, 60, 46, 8]) == 21\nassert solution.minimumReplacement([35, 27, 48, 14, 96, 68, 44, 64, 24, 58]) == 32\nassert solution.minimumReplacement([44, 88, 45, 89, 35, 50]) == 7\nassert solution.minimumReplacement([61, 90, 3, 30, 5]) == 54\nassert solution.minimumReplacement([15, 31, 51, 91, 33]) == 4\nassert solution.minimumReplacement([52, 96, 10, 99, 97, 64, 20, 25]) == 30\nassert solution.minimumReplacement([16, 54, 74, 82]) == 0\nassert solution.minimumReplacement([80, 33, 13, 52]) == 9\nassert solution.minimumReplacement([76, 54, 19, 78]) == 6\nassert solution.minimumReplacement([49, 75, 63, 29]) == 7\nassert solution.minimumReplacement([71, 7, 68, 16, 5, 64, 48, 88]) == 44\nassert solution.minimumReplacement([30, 9, 18, 20, 10, 75, 21]) == 8\nassert solution.minimumReplacement([36, 24]) == 1\nassert solution.minimumReplacement([50, 79]) == 0\nassert solution.minimumReplacement([78, 59, 73, 26]) == 8\nassert solution.minimumReplacement([5, 2, 33, 27, 1, 49, 41, 72]) == 64\nassert solution.minimumReplacement([43, 9, 80]) == 4\nassert solution.minimumReplacement([75, 18, 26, 83, 28, 22, 82, 95]) == 16\nassert solution.minimumReplacement([81, 72, 91, 13, 80]) == 17\nassert solution.minimumReplacement([2, 31, 41, 32, 18, 27]) == 5\nassert solution.minimumReplacement([20, 91, 16, 14, 41, 6, 1, 94]) == 182\nassert solution.minimumReplacement([5, 91, 7, 74, 96]) == 12\nassert solution.minimumReplacement([19, 42, 56, 24, 11, 60, 93, 55]) == 17\nassert solution.minimumReplacement([38, 23, 86, 51, 95, 2, 91, 52]) == 242\nassert solution.minimumReplacement([95, 49, 73, 40]) == 5\nassert solution.minimumReplacement([40, 93, 12]) == 10\nassert solution.minimumReplacement([9, 48, 2, 3, 90, 52, 78]) == 28\nassert solution.minimumReplacement([36, 52]) == 0\nassert solution.minimumReplacement([48, 2, 70, 96, 77, 65, 21]) == 41\nassert solution.minimumReplacement([83, 24, 17, 59, 54]) == 8\nassert solution.minimumReplacement([32, 41, 38, 51, 18, 58, 81, 2, 13]) == 272\nassert solution.minimumReplacement([40, 6, 47, 29, 26, 99, 81, 54]) == 13\nassert solution.minimumReplacement([77, 36]) == 2\nassert solution.minimumReplacement([6, 71, 31, 75, 62]) == 3\nassert solution.minimumReplacement([92, 64, 56, 31, 90]) == 7\nassert solution.minimumReplacement([57, 74, 22, 24, 12]) == 13\nassert solution.minimumReplacement([9, 95, 24, 14, 81, 53]) == 9\nassert solution.minimumReplacement([27, 87, 50, 15, 68, 4, 18, 65]) == 104\nassert solution.minimumReplacement([35, 38, 3]) == 29\nassert solution.minimumReplacement([93, 64, 80, 1, 47]) == 234\nassert solution.minimumReplacement([65, 28, 47, 49]) == 2\nassert solution.minimumReplacement([24, 99, 92, 1, 75]) == 212\nassert solution.minimumReplacement([48, 62]) == 0\nassert solution.minimumReplacement([86, 80, 34, 84, 63, 18, 1]) == 359\nassert solution.minimumReplacement([44, 23, 88, 49, 82, 22, 26]) == 14\nassert solution.minimumReplacement([85, 83, 90, 14]) == 19\nassert solution.minimumReplacement([85, 69]) == 1\nassert solution.minimumReplacement([85, 1, 78, 100, 68]) == 86\nassert solution.minimumReplacement([11, 70, 99, 28]) == 5\nassert solution.minimumReplacement([26, 9, 67, 74, 2, 40, 61, 20, 92, 16]) == 118\nassert solution.minimumReplacement([6, 79, 30]) == 2\nassert solution.minimumReplacement([6, 23, 89, 25, 21]) == 10",
        "small_test_cases": "\nsolution = Solution()\nassert solution.minimumReplacement([3,9,3]) == 2\nassert solution.minimumReplacement([1,2,3,4,5]) == 0\n",
        "algorithms": [
            "greedy"
        ],
        "difficulty": "Hard"
    },
    {
        "problem_idx": 2234,
        "task_name": "Maximum Total Beauty of the Gardens",
        "description": "\n\n<p>Alice is a caretaker of <code>n</code> gardens and she wants to plant flowers to maximize the total beauty of all her gardens.</p>\n\n<p>You are given a <strong>0-indexed</strong> integer array <code>flowers</code> of size <code>n</code>, where <code>flowers[i]</code> is the number of flowers already planted in the <code>i<sup>th</sup></code> garden. Flowers that are already planted <strong>cannot</strong> be removed. You are then given another integer <code>newFlowers</code>, which is the <strong>maximum</strong> number of flowers that Alice can additionally plant. You are also given the integers <code>target</code>, <code>full</code>, and <code>partial</code>.</p>\n\n<p>A garden is considered <strong>complete</strong> if it has <strong>at least</strong> <code>target</code> flowers. The <strong>total beauty</strong> of the gardens is then determined as the <strong>sum</strong> of the following:</p>\n\n<ul>\n\t<li>The number of <strong>complete</strong> gardens multiplied by <code>full</code>.</li>\n\t<li>The <strong>minimum</strong> number of flowers in any of the <strong>incomplete</strong> gardens multiplied by <code>partial</code>. If there are no incomplete gardens, then this value will be <code>0</code>.</li>\n</ul>\n\n<p>Return <em>the <strong>maximum</strong> total beauty that Alice can obtain after planting at most </em><code>newFlowers</code><em> flowers.</em></p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\n<strong>Output:</strong> 14\n<strong>Explanation:</strong> Alice can plant\n- 2 flowers in the 0<sup>th</sup> garden\n- 3 flowers in the 1<sup>st</sup> garden\n- 1 flower in the 2<sup>nd</sup> garden\n- 1 flower in the 3<sup>rd</sup> garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\n<strong>Output:</strong> 30\n<strong>Explanation:</strong> Alice can plant\n- 3 flowers in the 0<sup>th</sup> garden\n- 0 flowers in the 1<sup>st</sup> garden\n- 0 flowers in the 2<sup>nd</sup> garden\n- 2 flowers in the 3<sup>rd</sup> garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= flowers.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= flowers[i], target &lt;= 10<sup>5</sup></code></li>\n\t<li><code>1 &lt;= newFlowers &lt;= 10<sup>10</sup></code></li>\n\t<li><code>1 &lt;= full, partial &lt;= 10<sup>5</sup></code></li>\n</ul>\n\n",
        "markdown_description": "\nAlice is a caretaker of `n` gardens and she wants to plant flowers to maximize the total beauty of all her gardens.\n\n\nYou are given a **0-indexed** integer array `flowers` of size `n`, where `flowers[i]` is the number of flowers already planted in the `ith` garden. Flowers that are already planted **cannot** be removed. You are then given another integer `newFlowers`, which is the **maximum** number of flowers that Alice can additionally plant. You are also given the integers `target`, `full`, and `partial`.\n\n\nA garden is considered **complete** if it has **at least** `target` flowers. The **total beauty** of the gardens is then determined as the **sum** of the following:\n\n\n* The number of **complete** gardens multiplied by `full`.\n* The **minimum** number of flowers in any of the **incomplete** gardens multiplied by `partial`. If there are no incomplete gardens, then this value will be `0`.\n\n\nReturn *the **maximum** total beauty that Alice can obtain after planting at most* `newFlowers` *flowers.*\n\n\n\u00a0\n\n\n**Example 1:**\n\n\n\n```\n\n**Input:** flowers = [1,3,1,1], newFlowers = 7, target = 6, full = 12, partial = 1\n**Output:** 14\n**Explanation:** Alice can plant\n- 2 flowers in the 0th garden\n- 3 flowers in the 1st garden\n- 1 flower in the 2nd garden\n- 1 flower in the 3rd garden\nThe gardens will then be [3,6,2,2]. She planted a total of 2 + 3 + 1 + 1 = 7 flowers.\nThere is 1 garden that is complete.\nThe minimum number of flowers in the incomplete gardens is 2.\nThus, the total beauty is 1 * 12 + 2 * 1 = 12 + 2 = 14.\nNo other way of planting flowers can obtain a total beauty higher than 14.\n\n```\n\n**Example 2:**\n\n\n\n```\n\n**Input:** flowers = [2,4,5,3], newFlowers = 10, target = 5, full = 2, partial = 6\n**Output:** 30\n**Explanation:** Alice can plant\n- 3 flowers in the 0th garden\n- 0 flowers in the 1st garden\n- 0 flowers in the 2nd garden\n- 2 flowers in the 3rd garden\nThe gardens will then be [5,4,5,5]. She planted a total of 3 + 0 + 0 + 2 = 5 flowers.\nThere are 3 gardens that are complete.\nThe minimum number of flowers in the incomplete gardens is 4.\nThus, the total beauty is 3 * 2 + 4 * 6 = 6 + 24 = 30.\nNo other way of planting flowers can obtain a total beauty higher than 30.\nNote that Alice could make all the gardens complete but in this case, she would obtain a lower total beauty.\n\n```\n\n\u00a0\n\n\n**Constraints:**\n\n\n* `1 <= flowers.length <= 105`\n* `1 <= flowers[i], target <= 105`\n* `1 <= newFlowers <= 1010`\n* `1 <= full, partial <= 105`\n\n\n",
        "canonical_solution": "class Solution:\n    def maximumBeauty(\n        self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int\n    ) -> int:\n        flowers.sort()\n        n = len(flowers)\n        s = list(accumulate(flowers, initial=0))\n        ans, i = 0, n - bisect_left(flowers, target)\n        for x in range(i, n + 1):\n            newFlowers -= 0 if x == 0 else max(target - flowers[n - x], 0)\n            if newFlowers < 0:\n                break\n            l, r = 0, n - x - 1\n            while l < r:\n                mid = (l + r + 1) >> 1\n                if flowers[mid] * (mid + 1) - s[mid + 1] <= newFlowers:\n                    l = mid\n                else:\n                    r = mid - 1\n            y = 0\n            if r != -1:\n                cost = flowers[l] * (l + 1) - s[l + 1]\n                y = min(flowers[l] + (newFlowers - cost) // (l + 1), target - 1)\n            ans = max(ans, x * full + y * partial)\n        return ans\n",
        "test_case_generator": "\nimport random\nfrom itertools import accumulate\nfrom bisect import bisect_left\nfrom typing import List\n\n# Task solution class\nclass Solution:\n    def maximumBeauty(\n        self, flowers: List[int], newFlowers: int, target: int, full: int, partial: int\n    ) -> int:\n        flowers.sort()\n        n = len(flowers)\n        s = list(accumulate(flowers, initial=0))\n        ans, i = 0, n - bisect_left(flowers, target)\n        for x in range(i, n + 1):\n            newFlowers -= 0 if x == 0 else max(target - flowers[n - x], 0)\n            if newFlowers < 0:\n                break\n            l, r = 0, n - x - 1\n            while l < r:\n                mid = (l + r + 1) >> 1\n                if flowers[mid] * (mid + 1) - s[mid + 1] <= newFlowers:\n                    l = mid\n                else:\n                    r = mid - 1\n            y = 0\n            if r != -1:\n                cost = flowers[l] * (l + 1) - s[l + 1]\n                y = min(flowers[l] + (newFlowers - cost) // (l + 1), target - 1)\n            ans = max(ans, x * full + y * partial)\n        return ans\n\n# Test case generator\nclass TestCaseGenerator:\n    def __init__(self):\n        self.solution = Solution()\n\n    def generate_test_case(self):\n        # Generate random numbers list\n        flowers = random.sample(range(1, 101), random.randint(2, 10))\n\n        # Generate the maximum number of new flowers that Alice can plant\n        newFlowers = random.randint(1, 101)\n\n        # Generate the target number of flowers for completeness\n        target = random.randint(1, 101)\n\n        # Generate random values for full and partial beauty\n        full = random.randint(1, 101)\n        partial = random.randint(1, 101)\n\n        # Calculate the expected result using the provided Solution class\n        expected_result = self.solution.maximumBeauty(flowers, newFlowers, target, full, partial)\n\n        return flowers, newFlowers, target, full, partial, expected_result\n\n    def test_generated_test_cases(self, num_tests):\n        test_case_generator_results = []\n        for i in range(num_tests):\n            flowers, newFlowers, target, full, partial, expected_result = self.generate_test_case()\n            solution = Solution()\n            assert solution.maximumBeauty(flowers, newFlowers, target, full, partial) == expected_result\n            print(f\"assert solution.maximumBeauty({flowers}, {newFlowers}, {target}, {full}, {partial}) == {expected_result}\")\n            test_case_generator_results.append(f\"assert solution.maximumBeauty({flowers}, {newFlowers}, {target}, {full}, {partial}) == {expected_result}\")\n        return test_case_generator_results\n\nif __name__ == \"__main__\":\n    num_tests = 100  # You can change this to generate more test cases\n    test_case_generator = TestCaseGenerator()\n    test_case_generator_results = test_case_generator.test_generated_test_cases(num_tests)\n",
        "test_case": "assert solution.maximumBeauty([1, 6, 29, 53, 54, 85, 91, 93, 96, 100], 3, 56, 22, 46) == 294\nassert solution.maximumBeauty([20, 50, 60, 68], 6, 31, 39, 94) == 2561\nassert solution.maximumBeauty([13, 44, 54, 74, 77, 79, 91], 43, 73, 88, 57) == 3202\nassert solution.maximumBeauty([2, 6, 41, 51, 80], 72, 1, 30, 38) == 150\nassert solution.maximumBeauty([5, 26, 34, 51, 77, 87, 88], 91, 73, 48, 67) == 3561\nassert solution.maximumBeauty([9, 14, 19, 41, 66, 73, 80, 81, 90], 39, 79, 39, 59) == 1710\nassert solution.maximumBeauty([10, 28, 29, 37, 42, 50, 57, 91, 92], 12, 20, 62, 61) == 1655\nassert solution.maximumBeauty([13, 18, 68], 73, 20, 98, 25) == 671\nassert solution.maximumBeauty([4, 35, 38, 69], 81, 86, 82, 63) == 3276\nassert solution.maximumBeauty([2, 5, 24, 37, 41, 48, 50, 69, 78], 96, 20, 9, 46) == 946\nassert solution.maximumBeauty([2, 9, 16, 17, 23, 37, 39, 77, 82, 95], 47, 28, 34, 78) == 1886\nassert solution.maximumBeauty([3, 74], 97, 56, 35, 65) == 3610\nassert solution.maximumBeauty([3, 5, 7, 36, 72, 87, 100], 75, 51, 10, 82) == 2490\nassert solution.maximumBeauty([79, 100], 54, 92, 63, 62) == 5705\nassert solution.maximumBeauty([9, 19, 50, 58, 69, 71, 75, 78, 84, 93], 31, 53, 60, 41) == 1628\nassert solution.maximumBeauty([9, 17, 28, 52, 57, 65, 89, 96, 98], 3, 58, 87, 94) == 1476\nassert solution.maximumBeauty([1, 9, 26, 27, 29, 56, 61, 77, 92, 98], 67, 5, 83, 76) == 1051\nassert solution.maximumBeauty([4, 32, 53, 59, 61, 65, 75, 76, 81, 88], 96, 77, 96, 15) == 1326\nassert solution.maximumBeauty([38, 44, 46, 60], 91, 15, 79, 3) == 316\nassert solution.maximumBeauty([31, 37, 65, 72, 73, 94], 33, 27, 33, 23) == 198\nassert solution.maximumBeauty([32, 48, 50, 57, 68, 72, 78], 57, 101, 8, 4) == 244\nassert solution.maximumBeauty([24, 36, 76], 35, 30, 37, 92) == 2742\nassert solution.maximumBeauty([69, 99], 52, 101, 7, 15) == 1507\nassert solution.maximumBeauty([14, 23, 25, 53, 72], 47, 19, 101, 65) == 1574\nassert solution.maximumBeauty([12, 32, 47, 58, 69], 78, 13, 61, 20) == 484\nassert solution.maximumBeauty([61, 74], 92, 96, 16, 53) == 5051\nassert solution.maximumBeauty([6, 13, 19, 30, 36, 89, 91, 95, 96], 93, 72, 67, 28) == 1360\nassert solution.maximumBeauty([1, 16, 41, 66, 72], 55, 32, 36, 86) == 2810\nassert solution.maximumBeauty([21, 54, 74, 78], 4, 77, 24, 100) == 2524\nassert solution.maximumBeauty([67, 89], 30, 83, 33, 11) == 935\nassert solution.maximumBeauty([15, 23, 38, 45, 49, 56, 57, 73, 82], 47, 9, 84, 17) == 756\nassert solution.maximumBeauty([15, 21, 34, 44, 54, 96], 82, 60, 81, 9) == 639\nassert solution.maximumBeauty([62, 68], 55, 99, 45, 54) == 4968\nassert solution.maximumBeauty([24, 42, 45, 52, 57, 98], 80, 34, 8, 76) == 2548\nassert solution.maximumBeauty([37, 92], 34, 84, 30, 98) == 6988\nassert solution.maximumBeauty([37, 54, 78, 80, 89, 96], 12, 41, 12, 21) == 900\nassert solution.maximumBeauty([21, 38, 56, 58, 73, 82, 91, 99, 100], 63, 50, 84, 88) == 4984\nassert solution.maximumBeauty([12, 15, 19, 39, 44, 76, 98], 40, 80, 11, 78) == 2195\nassert solution.maximumBeauty([8, 19, 33, 50, 66, 70, 76, 82, 89, 96], 77, 90, 72, 75) == 3519\nassert solution.maximumBeauty([1, 5, 10, 13, 23, 29, 31, 32, 53, 72], 37, 19, 9, 2) == 100\nassert solution.maximumBeauty([14, 42, 53], 1, 7, 82, 95) == 246\nassert solution.maximumBeauty([6, 18, 25, 43, 47, 67], 83, 74, 96, 93) == 3999\nassert solution.maximumBeauty([3, 40, 73, 89, 97], 73, 59, 54, 97) == 5788\nassert solution.maximumBeauty([2, 21, 25, 46, 53, 57, 62], 46, 67, 43, 64) == 1984\nassert solution.maximumBeauty([29, 44, 59, 61, 83, 86, 92], 77, 58, 45, 29) == 1923\nassert solution.maximumBeauty([26, 92, 100], 39, 33, 57, 6) == 306\nassert solution.maximumBeauty([1, 10, 12, 36, 44, 52, 63, 95], 29, 62, 92, 36) == 796\nassert solution.maximumBeauty([14, 51, 65, 99], 80, 3, 38, 25) == 152\nassert solution.maximumBeauty([25, 46], 86, 51, 88, 73) == 3738\nassert solution.maximumBeauty([17, 74, 93], 94, 91, 63, 88) == 8046\nassert solution.maximumBeauty([12, 26, 34, 36, 39, 50, 51, 61, 72, 99], 53, 41, 76, 17) == 1296\nassert solution.maximumBeauty([24, 27, 43, 54, 69, 89, 90, 97, 98], 31, 52, 85, 25) == 1535\nassert solution.maximumBeauty([41, 46, 48, 55, 60, 71, 98], 59, 21, 18, 37) == 126\nassert solution.maximumBeauty([9, 43], 85, 23, 37, 94) == 2105\nassert solution.maximumBeauty([6, 14, 30, 37, 38, 43, 95], 41, 35, 44, 67) == 2186\nassert solution.maximumBeauty([6, 56, 86, 88], 76, 40, 6, 83) == 3255\nassert solution.maximumBeauty([21, 37, 86, 92, 96], 7, 75, 97, 80) == 2531\nassert solution.maximumBeauty([5, 28, 39, 46, 50, 62, 68, 71, 96], 101, 77, 71, 64) == 3470\nassert solution.maximumBeauty([22, 35, 36, 50, 100], 68, 96, 92, 6) == 412\nassert solution.maximumBeauty([4, 9, 32, 42, 66, 72, 73, 82], 9, 75, 72, 93) == 1095\nassert solution.maximumBeauty([2, 10, 11, 32, 46, 48, 64, 74, 79, 93], 12, 83, 94, 23) == 418\nassert solution.maximumBeauty([3, 22, 26, 31, 33, 37, 79, 86, 87], 7, 75, 62, 54) == 726\nassert solution.maximumBeauty([4, 14, 29, 41, 48, 50, 64, 67, 69], 52, 15, 49, 90) == 1652\nassert solution.maximumBeauty([65, 94], 88, 65, 34, 35) == 68\nassert solution.maximumBeauty([1, 4, 48, 55, 74, 94], 36, 65, 51, 10) == 303\nassert solution.maximumBeauty([20, 65], 90, 98, 73, 23) == 2001\nassert solution.maximumBeauty([10, 56], 100, 64, 22, 68) == 4306\nassert solution.maximumBeauty([32, 67], 2, 96, 17, 3) == 102\nassert solution.maximumBeauty([1, 17, 60, 69, 76], 10, 45, 19, 62) == 739\nassert solution.maximumBeauty([10, 19, 55, 59, 60, 64, 67], 90, 21, 64, 99) == 2364\nassert solution.maximumBeauty([11, 14, 32, 39, 66, 85], 85, 84, 64, 95) == 4339\nassert solution.maximumBeauty([28, 32, 36, 37, 44, 68, 72, 97, 99], 58, 87, 72, 49) == 2447\nassert solution.maximumBeauty([37, 52, 54, 61, 63, 65, 84, 86, 89, 100], 34, 60, 14, 6) == 468\nassert solution.maximumBeauty([13, 32, 48, 67, 72, 73, 99], 20, 12, 39, 81) == 273\nassert solution.maximumBeauty([11, 25, 48, 57, 63, 64, 70, 76, 95], 1, 93, 24, 97) == 1188\nassert solution.maximumBeauty([70, 75, 78], 73, 97, 65, 14) == 1474\nassert solution.maximumBeauty([32, 98], 13, 8, 55, 34) == 110\nassert solution.maximumBeauty([3, 15, 29, 37, 58, 69, 74, 76, 99], 13, 9, 87, 25) == 896\nassert solution.maximumBeauty([4, 25, 45, 60, 67, 79, 91, 92], 28, 65, 70, 63) == 2044\nassert solution.maximumBeauty([9, 36, 39, 44, 64, 67, 78, 85], 51, 61, 49, 35) == 1736\nassert solution.maximumBeauty([16, 28, 31, 38, 41, 71, 80], 12, 86, 61, 69) == 1932\nassert solution.maximumBeauty([32, 87], 45, 66, 25, 57) == 3730\nassert solution.maximumBeauty([7, 18, 35, 37, 47, 51, 59, 82, 90, 92], 78, 62, 89, 58) == 2850\nassert solution.maximumBeauty([35, 36, 49, 60, 63, 87, 92, 99], 96, 75, 38, 74) == 5072\nassert solution.maximumBeauty([11, 21, 22, 53, 83], 36, 98, 26, 13) == 390\nassert solution.maximumBeauty([2, 28, 30, 40, 47, 49, 50, 58, 72], 82, 97, 9, 35) == 1575\nassert solution.maximumBeauty([86, 94], 68, 49, 71, 89) == 142\nassert solution.maximumBeauty([14, 22, 23, 35, 46, 49, 54, 57, 85, 93], 62, 37, 75, 11) == 1071\nassert solution.maximumBeauty([8, 27, 34, 46, 56], 50, 61, 56, 49) == 1918\nassert solution.maximumBeauty([7, 23, 75], 15, 73, 11, 28) == 627\nassert solution.maximumBeauty([3, 15, 31, 49, 55, 56, 64, 68, 97], 19, 57, 75, 7) == 527\nassert solution.maximumBeauty([63, 65, 74], 56, 7, 77, 18) == 231\nassert solution.maximumBeauty([9, 12, 20, 30, 68, 73, 82], 81, 89, 78, 92) == 3496\nassert solution.maximumBeauty([74, 86], 5, 66, 26, 96) == 52\nassert solution.maximumBeauty([12, 19, 26, 31, 38, 44, 57, 62, 70], 49, 31, 7, 60) == 1856\nassert solution.maximumBeauty([1, 58, 69, 74, 76], 61, 31, 77, 11) == 638\nassert solution.maximumBeauty([9, 81], 52, 60, 87, 81) == 4866\nassert solution.maximumBeauty([61, 71, 79], 37, 70, 2, 67) == 4627\nassert solution.maximumBeauty([65, 71], 8, 67, 12, 41) == 2718\nassert solution.maximumBeauty([1, 32, 38, 61, 81, 83], 11, 73, 26, 5) == 112",
        "small_test_cases": "\nsolution = Solution()\nassert solution.maximumBeauty([1,3,1,1], 7, 6, 12, 1) == 14\nassert solution.maximumBeauty([2,4,5,3], 10, 5, 2, 6) == 30\n",
        "algorithms": [
            "greedy",
            "binary_search",
            "two_pointers",
            "sorting"
        ],
        "difficulty": "Hard"
    }
]