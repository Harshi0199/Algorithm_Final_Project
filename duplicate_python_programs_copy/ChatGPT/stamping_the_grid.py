class Solution(object):
    def possibleToStamp(self, grid, stampHeight, stampWidth):
        """
        :type grid: List[List[int]]
        :type stampHeight: int
        :type stampWidth: int
        :rtype: bool
        """
        m, n = len(grid), len(grid[0])

        # Step 1: Compute prefix sum for the grid
        preSum = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m):
            for j in range(n):
                preSum[i+1][j+1] = grid[i][j] + preSum[i][j+1] + preSum[i+1][j] - preSum[i][j]

        def is_area_empty(r1, c1, r2, c2):
            return (preSum[r2][c2] - preSum[r1][c2] - preSum[r2][c1] + preSum[r1][c1]) == 0

        # Step 2: Use difference matrix to mark valid stamp positions
        diff = [[0] * (n + 2) for _ in range(m + 2)]
        for i in range(m - stampHeight + 1):
            for j in range(n - stampWidth + 1):
                if is_area_empty(i, j, i + stampHeight, j + stampWidth):
                    diff[i][j] += 1
                    diff[i + stampHeight][j] -= 1
                    diff[i][j + stampWidth] -= 1
                    diff[i + stampHeight][j + stampWidth] += 1

        # Step 3: Compute actual coverage using prefix sum of difference matrix
        cover = [[0] * (n + 1) for _ in range(m + 1)]
        for i in range(m):
            for j in range(n):
                if i > 0:
                    diff[i][j] += diff[i-1][j]
                if j > 0:
                    diff[i][j] += diff[i][j-1]
                if i > 0 and j > 0:
                    diff[i][j] -= diff[i-1][j-1]
                cover[i][j] = diff[i][j]

        # Step 4: Check all empty cells are covered
        for i in range(m):
            for j in range(n):
                if grid[i][j] == 0 and cover[i][j] <= 0:
                    return False
        return True

solution=Solution()
# --------------------------------------
# Test Cases:
assert solution.possibleToStamp([[1, 1, 1, 0, 0, 1], [0, 1, 0, 1, 1, 1]], 2, 1) == False
assert solution.possibleToStamp([[0, 0, 0, 0], [0, 0, 1, 0], [1, 1, 1, 0], [1, 1, 0, 1], [1, 0, 1, 1], [1, 1, 0, 0], [0, 0, 0, 0], [1, 0, 1, 1], [0, 0, 1, 1], [0, 1, 0, 1]], 4, 1) == False
assert solution.possibleToStamp([[1, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 1, 1, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0, 0, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 0, 0, 1, 0, 1, 1, 0]], 3, 5) == False
assert solution.possibleToStamp([[1, 0, 1, 0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 0, 0, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 0]], 8, 3) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 0, 1, 0, 1, 1, 1]], 5, 2) == False
assert solution.possibleToStamp([[0, 0, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1, 0]], 2, 4) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 1, 1, 0, 1, 1, 0, 0, 0]], 1, 6) == False
assert solution.possibleToStamp([[1, 0, 1, 0, 1, 1, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 0, 0, 0, 1, 1]], 1, 10) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0, 1], [1, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 0, 1, 1, 0, 0, 1, 0, 0], [0, 0, 0, 0, 0, 0, 1, 1, 1], [1, 0, 0, 0, 0, 0, 0, 1, 0], [0, 1, 1, 0, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 1, 1, 0, 1]], 2, 5) == False
assert solution.possibleToStamp([[0, 0, 0, 0], [1, 0, 1, 0]], 2, 1) == False
assert solution.possibleToStamp([[1, 1, 0], [0, 0, 0], [1, 0, 1], [0, 0, 0], [0, 1, 0], [0, 1, 0], [1, 1, 1], [1, 0, 0]], 8, 2) == False
assert solution.possibleToStamp([[0, 0, 1, 0, 1, 1, 1, 0, 1], [1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 1, 0, 1, 1]], 1, 3) == False
assert solution.possibleToStamp([[0, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 0, 1], [0, 0, 0, 0, 0, 1, 0, 0, 0]], 2, 1) == False
assert solution.possibleToStamp([[0, 1, 1, 0, 1, 1, 0, 0], [0, 1, 0, 1, 0, 1, 0, 1], [1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 1, 1, 0, 1, 0, 0]], 4, 3) == False
assert solution.possibleToStamp([[1, 0, 0], [1, 0, 0], [1, 1, 0], [1, 0, 0], [0, 1, 0], [1, 0, 0], [1, 1, 1], [0, 1, 0]], 6, 1) == False
assert solution.possibleToStamp([[0, 0], [0, 0], [0, 0], [0, 0], [0, 1]], 5, 1) == False
assert solution.possibleToStamp([[0, 1, 0], [1, 1, 0], [0, 0, 1], [1, 1, 1], [1, 1, 1], [0, 0, 1], [0, 1, 0], [0, 0, 1], [0, 1, 1]], 5, 2) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 0, 1, 1], [0, 1, 1, 1, 0, 1, 1], [1, 1, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1], [0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1]], 1, 4) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 1, 1, 0, 1, 0, 0], [1, 1, 1, 0, 0, 0, 1, 0, 1, 1], [0, 1, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 1, 1, 1, 0, 0, 1], [0, 1, 1, 0, 0, 1, 0, 1, 1, 1], [0, 0, 0, 1, 1, 1, 0, 1, 0, 1], [0, 1, 1, 1, 1, 1, 0, 0, 0, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0, 1]], 7, 1) == False
assert solution.possibleToStamp([[0, 1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 0, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1, 1], [0, 1, 0, 0, 0, 0, 1, 0, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1], [1, 0, 0, 0, 1, 1, 0, 0, 0], [0, 0, 0, 0, 0, 0, 1, 0, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 0, 1, 1, 0], [0, 1, 0, 0, 0, 0, 0, 1, 1]], 8, 1) == False
assert solution.possibleToStamp([[0, 0, 1, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 1, 0, 0, 0, 1], [1, 0, 1, 1, 1, 0, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 1, 0]], 4, 9) == False
assert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 0, 1], [1, 1, 0, 1, 0, 1, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0, 1, 1]], 4, 7) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 1], [1, 0, 1, 1, 1], [0, 0, 1, 0, 0]], 1, 5) == False
assert solution.possibleToStamp([[0, 1, 0], [0, 0, 0]], 1, 1) == True
assert solution.possibleToStamp([[1, 1, 0], [0, 0, 1], [1, 0, 1], [1, 1, 1]], 1, 2) == False
assert solution.possibleToStamp([[0, 0, 1], [1, 0, 1], [1, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 1], [1, 0, 0], [0, 1, 1]], 2, 1) == False
assert solution.possibleToStamp([[0, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]], 2, 3) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 0, 0, 1, 1, 1, 1], [1, 1, 1, 1, 0, 1, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 1, 1, 1, 0, 1, 1, 0], [0, 0, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 1, 1, 0, 1, 1, 1]], 7, 9) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 0, 0, 1, 1, 0, 1], [1, 1, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 0, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1, 0, 0, 0], [1, 0, 0, 0, 0, 0, 0, 0, 1]], 3, 2) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 0, 0], [0, 0, 1, 0, 1, 0, 0, 1, 0, 1], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1], [1, 0, 1, 1, 1, 1, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [0, 1, 0, 1, 0, 1, 1, 0, 1, 1], [1, 1, 1, 0, 1, 1, 1, 1, 0, 0]], 5, 2) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 0], [1, 0, 0, 0, 0]], 2, 4) == False
assert solution.possibleToStamp([[1, 1, 0, 1, 0, 1, 0], [0, 1, 1, 0, 1, 0, 1], [1, 1, 1, 0, 1, 1, 0], [0, 1, 1, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1]], 3, 5) == False
assert solution.possibleToStamp([[0, 1, 0, 1, 0, 0, 0], [0, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 1, 0]], 2, 7) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 0, 0, 0], [0, 1, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1], [0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 0, 1], [0, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 1, 1, 0], [0, 1, 1, 1, 0, 1, 1]], 4, 6) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 1, 0, 0, 1, 0, 0], [1, 0, 0, 0, 1, 1, 1, 1, 1, 1], [1, 1, 1, 0, 0, 1, 0, 0, 0, 0], [0, 1, 1, 1, 0, 0, 0, 1, 0, 0], [0, 0, 0, 0, 1, 0, 1, 1, 1, 1]], 2, 3) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1, 0], [0, 1, 0, 0, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0], [1, 0, 0, 1, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0, 1], [1, 0, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 0], [0, 1, 1, 1, 1, 0, 0, 0]], 9, 3) == False
assert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1, 1, 1, 1], [0, 0, 1, 1, 0, 1, 1, 0, 1, 1], [0, 1, 0, 0, 0, 0, 0, 1, 1, 0]], 1, 8) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0, 0], [1, 1, 0, 0, 0, 0, 1, 1, 1], [1, 1, 1, 1, 1, 0, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1], [0, 0, 1, 0, 0, 1, 1, 0, 0], [0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1, 0, 0]], 1, 3) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 1], [0, 1, 1, 1, 0], [1, 1, 0, 0, 0], [1, 0, 0, 0, 0], [0, 0, 1, 1, 0], [0, 1, 1, 1, 1], [0, 0, 0, 1, 1], [0, 0, 1, 1, 1], [0, 1, 0, 0, 1], [0, 0, 0, 1, 0]], 4, 5) == False
assert solution.possibleToStamp([[0, 1, 1], [1, 0, 1], [1, 0, 0], [0, 0, 0], [0, 1, 1]], 5, 3) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 1, 1], [1, 1, 0, 0, 1, 0], [0, 0, 1, 1, 0, 1], [0, 1, 0, 0, 1, 1]], 3, 4) == False
assert solution.possibleToStamp([[1, 0, 0, 1, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 1, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 1, 1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 1, 1, 1, 1, 1, 1], [1, 1, 0, 0, 0, 1, 1, 0, 0], [1, 0, 0, 0, 0, 1, 0, 0, 1]], 6, 8) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 1, 0, 1, 0], [1, 1, 0, 1, 1, 1, 1, 1], [0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 1, 0, 1, 0, 0, 1], [1, 0, 0, 0, 1, 1, 1, 1]], 4, 2) == False
assert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0, 1]], 2, 7) == False
assert solution.possibleToStamp([[0, 1, 0], [0, 1, 0], [0, 0, 1], [0, 0, 1]], 4, 2) == False
assert solution.possibleToStamp([[1, 0], [1, 0]], 1, 2) == False
assert solution.possibleToStamp([[1, 1, 0, 1, 0], [1, 1, 0, 0, 1], [1, 0, 1, 1, 0], [0, 0, 1, 1, 0], [0, 1, 0, 1, 0], [0, 1, 1, 0, 0], [1, 1, 0, 1, 0], [0, 0, 1, 1, 0], [0, 0, 1, 1, 0], [1, 1, 1, 0, 1]], 10, 5) == False
assert solution.possibleToStamp([[1, 1, 0, 1], [0, 0, 0, 1], [1, 1, 0, 1], [1, 0, 0, 0], [0, 0, 0, 1], [1, 0, 0, 1], [0, 0, 0, 1], [1, 1, 0, 0], [0, 0, 1, 0], [0, 1, 0, 1]], 1, 1) == True
assert solution.possibleToStamp([[1, 1, 0, 0], [1, 1, 0, 0], [1, 1, 1, 0], [1, 1, 1, 0], [0, 0, 1, 0], [0, 0, 1, 0], [0, 1, 1, 0], [0, 1, 0, 1]], 1, 2) == False
assert solution.possibleToStamp([[1, 1, 0, 1], [0, 0, 1, 0], [0, 1, 0, 0], [1, 0, 0, 0], [0, 1, 0, 1]], 5, 2) == False
assert solution.possibleToStamp([[1, 1, 0], [0, 1, 0], [1, 0, 1], [1, 1, 0], [1, 1, 0], [0, 1, 0], [1, 1, 1]], 2, 2) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1, 1, 1]], 1, 8) == False
assert solution.possibleToStamp([[1, 0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 0, 0, 1, 0, 0]], 5, 5) == False
assert solution.possibleToStamp([[1, 0, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 0, 1], [0, 0, 1, 0, 0, 0, 1], [1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 1, 0, 1], [1, 1, 1, 1, 1, 0, 1], [1, 1, 0, 0, 0, 0, 1]], 1, 4) == False
assert solution.possibleToStamp([[0, 0, 0, 0, 1, 0, 1, 1, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1], [1, 1, 1, 0, 1, 0, 0, 1, 1], [0, 0, 1, 1, 0, 1, 0, 0, 0], [0, 0, 1, 1, 1, 1, 1, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 0, 0, 0, 0, 0, 0]], 3, 2) == False
assert solution.possibleToStamp([[0, 0, 0, 1, 1, 0, 1], [1, 0, 0, 1, 1, 0, 0], [1, 1, 1, 1, 0, 0, 0]], 1, 4) == False
assert solution.possibleToStamp([[1, 1], [1, 0], [1, 0], [1, 0], [1, 0]], 4, 2) == False
assert solution.possibleToStamp([[1, 1, 1, 1, 0, 0, 0, 0, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 0], [1, 1, 1, 1, 1, 0, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1]], 3, 8) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 1, 0, 1, 0, 0], [0, 1, 1, 1, 0, 1, 0, 1, 1], [1, 0, 0, 1, 0, 1, 0, 1, 1], [1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 0, 1, 0, 1, 0, 1, 1]], 2, 4) == False
assert solution.possibleToStamp([[0, 1, 0, 1, 0, 1, 0, 1, 1], [1, 1, 0, 0, 0, 1, 0, 1, 0], [1, 0, 0, 1, 1, 1, 1, 1, 0], [1, 0, 1, 1, 1, 1, 1, 1, 1], [0, 1, 0, 1, 0, 0, 0, 1, 1]], 3, 9) == False
assert solution.possibleToStamp([[1, 0, 0, 1, 0], [1, 1, 0, 1, 0]], 1, 1) == True
assert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 1], [1, 0, 1, 0, 1, 0, 1], [0, 1, 0, 0, 0, 0, 0], [0, 0, 1, 1, 0, 0, 1], [1, 1, 0, 0, 1, 1, 0], [0, 0, 0, 1, 1, 1, 0], [1, 1, 1, 1, 0, 1, 0], [0, 0, 0, 1, 0, 0, 0], [0, 0, 1, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1]], 8, 5) == False
assert solution.possibleToStamp([[0, 0, 0, 1, 0, 1, 1, 1, 0, 0], [1, 1, 1, 0, 0, 1, 1, 1, 1, 1], [1, 0, 0, 0, 1, 0, 1, 0, 0, 0], [1, 0, 1, 0, 1, 1, 0, 1, 0, 1], [0, 1, 1, 0, 0, 0, 1, 1, 1, 1], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 1, 1, 0, 1, 0, 1, 1, 0, 0], [1, 1, 0, 1, 1, 1, 1, 0, 0, 0]], 4, 5) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 0, 1, 0, 1], [1, 0, 1, 0, 1, 1, 0, 0, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0, 1], [0, 0, 0, 1, 1, 0, 0, 1, 1, 0], [1, 0, 1, 1, 0, 0, 0, 0, 0, 1], [1, 1, 1, 0, 0, 1, 1, 1, 0, 0], [0, 1, 1, 0, 0, 0, 1, 0, 1, 0], [0, 1, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 0, 0, 0, 1, 1, 0, 0, 1]], 1, 10) == False
assert solution.possibleToStamp([[0, 1, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 0, 0, 0]], 2, 2) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 1, 1, 0, 0], [1, 0, 0, 1, 1, 1, 0, 1]], 2, 3) == False
assert solution.possibleToStamp([[1, 0, 0, 1, 1, 0, 1], [0, 1, 1, 0, 0, 1, 1]], 2, 7) == False
assert solution.possibleToStamp([[1, 1, 1], [1, 0, 0], [0, 1, 1]], 1, 3) == False
assert solution.possibleToStamp([[1, 1, 0, 1, 0, 0, 0, 1, 1, 0], [0, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 1, 1, 1, 0, 1, 0], [0, 1, 0, 0, 0, 1, 1, 0, 1, 0], [0, 0, 0, 0, 1, 1, 0, 0, 0, 0], [1, 0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 0, 0, 0, 1, 1, 0, 0, 0], [1, 0, 1, 1, 0, 1, 1, 0, 0, 1], [0, 0, 0, 1, 0, 1, 1, 0, 0, 1]], 2, 4) == False
assert solution.possibleToStamp([[1, 1], [1, 0], [1, 1], [1, 0], [1, 0], [0, 0], [1, 0], [1, 0], [0, 0], [0, 0]], 9, 2) == False
assert solution.possibleToStamp([[1, 0, 1, 1, 1], [0, 1, 1, 1, 1], [0, 0, 1, 1, 1], [0, 0, 0, 0, 1], [0, 0, 1, 1, 0], [0, 1, 1, 0, 1]], 2, 4) == False
assert solution.possibleToStamp([[1, 1], [0, 1], [0, 1], [0, 0]], 1, 1) == True
assert solution.possibleToStamp([[1, 0, 1, 0, 1], [0, 1, 1, 1, 1], [1, 1, 1, 1, 1], [0, 1, 0, 0, 1], [1, 0, 1, 1, 0], [1, 0, 1, 0, 0], [0, 1, 0, 1, 1], [0, 0, 0, 0, 0], [1, 0, 1, 0, 1], [1, 1, 0, 0, 0]], 8, 4) == False
assert solution.possibleToStamp([[0, 1, 1, 0, 1, 0, 0], [0, 0, 1, 1, 0, 0, 0], [1, 1, 1, 0, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1], [1, 1, 1, 0, 1, 0, 1], [1, 0, 1, 1, 1, 1, 1], [1, 0, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 0]], 2, 5) == False
assert solution.possibleToStamp([[1, 1], [1, 0], [0, 0], [0, 1], [0, 1], [0, 0], [0, 0], [1, 1], [1, 1], [0, 0]], 7, 2) == False
assert solution.possibleToStamp([[1, 1, 0, 0, 1, 1, 1, 0], [0, 1, 0, 1, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0, 0, 1], [0, 0, 1, 1, 0, 0, 1, 0], [0, 0, 0, 1, 0, 1, 1, 1]], 4, 4) == False
assert solution.possibleToStamp([[0, 1, 1, 0, 0, 0], [0, 1, 0, 1, 0, 0], [0, 1, 0, 0, 0, 0], [0, 0, 1, 1, 1, 0], [1, 1, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1], [0, 0, 0, 0, 0, 1]], 3, 3) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 0, 0], [1, 1, 0, 0, 1, 0], [1, 0, 1, 1, 1, 0], [0, 1, 0, 0, 0, 1], [1, 1, 1, 0, 1, 1], [1, 1, 0, 1, 1, 1]], 1, 5) == False
assert solution.possibleToStamp([[0, 0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 1, 0], [1, 1, 1, 0, 0, 1, 1], [0, 0, 0, 1, 1, 1, 0]], 1, 5) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 1, 0, 0, 0, 1, 0], [1, 1, 0, 0, 0, 0, 1, 1, 0, 0], [1, 0, 1, 1, 1, 1, 1, 0, 0, 1], [1, 0, 0, 1, 0, 0, 1, 0, 1, 0]], 1, 2) == False
assert solution.possibleToStamp([[0, 0, 1, 1, 1, 0, 1], [1, 0, 1, 1, 1, 1, 0], [0, 1, 1, 0, 1, 1, 1], [1, 0, 0, 1, 0, 0, 0]], 1, 7) == False
assert solution.possibleToStamp([[0, 1, 0, 1, 1], [1, 0, 0, 1, 1], [0, 1, 0, 1, 1]], 2, 3) == False
assert solution.possibleToStamp([[0, 1, 0], [1, 0, 1], [1, 1, 0], [0, 1, 1], [1, 0, 1], [1, 1, 1], [0, 1, 1], [1, 0, 0], [1, 0, 0]], 3, 1) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 1, 0, 1, 1, 0, 1], [0, 0, 0, 0, 1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 1, 0, 0, 0, 0, 0]], 3, 7) == False
assert solution.possibleToStamp([[1, 0, 1, 0, 1], [0, 0, 0, 0, 0], [1, 1, 0, 1, 0], [1, 0, 0, 1, 0], [1, 1, 0, 0, 0], [1, 0, 1, 1, 1], [1, 1, 0, 0, 0], [0, 1, 1, 1, 0]], 4, 3) == False
assert solution.possibleToStamp([[1, 1, 0, 1, 1, 1, 1, 0, 0], [0, 0, 1, 1, 1, 1, 0, 1, 1], [1, 1, 1, 1, 1, 1, 0, 1, 0], [1, 1, 0, 1, 1, 0, 0, 0, 0], [0, 0, 0, 1, 0, 1, 1, 1, 0], [0, 0, 0, 1, 1, 1, 1, 0, 0], [1, 0, 0, 1, 0, 1, 1, 0, 1], [0, 1, 0, 0, 0, 1, 0, 1, 0]], 7, 2) == False
assert solution.possibleToStamp([[0, 1, 0, 0, 1, 0], [0, 1, 0, 0, 0, 1], [0, 0, 0, 1, 1, 1], [0, 0, 0, 0, 0, 1], [1, 0, 0, 1, 0, 0]], 5, 2) == False
assert solution.possibleToStamp([[1, 0, 0, 1, 0, 1], [1, 0, 0, 0, 1, 1], [1, 1, 0, 0, 1, 1], [1, 1, 1, 0, 1, 0], [1, 0, 0, 0, 0, 1], [1, 0, 1, 0, 1, 1], [0, 1, 0, 0, 1, 1], [1, 0, 0, 0, 0, 1]], 7, 6) == False
assert solution.possibleToStamp([[1, 0], [1, 1], [0, 0], [1, 1], [1, 1], [0, 0], [1, 1], [0, 1], [1, 1]], 2, 2) == False
assert solution.possibleToStamp([[0, 0, 0, 1, 0, 0, 0, 1, 0, 0], [1, 0, 0, 1, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 0, 1, 1, 1, 0]], 1, 7) == False
assert solution.possibleToStamp([[1, 0, 0, 0, 0, 1, 1, 1], [0, 0, 1, 0, 1, 1, 1, 1], [0, 1, 1, 1, 1, 1, 1, 1]], 3, 8) == False
assert solution.possibleToStamp([[0, 0, 1, 0, 0, 0, 1, 1, 0], [0, 1, 0, 1, 1, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 1, 0], [1, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 0, 0, 1, 0, 1], [1, 0, 0, 1, 0, 1, 1, 1, 1], [0, 0, 0, 1, 1, 0, 1, 1, 0], [1, 0, 0, 0, 1, 1, 1, 0, 0], [1, 1, 0, 1, 1, 0, 0, 1, 1], [0, 0, 1, 0, 0, 0, 1, 0, 1]], 5, 2) == False
assert solution.possibleToStamp([[0, 1, 0, 1, 1, 0, 0, 1, 1, 0], [0, 0, 1, 0, 0, 0, 1, 0, 0, 0], [1, 0, 1, 0, 0, 0, 0, 0, 0, 0], [1, 1, 0, 0, 0, 1, 1, 1, 1, 0], [1, 0, 1, 0, 1, 1, 1, 0, 1, 0], [1, 0, 1, 1, 1, 0, 0, 1, 0, 1], [0, 0, 0, 1, 0, 0, 0, 0, 1, 0], [1, 0, 1, 1, 0, 1, 0, 0, 0, 1], [0, 1, 0, 1, 1, 1, 1, 1, 0, 0]], 9, 7) == False
assert solution.possibleToStamp([[0, 1, 0, 0], [1, 0, 1, 0], [0, 1, 1, 0], [1, 0, 1, 1], [0, 0, 0, 1], [0, 0, 1, 0]], 2, 3) == False
assert solution.possibleToStamp([[0, 1, 0, 1, 1, 0, 0, 1], [0, 0, 1, 0, 0, 0, 1, 0], [0, 1, 0, 1, 1, 0, 0, 1], [1, 1, 1, 0, 1, 0, 1, 1], [1, 1, 1, 0, 1, 0, 0, 1]], 2, 7) == False
assert solution.possibleToStamp([[0, 1, 1, 1], [0, 1, 0, 0], [0, 0, 0, 0], [1, 1, 0, 1], [1, 0, 0, 0], [0, 1, 1, 1], [0, 1, 1, 0]], 2, 3) == False
assert solution.possibleToStamp([[0, 1, 1, 1, 0, 0, 1, 0, 0], [1, 1, 1, 1, 1, 0, 1, 0, 0]], 2, 6) == False
assert solution.possibleToStamp([[0, 1, 1, 1], [0, 0, 1, 0], [1, 1, 1, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 1], [0, 0, 0, 0]], 1, 2) == False
assert solution.possibleToStamp([[0, 1, 1], [0, 0, 1], [0, 0, 1], [1, 1, 1], [1, 0, 1]], 5, 3) == False
assert solution.possibleToStamp([[1, 1, 0], [1, 0, 1], [0, 0, 0]], 3, 1) == False
